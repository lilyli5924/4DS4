// Copyright by Adam Kinsman, Henry Ko and Nicola Nicolici
// Developed for the Embedded Systems course (COE4DS4)
// Department of Electrical and Computer Engineering
// McMaster University
// Ontario, Canada

#include "define.h"
extern int orderlist[10] = {3,0,2,3,1,2,4,4,4,4};
// For the performance counter
void *performance_name = PERFORMANCE_COUNTER_0_BASE;

// Definition of semaphore for PBs
OS_EVENT *PBSemaphore[4];
OS_EVENT WaitSemaphore;
extern OS_EVENT *sche_sem;
extern OS_EVENT *detect_enable;

// Definition of task stacks
OS_STK	  initialize_task_stk[TASK_STACKSIZE];
OS_STK	  custom_scheduler_stk[TASK_STACKSIZE];
OS_TCB	  custom_scheduler_tcb;

OS_STK	  periodic_task_stk[NUM_TASK][TASK_STACKSIZE];
OS_TCB	  periodic_task_tcb[NUM_TASK];

// Struct for storing information about each custom task
typedef struct task_info_struct {
	int priority;
	int execution_time;
	int os_delay;
} task_info_struct;

// Struct for storing information about tasks during dynamic scheduling using the custom_scheduler
typedef struct scheduler_info_struct {
	int valid;
	int id;
	int period;
} scheduler_info_struct;

// Local function prototypes
void custom_delay(int);
int custom_task_create(int [], int, scheduler_info_struct [], task_info_struct []);
//volatile int end;
//int end = 4;
// Periodic task 0
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task0(void* pdata) {
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
	while (1) {
		printf("Start  periodic_task0 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
		custom_delay(task_info_ptr->execution_time);
		printf("End    periodic_task0 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
	}
}

// Periodic task 1
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task1(void* pdata) {
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
	while (1) {
		printf("Start  periodic_task1 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
		custom_delay(task_info_ptr->execution_time);
		printf("End    periodic_task1 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
	}
}

// Periodic task 2
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task2(void* pdata) {
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
	while (1) {
		printf("Start  periodic_task2 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
		custom_delay(task_info_ptr->execution_time);
		printf("End    periodic_task2 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
	}
}

// Periodic task 3
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task3(void* pdata) {
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
	while (1) {
		printf("Start  periodic_task3 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
		custom_delay(task_info_ptr->execution_time);
		printf("End    periodic_task3 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
	}
}

void button_pressed(int *orderlist){
///////add semaphore here
	int i;
	while(1){
		OSSemPend(detect_sem);
		new_pressed = 0;
		for (i = 0; i < NUM_PB_BUTTON; i++) {
			PB_pressed[i] = 0;
			sem_value = OSSemAccept(PBSemaphore[i]);
			if (sem_value != 0) {
				for (j=0;j < NUM_PB_BUTTON; j++){
					if (orderlist[i] ==4 )
						orderlist[j]=i;
				}
				//PB_pressed[i] = 1;
				//new_pressed = 1;
			}
		}
		OSSemPost(detect_sem);
	}
}

// The custom_scheduler
// It has the highest priority
// It checks the PBs every 500ms
// It a button has been pressed, it creates/deletes the corresponding task in the OS
// When creating a task, it will assign the new task with the lowest priority among the running tasks
void custom_scheduler(void *pdata) {
	INT8U return_code = OS_NO_ERR;
	int i,j;
	int PB_pressed[NUM_PB_BUTTON];
	int sem_value;
	int new_pressed;
	INT8U new_priority;
	int flag = 0;
	int pos = 0;
	

	int num_active_task;	
	// Array of task_info
	task_info_struct task_info[NUM_TASK];
	scheduler_info_struct scheduler_info[NUM_TASK];
	button_pressed(&orderlist);
	printf("Starting custom scheduler...\n");

	num_active_task = 0;
	while (1) {
	return_code = OSSemPend(sche_sem);
	alt_ucosii_check_return_code(return_code);
	for (j=0;j<10;j++){
	// Scheduler never returns
		if (orderlist[i] !=4){
			new_pressed = 0;
			flag = 0;
			pos = 0;
		// Check for PBs
//		for (i = 0; i < NUM_PB_BUTTON; i++) {
//			PB_pressed[i] = 0;
//			sem_value = OSSemAccept(PBSemaphore[i]);
//
//			if (sem_value != 0) {
//				PB_pressed[i] = 1;
//				new_pressed = 1;
//			}
//		}
		printf("orderlist [%d] = %d \n",j,orderlist[i]);
		PB_pressed[orderlist[j]] = 1;
		//if (new_pressed != 0) {
			printf("Locking OS scheduler for new scheduling\n");
			OSSchedLock();

			for (i = 0; i < num_active_task; i++) {//any button is pushed second time
				if (scheduler_info[i].valid == 1 && PB_pressed[scheduler_info[i].id] == 1){
					flag = 1;
					pos = i;
				}
			}
			if (flag == 1){
				for (i = 0; i < num_active_task; i++) {
					if (scheduler_info[i].valid == 1 && (task_info[scheduler_info[i].id].priority > task_info[scheduler_info[pos].id].priority) && i!=pos){//other active tasks
						new_priority = task_info[scheduler_info[i].id].priority - 1;
						OSTaskChangePrio(task_info[scheduler_info[i].id].priority, new_priority);
						task_info[scheduler_info[i].id].priority = new_priority;
						printf("other task info for tasks %d: %d \n", scheduler_info[i].id, task_info[scheduler_info[i].id].priority);
					}
				}
			}
				// check for task to delete if PB is pressed
			if (flag == 1 && task_info[scheduler_info[pos].id].priority != (TASK_START_PRIORITY + num_active_task-1)) {//be pushed second time
				// task is valid, mark it for deletion
				printf("-Marking task with id (%d) and priority (%d) for change prio \n", scheduler_info[pos].id, pos);

				OSTaskChangePrio(task_info[scheduler_info[pos].id].priority, TASK_START_PRIORITY + num_active_task-1);
				task_info[scheduler_info[pos].id].priority = TASK_START_PRIORITY + num_active_task-1;
				printf("repetitive task info for taks %d: %d \n", scheduler_info[pos].id, task_info[scheduler_info[pos].id].priority);
			}


			if (num_active_task < 4 && flag == 0) {//new button is pressed
				// Create the new task if available
				num_active_task += custom_task_create(PB_pressed, num_active_task, scheduler_info, task_info);
			}

			printf("Printing task info:\n");
			for (i = 0; i < num_active_task; i++) {
				printf("Priority %d: valid=%d, task_id=%d, period=%d, exec_time=%d, os_delay=%d, pri=%d\n",
					i,
					scheduler_info[i].valid,
					scheduler_info[i].id,
					scheduler_info[i].period,
					task_info[scheduler_info[i].id].execution_time,
					task_info[scheduler_info[i].id].os_delay,
					task_info[scheduler_info[i].id].priority);
			}

			printf("Unlocking OS scheduler\n");
			OSSchedUnlock();
			for (i = 0; i < NUM_PB_BUTTON; i++) {
				PB_pressed[i] = 0;
			}
		}
	}
		OSSemPost(detect_sem);
		OSTimeDlyHMSM(0, 0, 5, 0);
		OSSemPend(detect_sem);
		OSSemPost(sche_sem);

	}

}


// Function for creating a task in the OS, and update the data structure task_info
// The new task has the lowest priority among the existing tasks
int custom_task_create(int PB_pressed[], int num_active_task, scheduler_info_struct scheduler_info[], task_info_struct task_info[]) {
	int i;
	int num_task_created;
	INT8U new_priority;
	INT8U return_code = OS_NO_ERR;

	num_task_created = 0;
	printf("Creating task(s) in the OS ...\n");


	for (i = 0; i < num_active_task; i++) {
		if (scheduler_info[i].valid == 1){
			new_priority = task_info[scheduler_info[i].id].priority + 1;
			//new_priority += 1;
			printf("scheduler_info id = %d, new_priority = %d\n",scheduler_info[i].id, new_priority);
			OSTaskChangePrio(task_info[scheduler_info[i].id].priority, new_priority);
			task_info[scheduler_info[i].id].priority = new_priority;
			printf("task_info: %d \n", task_info[scheduler_info[i].id].priority);
		}
	}

	for (i = 0; i < NUM_PB_BUTTON; i++) {
		//if (PB_pressed[i] == 1 && scheduler_info[i].valid != 1) {
		if (PB_pressed[i] == 1 ) {
			task_info[i].execution_time = rand() % (EXECUTION_TIME_LIMIT_UPPER - EXECUTION_TIME_LIMIT_LOWER + 1) + EXECUTION_TIME_LIMIT_LOWER; //1000ms ~ 1750ms
			task_info[i].os_delay = rand() % (OS_DELAY_LIMIT_UPPER - OS_DELAY_LIMIT_LOWER + 1) + OS_DELAY_LIMIT_LOWER; //10 sec ~ 12 sec
			task_info[i].priority = 10; //Always
			
            scheduler_info[num_active_task + num_task_created].valid = 1;
            scheduler_info[num_active_task + num_task_created].period = task_info[i].execution_time + task_info[i].os_delay * 1000;
            scheduler_info[num_active_task + num_task_created].id = i;
            


			printf("-Creating periodic_task%d: execution_time_tick = %d, os_delay_time = %d: priority (%d)\n",
				i,
				task_info[i].execution_time,
				task_info[i].os_delay,
                10
                );

			// Create the task in the OS
			switch(i) {
				case 0:
					return_code = OSTaskCreateExt(periodic_task0,
											 &task_info[i],
											 (void *)&periodic_task_stk[i][TASK_STACKSIZE-1],
											 TASK_START_PRIORITY,
											 i,
											 &periodic_task_stk[i][0],
											 TASK_STACKSIZE,
											 &periodic_task_tcb[i],
											 0);
					alt_ucosii_check_return_code(return_code);
				break;
				case 1:
					return_code = OSTaskCreateExt(periodic_task1,
						 					&task_info[i],
											 (void *)&periodic_task_stk[i][TASK_STACKSIZE-1],
											 TASK_START_PRIORITY,
											 i,
											 &periodic_task_stk[i][0],
											 TASK_STACKSIZE,
											 &periodic_task_tcb[i],
											 0);
					alt_ucosii_check_return_code(return_code);
				break;
				case 2:
					return_code = OSTaskCreateExt(periodic_task2,
						 					&task_info[i],
											 (void *)&periodic_task_stk[i][TASK_STACKSIZE-1],
											 TASK_START_PRIORITY,
											 i,
											 &periodic_task_stk[i][0],
											 TASK_STACKSIZE,
											 &periodic_task_tcb[i],
											 0);
					alt_ucosii_check_return_code(return_code);
				break;
				default:
					return_code = OSTaskCreateExt(periodic_task3,
						 					&task_info[i],
											 (void *)&periodic_task_stk[i][TASK_STACKSIZE-1],
											 TASK_START_PRIORITY,
											 i,
											 &periodic_task_stk[i][0],
											 TASK_STACKSIZE,
											 &periodic_task_tcb[i],
											 0);
					alt_ucosii_check_return_code(return_code);
				break;
			}


			num_task_created++;
		}
	}

	printf("%d task created...\n", num_task_created);

	return num_task_created;
}

// Function for occupying the processor for the specified number of clock ticks
// to simulate custom delay while keeping the task in the processor
void custom_delay(int ticks) {
    INT32U cur_tick;
    ticks--;
    cur_tick = OSTimeGet();
    while (ticks > 0) {
         if (OSTimeGet() > cur_tick) {
            ticks--;
            cur_tick = OSTimeGet();
         }  
    }
}
