// Copyright by Adam Kinsman, Henry Ko and Nicola Nicolici
// Developed for the Embedded Systems course (COE4DS4)
// Department of Electrical and Computer Engineering
// McMaster University
// Ontario, Canada

#include "define.h"

int FindMin (short int *array) {
	int minimum,c;
	minimum = array[0];

	    for (c = 1; c < 512; c++)
	    {
	        if (array[c] < minimum)
	        {
	           minimum = array[c];
	        }
	    }
	    return minimum;
}


int countDistinct(short int *array, int size)
{
    int res = 0;
    int counter = 0;
    int i,j,k;

    for (i = 1; i < size; i++) {
    	 if (array[0] != array[i])
    		 counter ++;
    }
    if (counter == size - 1 )
    	res++;
    for (i = 1; i < size; i++) {
         for (j = 0; j < i; j++){
              if (array[i] == array[j])
                  break;
            // If not printed earlier, then print it
            }
         for (k = i+1; k < size; k++){
        	 if (array[i] == array[k])
        	    break;
         }
         if ((i == j) && (k == size)){
        	 res++;
         }
        } return res;
}

int FindNumMin (short int *array,int minimum) {
	int num_min = 0;
	int c;
	    for (c = 0; c < 512; c++)
	    {
	        if (array[c] == minimum)
	        {
	        	num_min++;
	        }
	    }
	    return num_min;
}
int FindNumMax (short int *array,int maximum) {
	int num_max = 0;
	int c;

	    for (c = 0; c < 512; c++)
	    {
	        if (array[c] == maximum)
	        {
	        	num_max++;
	        }
	    }
	    return num_max;
}


int FindMax (short int *array) {
	int maximum,c;
	maximum = array[0];

	    for (c = 1; c < 512; c++)
	    {
	        if (array[c] > maximum)
	        {
	        	maximum = array[c];
	        }
	    }
	    return maximum;
}

int main()
{
	int dram_in = 0;
	int sanity_check = 0;
	int sanity = 0;

	data software;
	software.distinct = 0;
	software.min = 0;
	software.max = 0;
	software.num_max = 0;
	software.num_min = 0;
	software.iter = 0;

	printf("Start main...\n");

	IOWR(LED_GREEN_O_BASE, 0, 0x0);
	IOWR(LED_RED_O_BASE, 0, 0x0);

	init_button_irq();
	printf("PB initialized...\n");

	init_counter_irq();
	printf("Counter IRQ initialized...\n");

	printf("System is up!\n");

	IOWR(LED_RED_O_BASE, 0, 0xF);

	short int data_set[512] = {};
	int i,j;

	printf("Generating random data for array...\n");
	for (j = 0; j < 9; j++) {
		usleep(200000);
		for (i = 0; i < 512; i++) {
			data_set[i] = (rand() % 65536) - 32768;

			// Write random numbers to dpram
			dram_in = (1 << 25) + ((i & 0x1ff) << 16) + (data_set[i] & 0xffff);
			IOWR(CUSTOM_DRAM_COMPONENT_0_BASE,0,dram_in);

			// Write the address and data information for further
			dram_in = (0 << 25) + ((i & 0x1ff) << 16) + (data_set[i]& 0xffff);
			IOWR(CUSTOM_DRAM_COMPONENT_0_BASE,0,dram_in);

			sanity = IORD(CUSTOM_DRAM_COMPONENT_0_BASE,1);
			sanity_check = (sanity & 0x8000) ? ~sanity + 1 : sanity;
	//		if (sanity & 0x8000){
	//			printf("Hardware Minimum value: %d\n",sanity_check);
	//		}
	//		else {
	//			printf("Hardware Minimum value: %d\n",sanity_check);
	//		}
		}
		software.min = FindMin(data_set);
		software.max = FindMax(data_set);
		software.num_min = FindNumMin(data_set,software.min);
		software.num_max = FindNumMax(data_set,software.max);
		software.distinct = countDistinct(data_set,512);

		// Start searching
		IOWR(CUSTOM_DRAM_COMPONENT_0_BASE,7,0x80000000);
		init_dram_irq(&software);
	}

	while(1);

	return 0;
}
