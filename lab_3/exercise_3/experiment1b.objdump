
experiment1b.elf:     file format elf32-littlenios2
experiment1b.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000dfc0 memsz 0x0000dfc0 flags r-x
    LOAD off    0x0000efe0 vaddr 0x0008dfe0 paddr 0x0008fa3c align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00011498 vaddr 0x00091498 paddr 0x00091498 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d980  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004ac  0008db34  0008db34  0000eb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0008dfe0  0008fa3c  0000efe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00091498  00091498  00011498  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010a3c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d58  00000000  00000000  00010a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001561  00000000  00000000  000117b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025892  00000000  00000000  00012d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000080d8  00000000  00000000  000385ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014b86  00000000  00000000  00040683  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b24  00000000  00000000  0005520c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002376  00000000  00000000  00056d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c437  00000000  00000000  000590a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000654e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000654f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006906d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00069070  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00069075  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00069076  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00069077  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00069082  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006908d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  00069098  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003f  00000000  00000000  000690a4  2**0
                  CONTENTS, READONLY
 26 .jdi          0000499d  00000000  00000000  000690e3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043279  00000000  00000000  0006da80  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008db34 l    d  .rodata	00000000 .rodata
0008dfe0 l    d  .rwdata	00000000 .rwdata
00091498 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PB_button.c
00091498 l     O .bss	00000004 button_3.2865
00000000 l    df *ABS*	00000000 custom_counter.c
00000000 l    df *ABS*	00000000 elevator.c
00000000 l    df *ABS*	00000000 experiment1b.c
00000000 l    df *ABS*	00000000 switch.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00081414 l     F .text	00000058 __sprint_r
0008dd0e l     O .rodata	00000010 blanks.3452
0008dcfe l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083490 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084eb8 l     F .text	00000058 std
00084fc4 l     F .text	00000008 __fp_lock
00084fcc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008dfe0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008fa08 l     O .rwdata	00000004 charset
0008dd44 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008de8c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000896b0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008a7dc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008b0e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008b140 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008b244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008b528 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008b608 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008b768 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b998 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008fa30 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008bc50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008e99c l     O .rwdata	00001060 jtag_uart_0
0008bd28 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008bf68 l     F .text	00000228 altera_avalon_jtag_uart_irq
0008c190 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008ca30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008ce40 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0008cf90 l     F .text	000000f8 alt_file_locked
0008d214 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008d8b0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008da64 l     F .text	00000040 alt_sim_halt
000812c8 g     F .text	0000001c putchar
00086ca8 g     F .text	00000094 _mprec_log10
00086d94 g     F .text	00000088 __any_on
00088884 g     F .text	00000070 _isatty_r
0008de64 g     O .rodata	00000028 __mprec_tinytens
0008b7c8 g     F .text	0000006c alt_main
000812ec g     F .text	000000a0 _puts_r
000914f8 g     O .bss	00000100 alt_irq
000888f4 g     F .text	00000078 _lseek_r
0008fa3c g       *ABS*	00000000 __flash_rwdata_start
0008a1d0 g     F .text	00000088 __eqdf2
00091788 g       *ABS*	00000000 __alt_heap_start
00081250 g     F .text	00000044 printf
000881f0 g     F .text	00000068 __sseek
00084f20 g     F .text	000000a4 __sinit
000883f0 g     F .text	00000130 __swbuf_r
00085c2c g     F .text	00000084 _setlocale_r
00085020 g     F .text	0000009c __sfmoreglue
0008b854 g     F .text	00000020 __malloc_unlock
000811c0 g     F .text	00000058 init_switch_irq
00080294 g     F .text	00000058 KEY3_Pressed
00086724 g     F .text	000000e0 memmove
00085010 g     F .text	00000010 _cleanup
00086e1c g     F .text	000000bc _Balloc
000806bc g     F .text	00000028 read_counter_interrupt
0008a2e0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080cc8 g     F .text	00000060 opendoor
00080020 g       *ABS*	00000000 __flash_exceptions_start
00088810 g     F .text	00000074 _fstat_r
000914b4 g     O .bss	00000004 errno
000914c0 g     O .bss	00000004 alt_argv
000979fc g       *ABS*	00000000 _gp
0008e81c g     O .rwdata	00000180 alt_fd_list
000812e4 g     F .text	00000008 _putchar_r
0008d438 g     F .text	00000094 alt_find_dev
00086684 g     F .text	000000a0 memcpy
00085004 g     F .text	0000000c _cleanup_r
0008a478 g     F .text	000000f8 __floatsidf
0008cf18 g     F .text	00000078 alt_io_redirect
0008a3f0 g     F .text	00000088 __ltdf2
00080588 g     F .text	000000c8 handle_counter_expire_interrupts
0008db34 g       *ABS*	00000000 __DTOR_END__
0008138c g     F .text	00000014 puts
00086bf8 g     F .text	000000b0 __ratio
0008c3a8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00081294 g     F .text	00000034 _printf_r
0008a918 g     F .text	00000008 __udivsi3
0008b464 g     F .text	000000c4 isatty
0008dd74 g     O .rodata	000000c8 __mprec_tens
00085c08 g     F .text	00000008 __locale_charset
000914a8 g     O .bss	00000004 __malloc_top_pad
0008fa04 g     O .rwdata	00000004 __mb_cur_max
00085c10 g     F .text	0000000c _localeconv_r
00087580 g     F .text	0000003c __i2b
000855ec g     F .text	0000049c __sfvwrite_r
00088178 g     F .text	00000070 _sbrk_r
0008896c g     F .text	00000078 _read_r
0008e3e0 g     O .rwdata	0000000c __lc_ctype
0008fa24 g     O .rwdata	00000004 alt_max_fd
0008ade0 g     F .text	00000138 __unpack_d
000886ec g     F .text	00000110 _fclose_r
00084e84 g     F .text	00000034 fflush
000914ac g     O .bss	00000004 __malloc_max_sbrked_mem
0008b2a4 g     F .text	000001c0 alt_irq_register
00089b40 g     F .text	00000074 __adddf3
00086ad8 g     F .text	00000120 __b2d
00089050 g     F .text	00000660 __umoddi3
0008b674 g     F .text	000000f4 lseek
0008fa00 g     O .rwdata	00000004 _global_impure_ptr
00087b14 g     F .text	000005f4 _realloc_r
00091788 g       *ABS*	00000000 __bss_end
0008cd48 g     F .text	000000f8 alt_iic_isr_register
0008d30c g     F .text	0000010c alt_tick
000889e4 g     F .text	0000066c __udivdi3
0008077c g     F .text	000004f8 FindNext
0008de3c g     O .rodata	00000028 __mprec_bigtens
00087808 g     F .text	00000120 __s2b
0008a648 g     F .text	00000194 __floatunsidf
000869f8 g     F .text	00000060 __mcmp
00084fec g     F .text	00000018 __fp_lock_all
0008cd00 g     F .text	00000048 alt_ic_irq_enabled
0008d274 g     F .text	00000098 alt_alarm_stop
000914b8 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008e7f4 g     O .rwdata	00000028 alt_dev_null
00080250 g     F .text	00000044 KEY2_Pressed
0008c960 g     F .text	0000001c alt_dcache_flush_all
000868c4 g     F .text	00000070 __hi0bits
0008a570 g     F .text	000000d8 __fixdfsi
0008fa3c g       *ABS*	00000000 __ram_rwdata_end
0008fa1c g     O .rwdata	00000008 alt_dev_list
0008bb2c g     F .text	00000124 write
00087a2c g     F .text	000000e8 _putc_r
0008dfe0 g       *ABS*	00000000 __ram_rodata_end
0008b16c g     F .text	000000d8 fstat
000876e8 g     F .text	00000120 __pow5mult
0009149c g     O .bss	00000004 __nlocale_changed
0008a920 g     F .text	00000008 __umodsi3
00091788 g       *ABS*	00000000 end
0008bea8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008db30 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008aa4c g     F .text	00000080 __clzsi2
0008c5cc g     F .text	00000240 altera_avalon_jtag_uart_write
00084f10 g     F .text	00000004 __sfp_lock_acquire
000865a0 g     F .text	000000e4 memchr
0008146c g     F .text	00001ec4 ___vfprintf_internal_r
000852d8 g     F .text	00000314 _free_r
000810d4 g     F .text	000000ec handle_switch_interrupt
0008d8b4 g     F .text	000001b0 __call_exitprocs
000914a0 g     O .bss	00000004 __mlocale_changed
0008fa10 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
000914c8 g     O .bss	00000004 _alt_tick_rate
000871e0 g     F .text	0000014c __lshift
000914cc g     O .bss	00000004 _alt_nticks
0008b874 g     F .text	00000124 read
0008bce4 g     F .text	00000044 alt_sys_init
0008d77c g     F .text	00000134 __register_exitproc
0008732c g     F .text	00000254 __multiply
0008c240 g     F .text	00000074 altera_avalon_jtag_uart_close
00081218 g     F .text	00000038 __mulsi3
0008dfe0 g       *ABS*	00000000 __ram_rwdata_start
0008db34 g       *ABS*	00000000 __ram_rodata_start
000914d0 g     O .bss	00000028 __malloc_current_mallinfo
00081008 g     F .text	000000cc insertSort
00086ed8 g     F .text	0000017c __d2b
0008020c g     F .text	00000044 KEY1_Pressed
00080428 g     F .text	00000160 disp_seven_seg
0008bd60 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008d5ec g     F .text	000000d0 alt_get_fd
0008af18 g     F .text	000000c8 __fpcmp_parts_d
0008867c g     F .text	00000070 _close_r
0008d708 g     F .text	00000074 memcmp
0008be10 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00091788 g       *ABS*	00000000 __alt_stack_base
0008be58 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00083354 g     F .text	0000013c __swsetup_r
00089f78 g     F .text	00000258 __divdf3
000850bc g     F .text	000000f0 __sfp
00086d3c g     F .text	00000058 __copybits
0008e3ec g     O .rwdata	00000408 __malloc_av_
00084f1c g     F .text	00000004 __sinit_lock_release
00089bb4 g     F .text	000003c4 __muldf3
000882d4 g     F .text	00000060 __sread
0008d4cc g     F .text	00000120 alt_find_file
0008c97c g     F .text	000000b4 alt_dev_llist_insert
0008b834 g     F .text	00000020 __malloc_lock
0008ba70 g     F .text	000000bc sbrk
00084c88 g     F .text	000001fc _fflush_r
000885b4 g     F .text	000000c8 _calloc_r
00091498 g       *ABS*	00000000 __bss_start
00086804 g     F .text	00000098 memset
00080d28 g     F .text	000002e0 main
000914c4 g     O .bss	00000004 alt_envp
000914b0 g     O .bss	00000004 __malloc_max_total_mem
0008bdb8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00088520 g     F .text	0000001c __swbuf
000881e8 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00080734 g     F .text	00000048 init_counter_irq
000887fc g     F .text	00000014 fclose
000915f8 g     O .bss	00000190 _atexit0
000836d4 g     F .text	000015b4 _dtoa_r
00085e60 g     F .text	00000740 _malloc_r
0008fa28 g     O .rwdata	00000004 alt_errno
00085b50 g     F .text	000000b8 _fwalk
00087928 g     F .text	00000104 putc
0008a858 g     F .text	00000060 __divsi3
0008de98 g     O .rodata	00000014 __thenan_df
000851ac g     F .text	0000012c _malloc_trim_r
0008db34 g       *ABS*	00000000 __CTOR_END__
00088334 g     F .text	000000bc strcmp
0008db34 g       *ABS*	00000000 __flash_rodata_start
0008db34 g       *ABS*	00000000 __DTOR_LIST__
0008a258 g     F .text	00000088 __nedf2
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0008bcb0 g     F .text	00000034 alt_irq_init
0008b9f8 g     F .text	00000078 alt_release_fd
000803d0 g     F .text	00000058 init_button_irq
0008deac g     O .rodata	00000100 __clz_tab
000914a4 g     O .bss	00000004 _PathLocale
00080650 g     F .text	00000044 reset_counter
0008d6bc g     F .text	00000014 atexit
0008853c g     F .text	00000078 _write_r
00085cb0 g     F .text	0000001c setlocale
0008f9fc g     O .rwdata	00000004 _impure_ptr
000914bc g     O .bss	00000004 alt_argc
0008caf4 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00086a58 g     F .text	00000080 __ulp
00088108 g     F .text	00000040 __isinfd
00084fd4 g     F .text	00000018 __fp_unlock_all
0008fa14 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00085c1c g     F .text	00000010 localeconv
0008cb74 g     F .text	00000050 alt_ic_isr_register
0008fa3c g       *ABS*	00000000 _edata
00080c74 g     F .text	00000054 elevator
000801f0 g     F .text	0000001c KEY0_Pressed
00091788 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008c2b4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008cc60 g     F .text	000000a0 alt_ic_irq_disable
00088258 g     F .text	0000007c __swrite
0008fa0c g     O .rwdata	00000004 __malloc_trim_threshold
0008d418 g     F .text	00000020 altera_nios2_qsys_irq_init
0008d6d0 g     F .text	00000038 exit
00085a88 g     F .text	000000c8 _fwalk_reent
000806e4 g     F .text	00000050 load_counter_config
00087054 g     F .text	0000018c __mdiff
0008a8b8 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084f14 g     F .text	00000004 __sfp_lock_release
0008daa4 g     F .text	00000020 _exit
00088148 g     F .text	00000030 __isnand
0008c80c g     F .text	00000154 alt_alarm_start
00080694 g     F .text	00000028 read_counter
0008a928 g     F .text	00000124 __muldi3
00085ccc g     F .text	00000194 __smakebuf_r
000813a0 g     F .text	00000074 strlen
0008d088 g     F .text	0000018c open
0008a368 g     F .text	00000088 __gedf2
0008cb58 g     F .text	0000001c alt_icache_flush_all
0008fa2c g     O .rwdata	00000004 alt_priority_mask
0008cbc4 g     F .text	0000009c alt_ic_irq_enable
00083330 g     F .text	00000024 __vfprintf_internal
00089ac0 g     F .text	00000080 __subdf3
00086934 g     F .text	000000c4 __lo0bits
0008fa34 g     O .rwdata	00000008 alt_alarm_list
0008ca90 g     F .text	00000064 _do_ctors
000802ec g     F .text	000000e4 handle_button_interrupts
0008afe0 g     F .text	00000100 close
0008b588 g     F .text	00000080 alt_load
0008aacc g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00084f18 g     F .text	00000004 __sinit_lock_acquire
000875bc g     F .text	0000012c __multadd
0008689c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c53e04 	addi	r3,r3,5368
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c53e04 	addi	r3,r3,5368
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d69e7f14 	ori	gp,gp,31228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	10852614 	ori	r2,r2,5272

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18c5e214 	ori	r3,r3,6024

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008b5880 	call	8b588 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008b7c80 	call	8b7c8 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <KEY0_Pressed>:
// McMaster University
// Ontario, Canada

#include "define.h"

void KEY0_Pressed() {
   801f0:	deffff04 	addi	sp,sp,-4
   801f4:	df000015 	stw	fp,0(sp)
   801f8:	d839883a 	mov	fp,sp
	//reset_counter();
}
   801fc:	e037883a 	mov	sp,fp
   80200:	df000017 	ldw	fp,0(sp)
   80204:	dec00104 	addi	sp,sp,4
   80208:	f800283a 	ret

0008020c <KEY1_Pressed>:

void KEY1_Pressed(int *open) {//upload the time door open
   8020c:	defffe04 	addi	sp,sp,-8
   80210:	df000115 	stw	fp,4(sp)
   80214:	df000104 	addi	fp,sp,4
   80218:	e13fff15 	stw	r4,-4(fp)
	//load_counter_config((IORD(SWITCH_I_BASE, 0) & 0x18000) >> 15);
	*open = (IORD(SWITCH_I_BASE, 0) & 0x18000) >> 15;
   8021c:	00800434 	movhi	r2,16
   80220:	10841004 	addi	r2,r2,4160
   80224:	10c00037 	ldwio	r3,0(r2)
   80228:	008000b4 	movhi	r2,2
   8022c:	10a00004 	addi	r2,r2,-32768
   80230:	1884703a 	and	r2,r3,r2
   80234:	1007d3fa 	srai	r3,r2,15
   80238:	e0bfff17 	ldw	r2,-4(fp)
   8023c:	10c00015 	stw	r3,0(r2)
}
   80240:	e037883a 	mov	sp,fp
   80244:	df000017 	ldw	fp,0(sp)
   80248:	dec00104 	addi	sp,sp,4
   8024c:	f800283a 	ret

00080250 <KEY2_Pressed>:

void KEY2_Pressed(int *move) {//upload the time takes
   80250:	defffe04 	addi	sp,sp,-8
   80254:	df000115 	stw	fp,4(sp)
   80258:	df000104 	addi	fp,sp,4
   8025c:	e13fff15 	stw	r4,-4(fp)
	//load_counter_config((IORD(SWITCH_I_BASE, 0) & 0x18000) >> 15);
	//printf("Counter value = %d\n", read_counter());
	*move = (IORD(SWITCH_I_BASE, 0) & 0x18000) >> 15;
   80260:	00800434 	movhi	r2,16
   80264:	10841004 	addi	r2,r2,4160
   80268:	10c00037 	ldwio	r3,0(r2)
   8026c:	008000b4 	movhi	r2,2
   80270:	10a00004 	addi	r2,r2,-32768
   80274:	1884703a 	and	r2,r3,r2
   80278:	1007d3fa 	srai	r3,r2,15
   8027c:	e0bfff17 	ldw	r2,-4(fp)
   80280:	10c00015 	stw	r3,0(r2)

}
   80284:	e037883a 	mov	sp,fp
   80288:	df000017 	ldw	fp,0(sp)
   8028c:	dec00104 	addi	sp,sp,4
   80290:	f800283a 	ret

00080294 <KEY3_Pressed>:

void KEY3_Pressed(int *hold) {
   80294:	defffd04 	addi	sp,sp,-12
   80298:	dfc00215 	stw	ra,8(sp)
   8029c:	df000115 	stw	fp,4(sp)
   802a0:	df000104 	addi	fp,sp,4
   802a4:	e13fff15 	stw	r4,-4(fp)
	int static button_3 = 0;
	button_3 = button_3 ^ 0x1;
   802a8:	d0a6a717 	ldw	r2,-25956(gp)
   802ac:	1080005c 	xori	r2,r2,1
   802b0:	d0a6a715 	stw	r2,-25956(gp)
	*hold = button_3;
   802b4:	d0e6a717 	ldw	r3,-25956(gp)
   802b8:	e0bfff17 	ldw	r2,-4(fp)
   802bc:	10c00015 	stw	r3,0(r2)
	if(button_3 == 1){
   802c0:	d0a6a717 	ldw	r2,-25956(gp)
   802c4:	10800058 	cmpnei	r2,r2,1
   802c8:	1000031e 	bne	r2,zero,802d8 <KEY3_Pressed+0x44>
		printf("You are holding the door \n");
   802cc:	01000274 	movhi	r4,9
   802d0:	2136cd04 	addi	r4,r4,-9420
   802d4:	008138c0 	call	8138c <puts>
	}
}
   802d8:	e037883a 	mov	sp,fp
   802dc:	dfc00117 	ldw	ra,4(sp)
   802e0:	df000017 	ldw	fp,0(sp)
   802e4:	dec00204 	addi	sp,sp,8
   802e8:	f800283a 	ret

000802ec <handle_button_interrupts>:

// ISR when any PB is pressed
void handle_button_interrupts(counter* PB_timer)
{
   802ec:	defffc04 	addi	sp,sp,-16
   802f0:	dfc00315 	stw	ra,12(sp)
   802f4:	df000215 	stw	fp,8(sp)
   802f8:	df000204 	addi	fp,sp,8
   802fc:	e13ffe15 	stw	r4,-8(fp)
	IOWR(LED_GREEN_O_BASE, 0, IORD(PUSH_BUTTON_I_BASE, 3)*IORD(PUSH_BUTTON_I_BASE, 3));
   80300:	00800434 	movhi	r2,16
   80304:	10840304 	addi	r2,r2,4108
   80308:	11000037 	ldwio	r4,0(r2)
   8030c:	00800434 	movhi	r2,16
   80310:	10840304 	addi	r2,r2,4108
   80314:	11400037 	ldwio	r5,0(r2)
   80318:	00812180 	call	81218 <__mulsi3>
   8031c:	1007883a 	mov	r3,r2
   80320:	00800434 	movhi	r2,16
   80324:	10840804 	addi	r2,r2,4128
   80328:	10c00035 	stwio	r3,0(r2)

	switch(IORD(PUSH_BUTTON_I_BASE, 3)) {
   8032c:	00800434 	movhi	r2,16
   80330:	10840304 	addi	r2,r2,4108
   80334:	10800037 	ldwio	r2,0(r2)
   80338:	e0bfff15 	stw	r2,-4(fp)
   8033c:	e0ffff17 	ldw	r3,-4(fp)
   80340:	188000a0 	cmpeqi	r2,r3,2
   80344:	1000101e 	bne	r2,zero,80388 <handle_button_interrupts+0x9c>
   80348:	e0ffff17 	ldw	r3,-4(fp)
   8034c:	188000c8 	cmpgei	r2,r3,3
   80350:	1000041e 	bne	r2,zero,80364 <handle_button_interrupts+0x78>
   80354:	e0ffff17 	ldw	r3,-4(fp)
   80358:	18800060 	cmpeqi	r2,r3,1
   8035c:	1000081e 	bne	r2,zero,80380 <handle_button_interrupts+0x94>
   80360:	00001306 	br	803b0 <handle_button_interrupts+0xc4>
   80364:	e0ffff17 	ldw	r3,-4(fp)
   80368:	18800120 	cmpeqi	r2,r3,4
   8036c:	1000091e 	bne	r2,zero,80394 <handle_button_interrupts+0xa8>
   80370:	e0ffff17 	ldw	r3,-4(fp)
   80374:	18800220 	cmpeqi	r2,r3,8
   80378:	10000a1e 	bne	r2,zero,803a4 <handle_button_interrupts+0xb8>
   8037c:	00000c06 	br	803b0 <handle_button_interrupts+0xc4>
	case 1: KEY0_Pressed(); break;
   80380:	00801f00 	call	801f0 <KEY0_Pressed>
   80384:	00000a06 	br	803b0 <handle_button_interrupts+0xc4>
	case 2: KEY1_Pressed(&PB_timer->door_open); break;
   80388:	e13ffe17 	ldw	r4,-8(fp)
   8038c:	008020c0 	call	8020c <KEY1_Pressed>
   80390:	00000706 	br	803b0 <handle_button_interrupts+0xc4>
	case 4: KEY2_Pressed(&PB_timer->elevator_move); break;
   80394:	e0bffe17 	ldw	r2,-8(fp)
   80398:	11000104 	addi	r4,r2,4
   8039c:	00802500 	call	80250 <KEY2_Pressed>
   803a0:	00000306 	br	803b0 <handle_button_interrupts+0xc4>
	case 8: KEY3_Pressed(&PB_timer->hold); break;
   803a4:	e0bffe17 	ldw	r2,-8(fp)
   803a8:	11000204 	addi	r4,r2,8
   803ac:	00802940 	call	80294 <KEY3_Pressed>
	}


	IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   803b0:	00800434 	movhi	r2,16
   803b4:	10840304 	addi	r2,r2,4108
   803b8:	10000035 	stwio	zero,0(r2)
}
   803bc:	e037883a 	mov	sp,fp
   803c0:	dfc00117 	ldw	ra,4(sp)
   803c4:	df000017 	ldw	fp,0(sp)
   803c8:	dec00204 	addi	sp,sp,8
   803cc:	f800283a 	ret

000803d0 <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq(counter* PB_timer) {
   803d0:	defffd04 	addi	sp,sp,-12
   803d4:	dfc00215 	stw	ra,8(sp)
   803d8:	df000115 	stw	fp,4(sp)
   803dc:	df000104 	addi	fp,sp,4
   803e0:	e13fff15 	stw	r4,-4(fp)
  // Enable all 4 button interrupts
  IOWR(PUSH_BUTTON_I_BASE, 2, BUTTON_INT_MASK);
   803e4:	00800434 	movhi	r2,16
   803e8:	10840204 	addi	r2,r2,4104
   803ec:	00c003c4 	movi	r3,15
   803f0:	10c00035 	stwio	r3,0(r2)

  // Reset the edge capture register
  IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   803f4:	00800434 	movhi	r2,16
   803f8:	10840304 	addi	r2,r2,4108
   803fc:	10000035 	stwio	zero,0(r2)

  // Register the interrupt handler
  alt_irq_register(PUSH_BUTTON_I_IRQ, (void*)PB_timer, (void*)handle_button_interrupts );
   80400:	01000044 	movi	r4,1
   80404:	e17fff17 	ldw	r5,-4(fp)
   80408:	01800234 	movhi	r6,8
   8040c:	3180bb04 	addi	r6,r6,748
   80410:	008b2a40 	call	8b2a4 <alt_irq_register>
}
   80414:	e037883a 	mov	sp,fp
   80418:	dfc00117 	ldw	ra,4(sp)
   8041c:	df000017 	ldw	fp,0(sp)
   80420:	dec00204 	addi	sp,sp,8
   80424:	f800283a 	ret

00080428 <disp_seven_seg>:
// CODE SECTION BEGIN //
////////////////////////

#include "define.h"

alt_u16 disp_seven_seg(alt_u8 val) {
   80428:	defffc04 	addi	sp,sp,-16
   8042c:	df000315 	stw	fp,12(sp)
   80430:	df000304 	addi	fp,sp,12
   80434:	e13ffd05 	stb	r4,-12(fp)
	switch (val) {
   80438:	e0bffd03 	ldbu	r2,-12(fp)
   8043c:	e0bfff15 	stw	r2,-4(fp)
   80440:	e0ffff17 	ldw	r3,-4(fp)
   80444:	18800428 	cmpgeui	r2,r3,16
   80448:	1000481e 	bne	r2,zero,8056c <disp_seven_seg+0x144>
   8044c:	e13fff17 	ldw	r4,-4(fp)
   80450:	e13fff17 	ldw	r4,-4(fp)
   80454:	2105883a 	add	r2,r4,r4
   80458:	1087883a 	add	r3,r2,r2
   8045c:	00800234 	movhi	r2,8
   80460:	10811c04 	addi	r2,r2,1136
   80464:	1885883a 	add	r2,r3,r2
   80468:	10800017 	ldw	r2,0(r2)
   8046c:	1000683a 	jmp	r2
   80470:	000804b0 	cmpltui	zero,zero,8210
   80474:	000804bc 	xorhi	zero,zero,8210
   80478:	000804c8 	cmpgei	zero,zero,8211
   8047c:	000804d4 	movui	zero,8211
   80480:	000804e0 	cmpeqi	zero,zero,8211
   80484:	000804ec 	andhi	zero,zero,8211
   80488:	000804f8 	rdprs	zero,zero,8211
   8048c:	00080504 	movi	zero,8212
   80490:	00080510 	cmplti	zero,zero,8212
   80494:	00080518 	cmpnei	zero,zero,8212
   80498:	00080524 	muli	zero,zero,8212
   8049c:	00080530 	cmpltui	zero,zero,8212
   804a0:	0008053c 	xorhi	zero,zero,8212
   804a4:	00080548 	cmpgei	zero,zero,8213
   804a8:	00080554 	movui	zero,8213
   804ac:	00080560 	cmpeqi	zero,zero,8213
    	case  0 : return 0x40;
   804b0:	00801004 	movi	r2,64
   804b4:	e0bffe15 	stw	r2,-8(fp)
   804b8:	00002e06 	br	80574 <disp_seven_seg+0x14c>
    	case  1 : return 0x79;
   804bc:	00c01e44 	movi	r3,121
   804c0:	e0fffe15 	stw	r3,-8(fp)
   804c4:	00002b06 	br	80574 <disp_seven_seg+0x14c>
    	case  2 : return 0x24;
   804c8:	01000904 	movi	r4,36
   804cc:	e13ffe15 	stw	r4,-8(fp)
   804d0:	00002806 	br	80574 <disp_seven_seg+0x14c>
    	case  3 : return 0x30;
   804d4:	00800c04 	movi	r2,48
   804d8:	e0bffe15 	stw	r2,-8(fp)
   804dc:	00002506 	br	80574 <disp_seven_seg+0x14c>
    	case  4 : return 0x19;
   804e0:	00c00644 	movi	r3,25
   804e4:	e0fffe15 	stw	r3,-8(fp)
   804e8:	00002206 	br	80574 <disp_seven_seg+0x14c>
    	case  5 : return 0x12;
   804ec:	01000484 	movi	r4,18
   804f0:	e13ffe15 	stw	r4,-8(fp)
   804f4:	00001f06 	br	80574 <disp_seven_seg+0x14c>
    	case  6 : return 0x02;
   804f8:	00800084 	movi	r2,2
   804fc:	e0bffe15 	stw	r2,-8(fp)
   80500:	00001c06 	br	80574 <disp_seven_seg+0x14c>
    	case  7 : return 0x78;
   80504:	00c01e04 	movi	r3,120
   80508:	e0fffe15 	stw	r3,-8(fp)
   8050c:	00001906 	br	80574 <disp_seven_seg+0x14c>
    	case  8 : return 0x00;
   80510:	e03ffe15 	stw	zero,-8(fp)
   80514:	00001706 	br	80574 <disp_seven_seg+0x14c>
    	case  9 : return 0x18;
   80518:	01000604 	movi	r4,24
   8051c:	e13ffe15 	stw	r4,-8(fp)
   80520:	00001406 	br	80574 <disp_seven_seg+0x14c>
    	case 10 : return 0x08;
   80524:	00800204 	movi	r2,8
   80528:	e0bffe15 	stw	r2,-8(fp)
   8052c:	00001106 	br	80574 <disp_seven_seg+0x14c>
    	case 11 : return 0x03;
   80530:	00c000c4 	movi	r3,3
   80534:	e0fffe15 	stw	r3,-8(fp)
   80538:	00000e06 	br	80574 <disp_seven_seg+0x14c>
    	case 12 : return 0x46;
   8053c:	01001184 	movi	r4,70
   80540:	e13ffe15 	stw	r4,-8(fp)
   80544:	00000b06 	br	80574 <disp_seven_seg+0x14c>
    	case 13 : return 0x21;
   80548:	00800844 	movi	r2,33
   8054c:	e0bffe15 	stw	r2,-8(fp)
   80550:	00000806 	br	80574 <disp_seven_seg+0x14c>
    	case 14 : return 0x06;
   80554:	00c00184 	movi	r3,6
   80558:	e0fffe15 	stw	r3,-8(fp)
   8055c:	00000506 	br	80574 <disp_seven_seg+0x14c>
    	case 15 : return 0x0e;
   80560:	01000384 	movi	r4,14
   80564:	e13ffe15 	stw	r4,-8(fp)
   80568:	00000206 	br	80574 <disp_seven_seg+0x14c>
    	default : return 0x7f;
   8056c:	00801fc4 	movi	r2,127
   80570:	e0bffe15 	stw	r2,-8(fp)
   80574:	e0bffe17 	ldw	r2,-8(fp)
	}
}
   80578:	e037883a 	mov	sp,fp
   8057c:	df000017 	ldw	fp,0(sp)
   80580:	dec00104 	addi	sp,sp,4
   80584:	f800283a 	ret

00080588 <handle_counter_expire_interrupts>:


// ISR when the counter is expired
void handle_counter_expire_interrupts(floor_P* current_floor)
{
   80588:	defffd04 	addi	sp,sp,-12
   8058c:	dfc00215 	stw	ra,8(sp)
   80590:	df000115 	stw	fp,4(sp)
   80594:	df000104 	addi	fp,sp,4
   80598:	e13fff15 	stw	r4,-4(fp)
	if (current_floor->state){
   8059c:	e0bfff17 	ldw	r2,-4(fp)
   805a0:	10800417 	ldw	r2,16(r2)
   805a4:	1005003a 	cmpeq	r2,r2,zero
   805a8:	10001e1e 	bne	r2,zero,80624 <handle_counter_expire_interrupts+0x9c>
		if(current_floor->cur_floor < current_floor->des_floor) {
   805ac:	e0bfff17 	ldw	r2,-4(fp)
   805b0:	10c00117 	ldw	r3,4(r2)
   805b4:	e0bfff17 	ldw	r2,-4(fp)
   805b8:	10800017 	ldw	r2,0(r2)
   805bc:	1880060e 	bge	r3,r2,805d8 <handle_counter_expire_interrupts+0x50>
			current_floor->cur_floor = current_floor->cur_floor + 1;
   805c0:	e0bfff17 	ldw	r2,-4(fp)
   805c4:	10800117 	ldw	r2,4(r2)
   805c8:	10c00044 	addi	r3,r2,1
   805cc:	e0bfff17 	ldw	r2,-4(fp)
   805d0:	10c00115 	stw	r3,4(r2)
   805d4:	00000506 	br	805ec <handle_counter_expire_interrupts+0x64>
		}else {
			current_floor->cur_floor = current_floor->cur_floor - 1;
   805d8:	e0bfff17 	ldw	r2,-4(fp)
   805dc:	10800117 	ldw	r2,4(r2)
   805e0:	10ffffc4 	addi	r3,r2,-1
   805e4:	e0bfff17 	ldw	r2,-4(fp)
   805e8:	10c00115 	stw	r3,4(r2)
		}
		IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, disp_seven_seg((current_floor->cur_floor)));
   805ec:	e0bfff17 	ldw	r2,-4(fp)
   805f0:	10800117 	ldw	r2,4(r2)
   805f4:	11003fcc 	andi	r4,r2,255
   805f8:	00804280 	call	80428 <disp_seven_seg>
   805fc:	10ffffcc 	andi	r3,r2,65535
   80600:	00800434 	movhi	r2,16
   80604:	10841404 	addi	r2,r2,4176
   80608:	10c00035 	stwio	r3,0(r2)
		printf("Moving!, current floor is %d \n",current_floor->cur_floor);
   8060c:	e0bfff17 	ldw	r2,-4(fp)
   80610:	11400117 	ldw	r5,4(r2)
   80614:	01000274 	movhi	r4,9
   80618:	2136d404 	addi	r4,r4,-9392
   8061c:	00812500 	call	81250 <printf>
   80620:	00000306 	br	80630 <handle_counter_expire_interrupts+0xa8>

	}else {
		current_floor->state = 1;
   80624:	e0ffff17 	ldw	r3,-4(fp)
   80628:	00800044 	movi	r2,1
   8062c:	18800415 	stw	r2,16(r3)
	}

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80630:	00800434 	movhi	r2,16
   80634:	10840e04 	addi	r2,r2,4152
   80638:	10000035 	stwio	zero,0(r2)
}
   8063c:	e037883a 	mov	sp,fp
   80640:	dfc00117 	ldw	ra,4(sp)
   80644:	df000017 	ldw	fp,0(sp)
   80648:	dec00204 	addi	sp,sp,8
   8064c:	f800283a 	ret

00080650 <reset_counter>:

void reset_counter() {
   80650:	deffff04 	addi	sp,sp,-4
   80654:	df000015 	stw	fp,0(sp)
   80658:	d839883a 	mov	fp,sp
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 1);
   8065c:	00c00434 	movhi	r3,16
   80660:	18c40d04 	addi	r3,r3,4148
   80664:	00800044 	movi	r2,1
   80668:	18800035 	stwio	r2,0(r3)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 0);
   8066c:	00800434 	movhi	r2,16
   80670:	10840d04 	addi	r2,r2,4148
   80674:	10000035 	stwio	zero,0(r2)

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80678:	00800434 	movhi	r2,16
   8067c:	10840e04 	addi	r2,r2,4152
   80680:	10000035 	stwio	zero,0(r2)

}
   80684:	e037883a 	mov	sp,fp
   80688:	df000017 	ldw	fp,0(sp)
   8068c:	dec00104 	addi	sp,sp,4
   80690:	f800283a 	ret

00080694 <read_counter>:

int read_counter() {
   80694:	deffff04 	addi	sp,sp,-4
   80698:	df000015 	stw	fp,0(sp)
   8069c:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 0);
   806a0:	00800434 	movhi	r2,16
   806a4:	10840c04 	addi	r2,r2,4144
   806a8:	10800037 	ldwio	r2,0(r2)
}
   806ac:	e037883a 	mov	sp,fp
   806b0:	df000017 	ldw	fp,0(sp)
   806b4:	dec00104 	addi	sp,sp,4
   806b8:	f800283a 	ret

000806bc <read_counter_interrupt>:

int read_counter_interrupt() {
   806bc:	deffff04 	addi	sp,sp,-4
   806c0:	df000015 	stw	fp,0(sp)
   806c4:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 2);
   806c8:	00800434 	movhi	r2,16
   806cc:	10840e04 	addi	r2,r2,4152
   806d0:	10800037 	ldwio	r2,0(r2)
}
   806d4:	e037883a 	mov	sp,fp
   806d8:	df000017 	ldw	fp,0(sp)
   806dc:	dec00104 	addi	sp,sp,4
   806e0:	f800283a 	ret

000806e4 <load_counter_config>:

void load_counter_config(int* config) {
   806e4:	defffd04 	addi	sp,sp,-12
   806e8:	dfc00215 	stw	ra,8(sp)
   806ec:	df000115 	stw	fp,4(sp)
   806f0:	df000104 	addi	fp,sp,4
   806f4:	e13fff15 	stw	r4,-4(fp)
	printf("Loading counter config %d\n", *config);
   806f8:	e0bfff17 	ldw	r2,-4(fp)
   806fc:	11400017 	ldw	r5,0(r2)
   80700:	01000274 	movhi	r4,9
   80704:	2136dc04 	addi	r4,r4,-9360
   80708:	00812500 	call	81250 <printf>

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 3, *config);
   8070c:	e0bfff17 	ldw	r2,-4(fp)
   80710:	10c00017 	ldw	r3,0(r2)
   80714:	00800434 	movhi	r2,16
   80718:	10840f04 	addi	r2,r2,4156
   8071c:	10c00035 	stwio	r3,0(r2)
}
   80720:	e037883a 	mov	sp,fp
   80724:	dfc00117 	ldw	ra,4(sp)
   80728:	df000017 	ldw	fp,0(sp)
   8072c:	dec00204 	addi	sp,sp,8
   80730:	f800283a 	ret

00080734 <init_counter_irq>:

// Function for initializing the ISR of the Counter
void init_counter_irq(floor_P *current_floor) {
   80734:	defffd04 	addi	sp,sp,-12
   80738:	dfc00215 	stw	ra,8(sp)
   8073c:	df000115 	stw	fp,4(sp)
   80740:	df000104 	addi	fp,sp,4
   80744:	e13fff15 	stw	r4,-4(fp)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80748:	00800434 	movhi	r2,16
   8074c:	10840e04 	addi	r2,r2,4152
   80750:	10000035 	stwio	zero,0(r2)

	alt_irq_register(CUSTOM_COUNTER_COMPONENT_0_IRQ, (void*)current_floor, (void*)handle_counter_expire_interrupts );
   80754:	01000084 	movi	r4,2
   80758:	e17fff17 	ldw	r5,-4(fp)
   8075c:	01800234 	movhi	r6,8
   80760:	31816204 	addi	r6,r6,1416
   80764:	008b2a40 	call	8b2a4 <alt_irq_register>
}
   80768:	e037883a 	mov	sp,fp
   8076c:	dfc00117 	ldw	ra,4(sp)
   80770:	df000017 	ldw	fp,0(sp)
   80774:	dec00204 	addi	sp,sp,8
   80778:	f800283a 	ret

0008077c <FindNext>:
#include "define.h"

void FindNext(int* array,floor_P *floor){
   8077c:	defffa04 	addi	sp,sp,-24
   80780:	dfc00515 	stw	ra,20(sp)
   80784:	df000415 	stw	fp,16(sp)
   80788:	df000404 	addi	fp,sp,16
   8078c:	e13ffe15 	stw	r4,-8(fp)
   80790:	e17fff15 	stw	r5,-4(fp)
	int i,j;
	if (floor->direction == 1) {
   80794:	e0bfff17 	ldw	r2,-4(fp)
   80798:	10800217 	ldw	r2,8(r2)
   8079c:	10800058 	cmpnei	r2,r2,1
   807a0:	1000941e 	bne	r2,zero,809f4 <FindNext+0x278>
		// sorting to find up
		for (i=0; i<ARRAY_SIZE_MAX-1; i++){
   807a4:	e03ffd15 	stw	zero,-12(fp)
   807a8:	00004106 	br	808b0 <FindNext+0x134>
			if ((array[i] > floor->cur_floor) && (array[i] != 13)){
   807ac:	e0bffd17 	ldw	r2,-12(fp)
   807b0:	1085883a 	add	r2,r2,r2
   807b4:	1085883a 	add	r2,r2,r2
   807b8:	1007883a 	mov	r3,r2
   807bc:	e0bffe17 	ldw	r2,-8(fp)
   807c0:	1885883a 	add	r2,r3,r2
   807c4:	10c00017 	ldw	r3,0(r2)
   807c8:	e0bfff17 	ldw	r2,-4(fp)
   807cc:	10800117 	ldw	r2,4(r2)
   807d0:	10c0320e 	bge	r2,r3,8089c <FindNext+0x120>
   807d4:	e0bffd17 	ldw	r2,-12(fp)
   807d8:	1085883a 	add	r2,r2,r2
   807dc:	1085883a 	add	r2,r2,r2
   807e0:	1007883a 	mov	r3,r2
   807e4:	e0bffe17 	ldw	r2,-8(fp)
   807e8:	1885883a 	add	r2,r3,r2
   807ec:	10800017 	ldw	r2,0(r2)
   807f0:	10800360 	cmpeqi	r2,r2,13
   807f4:	1000291e 	bne	r2,zero,8089c <FindNext+0x120>
				floor->des_floor = array[i];
   807f8:	e0bffd17 	ldw	r2,-12(fp)
   807fc:	1085883a 	add	r2,r2,r2
   80800:	1085883a 	add	r2,r2,r2
   80804:	1007883a 	mov	r3,r2
   80808:	e0bffe17 	ldw	r2,-8(fp)
   8080c:	1885883a 	add	r2,r3,r2
   80810:	10c00017 	ldw	r3,0(r2)
   80814:	e0bfff17 	ldw	r2,-4(fp)
   80818:	10c00015 	stw	r3,0(r2)

			    // Deleting element
			    for (j = i; j < ARRAY_SIZE_MAX - 1; j++) {
   8081c:	e0bffd17 	ldw	r2,-12(fp)
   80820:	e0bffc15 	stw	r2,-16(fp)
   80824:	00001606 	br	80880 <FindNext+0x104>
			    	array[j] = array[j + 1];
   80828:	e0bffc17 	ldw	r2,-16(fp)
   8082c:	1085883a 	add	r2,r2,r2
   80830:	1085883a 	add	r2,r2,r2
   80834:	1007883a 	mov	r3,r2
   80838:	e0bffe17 	ldw	r2,-8(fp)
   8083c:	1889883a 	add	r4,r3,r2
   80840:	e0bffc17 	ldw	r2,-16(fp)
   80844:	1085883a 	add	r2,r2,r2
   80848:	1085883a 	add	r2,r2,r2
   8084c:	1007883a 	mov	r3,r2
   80850:	e0bffe17 	ldw	r2,-8(fp)
   80854:	1885883a 	add	r2,r3,r2
   80858:	10800104 	addi	r2,r2,4
   8085c:	10800017 	ldw	r2,0(r2)
   80860:	20800015 	stw	r2,0(r4)
			    	array[ARRAY_SIZE_MAX-1] = 13;
   80864:	e0bffe17 	ldw	r2,-8(fp)
   80868:	10c00b04 	addi	r3,r2,44
   8086c:	00800344 	movi	r2,13
   80870:	18800015 	stw	r2,0(r3)
		for (i=0; i<ARRAY_SIZE_MAX-1; i++){
			if ((array[i] > floor->cur_floor) && (array[i] != 13)){
				floor->des_floor = array[i];

			    // Deleting element
			    for (j = i; j < ARRAY_SIZE_MAX - 1; j++) {
   80874:	e0bffc17 	ldw	r2,-16(fp)
   80878:	10800044 	addi	r2,r2,1
   8087c:	e0bffc15 	stw	r2,-16(fp)
   80880:	e0bffc17 	ldw	r2,-16(fp)
   80884:	108002d0 	cmplti	r2,r2,11
   80888:	103fe71e 	bne	r2,zero,80828 <FindNext+0xac>
			    	array[j] = array[j + 1];
			    	array[ARRAY_SIZE_MAX-1] = 13;
				}
			    floor->initial = 1;
   8088c:	e0ffff17 	ldw	r3,-4(fp)
   80890:	00800044 	movi	r2,1
   80894:	18800315 	stw	r2,12(r3)
				break;
   80898:	00000806 	br	808bc <FindNext+0x140>
			}

			floor->initial = 0;
   8089c:	e0bfff17 	ldw	r2,-4(fp)
   808a0:	10000315 	stw	zero,12(r2)

void FindNext(int* array,floor_P *floor){
	int i,j;
	if (floor->direction == 1) {
		// sorting to find up
		for (i=0; i<ARRAY_SIZE_MAX-1; i++){
   808a4:	e0bffd17 	ldw	r2,-12(fp)
   808a8:	10800044 	addi	r2,r2,1
   808ac:	e0bffd15 	stw	r2,-12(fp)
   808b0:	e0bffd17 	ldw	r2,-12(fp)
   808b4:	108002d0 	cmplti	r2,r2,11
   808b8:	103fbc1e 	bne	r2,zero,807ac <FindNext+0x30>
			}

			floor->initial = 0;
		}
		// Not coexisting situation
		if (floor->initial == 0) {
   808bc:	e0bfff17 	ldw	r2,-4(fp)
   808c0:	10800317 	ldw	r2,12(r2)
   808c4:	1004c03a 	cmpne	r2,r2,zero
   808c8:	1000de1e 	bne	r2,zero,80c44 <FindNext+0x4c8>
			floor->direction = 0;
   808cc:	e0bfff17 	ldw	r2,-4(fp)
   808d0:	10000215 	stw	zero,8(r2)
			for (i=ARRAY_SIZE_MAX-1; i>=0; i--){
   808d4:	008002c4 	movi	r2,11
   808d8:	e0bffd15 	stw	r2,-12(fp)
   808dc:	00004106 	br	809e4 <FindNext+0x268>
				if ((array[i] < floor->cur_floor) && (array[i] != 13)){
   808e0:	e0bffd17 	ldw	r2,-12(fp)
   808e4:	1085883a 	add	r2,r2,r2
   808e8:	1085883a 	add	r2,r2,r2
   808ec:	1007883a 	mov	r3,r2
   808f0:	e0bffe17 	ldw	r2,-8(fp)
   808f4:	1885883a 	add	r2,r3,r2
   808f8:	10c00017 	ldw	r3,0(r2)
   808fc:	e0bfff17 	ldw	r2,-4(fp)
   80900:	10800117 	ldw	r2,4(r2)
   80904:	1880320e 	bge	r3,r2,809d0 <FindNext+0x254>
   80908:	e0bffd17 	ldw	r2,-12(fp)
   8090c:	1085883a 	add	r2,r2,r2
   80910:	1085883a 	add	r2,r2,r2
   80914:	1007883a 	mov	r3,r2
   80918:	e0bffe17 	ldw	r2,-8(fp)
   8091c:	1885883a 	add	r2,r3,r2
   80920:	10800017 	ldw	r2,0(r2)
   80924:	10800360 	cmpeqi	r2,r2,13
   80928:	1000291e 	bne	r2,zero,809d0 <FindNext+0x254>
					floor->des_floor = array[i];
   8092c:	e0bffd17 	ldw	r2,-12(fp)
   80930:	1085883a 	add	r2,r2,r2
   80934:	1085883a 	add	r2,r2,r2
   80938:	1007883a 	mov	r3,r2
   8093c:	e0bffe17 	ldw	r2,-8(fp)
   80940:	1885883a 	add	r2,r3,r2
   80944:	10c00017 	ldw	r3,0(r2)
   80948:	e0bfff17 	ldw	r2,-4(fp)
   8094c:	10c00015 	stw	r3,0(r2)

					// Deleting element
					for (j = i; j < ARRAY_SIZE_MAX - 1; j++) {
   80950:	e0bffd17 	ldw	r2,-12(fp)
   80954:	e0bffc15 	stw	r2,-16(fp)
   80958:	00001606 	br	809b4 <FindNext+0x238>
						array[j] = array[j+1];
   8095c:	e0bffc17 	ldw	r2,-16(fp)
   80960:	1085883a 	add	r2,r2,r2
   80964:	1085883a 	add	r2,r2,r2
   80968:	1007883a 	mov	r3,r2
   8096c:	e0bffe17 	ldw	r2,-8(fp)
   80970:	1889883a 	add	r4,r3,r2
   80974:	e0bffc17 	ldw	r2,-16(fp)
   80978:	1085883a 	add	r2,r2,r2
   8097c:	1085883a 	add	r2,r2,r2
   80980:	1007883a 	mov	r3,r2
   80984:	e0bffe17 	ldw	r2,-8(fp)
   80988:	1885883a 	add	r2,r3,r2
   8098c:	10800104 	addi	r2,r2,4
   80990:	10800017 	ldw	r2,0(r2)
   80994:	20800015 	stw	r2,0(r4)
					 	 array[ARRAY_SIZE_MAX-1] = 13;
   80998:	e0bffe17 	ldw	r2,-8(fp)
   8099c:	10c00b04 	addi	r3,r2,44
   809a0:	00800344 	movi	r2,13
   809a4:	18800015 	stw	r2,0(r3)
			for (i=ARRAY_SIZE_MAX-1; i>=0; i--){
				if ((array[i] < floor->cur_floor) && (array[i] != 13)){
					floor->des_floor = array[i];

					// Deleting element
					for (j = i; j < ARRAY_SIZE_MAX - 1; j++) {
   809a8:	e0bffc17 	ldw	r2,-16(fp)
   809ac:	10800044 	addi	r2,r2,1
   809b0:	e0bffc15 	stw	r2,-16(fp)
   809b4:	e0bffc17 	ldw	r2,-16(fp)
   809b8:	108002d0 	cmplti	r2,r2,11
   809bc:	103fe71e 	bne	r2,zero,8095c <FindNext+0x1e0>
						array[j] = array[j+1];
					 	 array[ARRAY_SIZE_MAX-1] = 13;
					}
					floor->initial = 1;
   809c0:	e0ffff17 	ldw	r3,-4(fp)
   809c4:	00800044 	movi	r2,1
   809c8:	18800315 	stw	r2,12(r3)
					break;
   809cc:	00009d06 	br	80c44 <FindNext+0x4c8>
				}
				floor->initial = 0;
   809d0:	e0bfff17 	ldw	r2,-4(fp)
   809d4:	10000315 	stw	zero,12(r2)
			floor->initial = 0;
		}
		// Not coexisting situation
		if (floor->initial == 0) {
			floor->direction = 0;
			for (i=ARRAY_SIZE_MAX-1; i>=0; i--){
   809d8:	e0bffd17 	ldw	r2,-12(fp)
   809dc:	10bfffc4 	addi	r2,r2,-1
   809e0:	e0bffd15 	stw	r2,-12(fp)
   809e4:	e0bffd17 	ldw	r2,-12(fp)
   809e8:	1004403a 	cmpge	r2,r2,zero
   809ec:	103fbc1e 	bne	r2,zero,808e0 <FindNext+0x164>
   809f0:	00009406 	br	80c44 <FindNext+0x4c8>
			}
		}
	}
	else {
		// sorting to find down
		for (i=ARRAY_SIZE_MAX-1; i>=0; i--){
   809f4:	008002c4 	movi	r2,11
   809f8:	e0bffd15 	stw	r2,-12(fp)
   809fc:	00004106 	br	80b04 <FindNext+0x388>
			if ((array[i] < floor->cur_floor) && (array[i] != 13)){
   80a00:	e0bffd17 	ldw	r2,-12(fp)
   80a04:	1085883a 	add	r2,r2,r2
   80a08:	1085883a 	add	r2,r2,r2
   80a0c:	1007883a 	mov	r3,r2
   80a10:	e0bffe17 	ldw	r2,-8(fp)
   80a14:	1885883a 	add	r2,r3,r2
   80a18:	10c00017 	ldw	r3,0(r2)
   80a1c:	e0bfff17 	ldw	r2,-4(fp)
   80a20:	10800117 	ldw	r2,4(r2)
   80a24:	1880320e 	bge	r3,r2,80af0 <FindNext+0x374>
   80a28:	e0bffd17 	ldw	r2,-12(fp)
   80a2c:	1085883a 	add	r2,r2,r2
   80a30:	1085883a 	add	r2,r2,r2
   80a34:	1007883a 	mov	r3,r2
   80a38:	e0bffe17 	ldw	r2,-8(fp)
   80a3c:	1885883a 	add	r2,r3,r2
   80a40:	10800017 	ldw	r2,0(r2)
   80a44:	10800360 	cmpeqi	r2,r2,13
   80a48:	1000291e 	bne	r2,zero,80af0 <FindNext+0x374>
				floor->des_floor = array[i];
   80a4c:	e0bffd17 	ldw	r2,-12(fp)
   80a50:	1085883a 	add	r2,r2,r2
   80a54:	1085883a 	add	r2,r2,r2
   80a58:	1007883a 	mov	r3,r2
   80a5c:	e0bffe17 	ldw	r2,-8(fp)
   80a60:	1885883a 	add	r2,r3,r2
   80a64:	10c00017 	ldw	r3,0(r2)
   80a68:	e0bfff17 	ldw	r2,-4(fp)
   80a6c:	10c00015 	stw	r3,0(r2)

				// Deleting element
			    for (j = i; j < ARRAY_SIZE_MAX - 1; j++) {
   80a70:	e0bffd17 	ldw	r2,-12(fp)
   80a74:	e0bffc15 	stw	r2,-16(fp)
   80a78:	00001606 	br	80ad4 <FindNext+0x358>
			    	array[j] = array[j+1];
   80a7c:	e0bffc17 	ldw	r2,-16(fp)
   80a80:	1085883a 	add	r2,r2,r2
   80a84:	1085883a 	add	r2,r2,r2
   80a88:	1007883a 	mov	r3,r2
   80a8c:	e0bffe17 	ldw	r2,-8(fp)
   80a90:	1889883a 	add	r4,r3,r2
   80a94:	e0bffc17 	ldw	r2,-16(fp)
   80a98:	1085883a 	add	r2,r2,r2
   80a9c:	1085883a 	add	r2,r2,r2
   80aa0:	1007883a 	mov	r3,r2
   80aa4:	e0bffe17 	ldw	r2,-8(fp)
   80aa8:	1885883a 	add	r2,r3,r2
   80aac:	10800104 	addi	r2,r2,4
   80ab0:	10800017 	ldw	r2,0(r2)
   80ab4:	20800015 	stw	r2,0(r4)
			    	array[ARRAY_SIZE_MAX-1] = 13;
   80ab8:	e0bffe17 	ldw	r2,-8(fp)
   80abc:	10c00b04 	addi	r3,r2,44
   80ac0:	00800344 	movi	r2,13
   80ac4:	18800015 	stw	r2,0(r3)
		for (i=ARRAY_SIZE_MAX-1; i>=0; i--){
			if ((array[i] < floor->cur_floor) && (array[i] != 13)){
				floor->des_floor = array[i];

				// Deleting element
			    for (j = i; j < ARRAY_SIZE_MAX - 1; j++) {
   80ac8:	e0bffc17 	ldw	r2,-16(fp)
   80acc:	10800044 	addi	r2,r2,1
   80ad0:	e0bffc15 	stw	r2,-16(fp)
   80ad4:	e0bffc17 	ldw	r2,-16(fp)
   80ad8:	108002d0 	cmplti	r2,r2,11
   80adc:	103fe71e 	bne	r2,zero,80a7c <FindNext+0x300>
			    	array[j] = array[j+1];
			    	array[ARRAY_SIZE_MAX-1] = 13;
				}
			    floor->initial = 1;
   80ae0:	e0ffff17 	ldw	r3,-4(fp)
   80ae4:	00800044 	movi	r2,1
   80ae8:	18800315 	stw	r2,12(r3)
				break;
   80aec:	00000806 	br	80b10 <FindNext+0x394>
			}
			floor->initial = 0;
   80af0:	e0bfff17 	ldw	r2,-4(fp)
   80af4:	10000315 	stw	zero,12(r2)
			}
		}
	}
	else {
		// sorting to find down
		for (i=ARRAY_SIZE_MAX-1; i>=0; i--){
   80af8:	e0bffd17 	ldw	r2,-12(fp)
   80afc:	10bfffc4 	addi	r2,r2,-1
   80b00:	e0bffd15 	stw	r2,-12(fp)
   80b04:	e0bffd17 	ldw	r2,-12(fp)
   80b08:	1004403a 	cmpge	r2,r2,zero
   80b0c:	103fbc1e 	bne	r2,zero,80a00 <FindNext+0x284>
			    floor->initial = 1;
				break;
			}
			floor->initial = 0;
		}
		if(floor->initial == 0) {
   80b10:	e0bfff17 	ldw	r2,-4(fp)
   80b14:	10800317 	ldw	r2,12(r2)
   80b18:	1004c03a 	cmpne	r2,r2,zero
   80b1c:	1000491e 	bne	r2,zero,80c44 <FindNext+0x4c8>
			floor->direction = 1;
   80b20:	e0ffff17 	ldw	r3,-4(fp)
   80b24:	00800044 	movi	r2,1
   80b28:	18800215 	stw	r2,8(r3)

			for (i=0; i<ARRAY_SIZE_MAX-1; i++){
   80b2c:	e03ffd15 	stw	zero,-12(fp)
   80b30:	00004106 	br	80c38 <FindNext+0x4bc>
				if ((array[i] > floor->cur_floor) && (array[i] != 13)){
   80b34:	e0bffd17 	ldw	r2,-12(fp)
   80b38:	1085883a 	add	r2,r2,r2
   80b3c:	1085883a 	add	r2,r2,r2
   80b40:	1007883a 	mov	r3,r2
   80b44:	e0bffe17 	ldw	r2,-8(fp)
   80b48:	1885883a 	add	r2,r3,r2
   80b4c:	10c00017 	ldw	r3,0(r2)
   80b50:	e0bfff17 	ldw	r2,-4(fp)
   80b54:	10800117 	ldw	r2,4(r2)
   80b58:	10c0320e 	bge	r2,r3,80c24 <FindNext+0x4a8>
   80b5c:	e0bffd17 	ldw	r2,-12(fp)
   80b60:	1085883a 	add	r2,r2,r2
   80b64:	1085883a 	add	r2,r2,r2
   80b68:	1007883a 	mov	r3,r2
   80b6c:	e0bffe17 	ldw	r2,-8(fp)
   80b70:	1885883a 	add	r2,r3,r2
   80b74:	10800017 	ldw	r2,0(r2)
   80b78:	10800360 	cmpeqi	r2,r2,13
   80b7c:	1000291e 	bne	r2,zero,80c24 <FindNext+0x4a8>
					floor->des_floor = array[i];
   80b80:	e0bffd17 	ldw	r2,-12(fp)
   80b84:	1085883a 	add	r2,r2,r2
   80b88:	1085883a 	add	r2,r2,r2
   80b8c:	1007883a 	mov	r3,r2
   80b90:	e0bffe17 	ldw	r2,-8(fp)
   80b94:	1885883a 	add	r2,r3,r2
   80b98:	10c00017 	ldw	r3,0(r2)
   80b9c:	e0bfff17 	ldw	r2,-4(fp)
   80ba0:	10c00015 	stw	r3,0(r2)

					// Deleting element
					for (j = i; j < ARRAY_SIZE_MAX - 1; j++) {
   80ba4:	e0bffd17 	ldw	r2,-12(fp)
   80ba8:	e0bffc15 	stw	r2,-16(fp)
   80bac:	00001606 	br	80c08 <FindNext+0x48c>
						array[j] = array[j + 1];
   80bb0:	e0bffc17 	ldw	r2,-16(fp)
   80bb4:	1085883a 	add	r2,r2,r2
   80bb8:	1085883a 	add	r2,r2,r2
   80bbc:	1007883a 	mov	r3,r2
   80bc0:	e0bffe17 	ldw	r2,-8(fp)
   80bc4:	1889883a 	add	r4,r3,r2
   80bc8:	e0bffc17 	ldw	r2,-16(fp)
   80bcc:	1085883a 	add	r2,r2,r2
   80bd0:	1085883a 	add	r2,r2,r2
   80bd4:	1007883a 	mov	r3,r2
   80bd8:	e0bffe17 	ldw	r2,-8(fp)
   80bdc:	1885883a 	add	r2,r3,r2
   80be0:	10800104 	addi	r2,r2,4
   80be4:	10800017 	ldw	r2,0(r2)
   80be8:	20800015 	stw	r2,0(r4)
						array[ARRAY_SIZE_MAX-1] = 13;
   80bec:	e0bffe17 	ldw	r2,-8(fp)
   80bf0:	10c00b04 	addi	r3,r2,44
   80bf4:	00800344 	movi	r2,13
   80bf8:	18800015 	stw	r2,0(r3)
			for (i=0; i<ARRAY_SIZE_MAX-1; i++){
				if ((array[i] > floor->cur_floor) && (array[i] != 13)){
					floor->des_floor = array[i];

					// Deleting element
					for (j = i; j < ARRAY_SIZE_MAX - 1; j++) {
   80bfc:	e0bffc17 	ldw	r2,-16(fp)
   80c00:	10800044 	addi	r2,r2,1
   80c04:	e0bffc15 	stw	r2,-16(fp)
   80c08:	e0bffc17 	ldw	r2,-16(fp)
   80c0c:	108002d0 	cmplti	r2,r2,11
   80c10:	103fe71e 	bne	r2,zero,80bb0 <FindNext+0x434>
						array[j] = array[j + 1];
						array[ARRAY_SIZE_MAX-1] = 13;
					}
					floor->initial = 1;
   80c14:	e0ffff17 	ldw	r3,-4(fp)
   80c18:	00800044 	movi	r2,1
   80c1c:	18800315 	stw	r2,12(r3)
					break;
   80c20:	00000806 	br	80c44 <FindNext+0x4c8>
				}
				floor->initial = 0;
   80c24:	e0bfff17 	ldw	r2,-4(fp)
   80c28:	10000315 	stw	zero,12(r2)
			floor->initial = 0;
		}
		if(floor->initial == 0) {
			floor->direction = 1;

			for (i=0; i<ARRAY_SIZE_MAX-1; i++){
   80c2c:	e0bffd17 	ldw	r2,-12(fp)
   80c30:	10800044 	addi	r2,r2,1
   80c34:	e0bffd15 	stw	r2,-12(fp)
   80c38:	e0bffd17 	ldw	r2,-12(fp)
   80c3c:	108002d0 	cmplti	r2,r2,11
   80c40:	103fbc1e 	bne	r2,zero,80b34 <FindNext+0x3b8>
				}
				floor->initial = 0;
			}
		}
	}
	printf("initial: %d, des_floor: %d \n", floor->initial, floor->des_floor);
   80c44:	e0bfff17 	ldw	r2,-4(fp)
   80c48:	11400317 	ldw	r5,12(r2)
   80c4c:	e0bfff17 	ldw	r2,-4(fp)
   80c50:	11800017 	ldw	r6,0(r2)
   80c54:	01000274 	movhi	r4,9
   80c58:	2136e304 	addi	r4,r4,-9332
   80c5c:	00812500 	call	81250 <printf>
}
   80c60:	e037883a 	mov	sp,fp
   80c64:	dfc00117 	ldw	ra,4(sp)
   80c68:	df000017 	ldw	fp,0(sp)
   80c6c:	dec00204 	addi	sp,sp,8
   80c70:	f800283a 	ret

00080c74 <elevator>:

void elevator(floor_P * floor){
   80c74:	defffd04 	addi	sp,sp,-12
   80c78:	dfc00215 	stw	ra,8(sp)
   80c7c:	df000115 	stw	fp,4(sp)
   80c80:	df000104 	addi	fp,sp,4
   80c84:	e13fff15 	stw	r4,-4(fp)

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80c88:	00800434 	movhi	r2,16
   80c8c:	10840e04 	addi	r2,r2,4152
   80c90:	10000035 	stwio	zero,0(r2)
	alt_irq_register(CUSTOM_COUNTER_COMPONENT_0_IRQ, (void*)floor, (void*)handle_counter_expire_interrupts);
   80c94:	01000084 	movi	r4,2
   80c98:	e17fff17 	ldw	r5,-4(fp)
   80c9c:	01800234 	movhi	r6,8
   80ca0:	31816204 	addi	r6,r6,1416
   80ca4:	008b2a40 	call	8b2a4 <alt_irq_register>
	floor->state = 1;
   80ca8:	e0ffff17 	ldw	r3,-4(fp)
   80cac:	00800044 	movi	r2,1
   80cb0:	18800415 	stw	r2,16(r3)
}
   80cb4:	e037883a 	mov	sp,fp
   80cb8:	dfc00117 	ldw	ra,4(sp)
   80cbc:	df000017 	ldw	fp,0(sp)
   80cc0:	dec00204 	addi	sp,sp,8
   80cc4:	f800283a 	ret

00080cc8 <opendoor>:

void opendoor(floor_P* floor, counter *PB_timer){
   80cc8:	defffc04 	addi	sp,sp,-16
   80ccc:	dfc00315 	stw	ra,12(sp)
   80cd0:	df000215 	stw	fp,8(sp)
   80cd4:	df000204 	addi	fp,sp,8
   80cd8:	e13ffe15 	stw	r4,-8(fp)
   80cdc:	e17fff15 	stw	r5,-4(fp)

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80ce0:	00800434 	movhi	r2,16
   80ce4:	10840e04 	addi	r2,r2,4152
   80ce8:	10000035 	stwio	zero,0(r2)
	alt_irq_register(CUSTOM_COUNTER_COMPONENT_0_IRQ, (void*)floor, (void*)handle_counter_expire_interrupts );
   80cec:	01000084 	movi	r4,2
   80cf0:	e17ffe17 	ldw	r5,-8(fp)
   80cf4:	01800234 	movhi	r6,8
   80cf8:	31816204 	addi	r6,r6,1416
   80cfc:	008b2a40 	call	8b2a4 <alt_irq_register>
	floor->state = 0;
   80d00:	e0bffe17 	ldw	r2,-8(fp)
   80d04:	10000415 	stw	zero,16(r2)
	printf("OPEN DOOR \n");
   80d08:	01000274 	movhi	r4,9
   80d0c:	2136eb04 	addi	r4,r4,-9300
   80d10:	008138c0 	call	8138c <puts>

}
   80d14:	e037883a 	mov	sp,fp
   80d18:	dfc00117 	ldw	ra,4(sp)
   80d1c:	df000017 	ldw	fp,0(sp)
   80d20:	dec00204 	addi	sp,sp,8
   80d24:	f800283a 	ret

00080d28 <main>:

#include "define.h"


int main()
{	
   80d28:	deffe404 	addi	sp,sp,-112
   80d2c:	dfc01b15 	stw	ra,108(sp)
   80d30:	df001a15 	stw	fp,104(sp)
   80d34:	df001a04 	addi	fp,sp,104
	volatile counter PB_timer;
	volatile floor_P plan;
	int floor_list[ARRAY_SIZE_MAX] = {13,13,13,13,13,13,13,13,13,13,13,13};
   80d38:	00800344 	movi	r2,13
   80d3c:	e0bff415 	stw	r2,-48(fp)
   80d40:	00800344 	movi	r2,13
   80d44:	e0bff515 	stw	r2,-44(fp)
   80d48:	00800344 	movi	r2,13
   80d4c:	e0bff615 	stw	r2,-40(fp)
   80d50:	00800344 	movi	r2,13
   80d54:	e0bff715 	stw	r2,-36(fp)
   80d58:	00800344 	movi	r2,13
   80d5c:	e0bff815 	stw	r2,-32(fp)
   80d60:	00800344 	movi	r2,13
   80d64:	e0bff915 	stw	r2,-28(fp)
   80d68:	00800344 	movi	r2,13
   80d6c:	e0bffa15 	stw	r2,-24(fp)
   80d70:	00800344 	movi	r2,13
   80d74:	e0bffb15 	stw	r2,-20(fp)
   80d78:	00800344 	movi	r2,13
   80d7c:	e0bffc15 	stw	r2,-16(fp)
   80d80:	00800344 	movi	r2,13
   80d84:	e0bffd15 	stw	r2,-12(fp)
   80d88:	00800344 	movi	r2,13
   80d8c:	e0bffe15 	stw	r2,-8(fp)
   80d90:	00800344 	movi	r2,13
   80d94:	e0bfff15 	stw	r2,-4(fp)

	plan.cur_floor = 0;
   80d98:	e03fef15 	stw	zero,-68(fp)
	plan.des_floor = 0; // Initially at lobby
   80d9c:	e03fee15 	stw	zero,-72(fp)
	plan.direction = 1; // Initially going up
   80da0:	00800044 	movi	r2,1
   80da4:	e0bff015 	stw	r2,-64(fp)
	plan.initial = 0;
   80da8:	e03ff115 	stw	zero,-60(fp)
	plan.hold_1 = 0;
   80dac:	e03ff315 	stw	zero,-52(fp)
	plan.state = 1;
   80db0:	00800044 	movi	r2,1
   80db4:	e0bff215 	stw	r2,-56(fp)

	PB_timer.door_open = 0;
   80db8:	e03fea15 	stw	zero,-88(fp)
	PB_timer.elevator_move = 0;
   80dbc:	e03feb15 	stw	zero,-84(fp)
	PB_timer.hold = 0;
   80dc0:	e03fec15 	stw	zero,-80(fp)
	int load = 1;
   80dc4:	00800044 	movi	r2,1
   80dc8:	e0bfe915 	stw	r2,-92(fp)
	int i;
	int one = 1;
   80dcc:	00800044 	movi	r2,1
   80dd0:	e0bfe715 	stw	r2,-100(fp)
	int led = 0;
   80dd4:	e03fe615 	stw	zero,-104(fp)
	printf("Start main...\n");
   80dd8:	01000274 	movhi	r4,9
   80ddc:	2136ee04 	addi	r4,r4,-9288
   80de0:	008138c0 	call	8138c <puts>


	init_button_irq(&PB_timer);
   80de4:	e13fea04 	addi	r4,fp,-88
   80de8:	00803d00 	call	803d0 <init_button_irq>
	printf("PB initialized...\n");
   80dec:	01000274 	movhi	r4,9
   80df0:	2136f204 	addi	r4,r4,-9272
   80df4:	008138c0 	call	8138c <puts>
	


	//initial switch interrupt
	init_switch_irq(&floor_list);
   80df8:	e13ff404 	addi	r4,fp,-48
   80dfc:	00811c00 	call	811c0 <init_switch_irq>
	printf("Switch IRQ initialized...\n");
   80e00:	01000274 	movhi	r4,9
   80e04:	2136f704 	addi	r4,r4,-9252
   80e08:	008138c0 	call	8138c <puts>

	IOWR(LED_GREEN_O_BASE, 0, 0x0);
   80e0c:	00800434 	movhi	r2,16
   80e10:	10840804 	addi	r2,r2,4128
   80e14:	10000035 	stwio	zero,0(r2)
	IOWR(LED_RED_O_BASE, 0, 0x0);
   80e18:	00800434 	movhi	r2,16
   80e1c:	10840404 	addi	r2,r2,4112
   80e20:	10000035 	stwio	zero,0(r2)
	
	printf("Switch value: %X\n", IORD(SWITCH_I_BASE, 0));
   80e24:	00800434 	movhi	r2,16
   80e28:	10841004 	addi	r2,r2,4160
   80e2c:	11400037 	ldwio	r5,0(r2)
   80e30:	01000274 	movhi	r4,9
   80e34:	2136fe04 	addi	r4,r4,-9224
   80e38:	00812500 	call	81250 <printf>
	IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, 0x40);
   80e3c:	00c00434 	movhi	r3,16
   80e40:	18c41404 	addi	r3,r3,4176
   80e44:	00801004 	movi	r2,64
   80e48:	18800035 	stwio	r2,0(r3)
   80e4c:	00000006 	br	80e50 <main+0x128>
		
	while (1){

		if((plan.initial == 0) && (((floor_list[0] != 13)) ||((floor_list[0] == 13) && (load == 0)))) {
   80e50:	e0bff117 	ldw	r2,-60(fp)
   80e54:	1004c03a 	cmpne	r2,r2,zero
   80e58:	10003c1e 	bne	r2,zero,80f4c <main+0x224>
   80e5c:	e0bff417 	ldw	r2,-48(fp)
   80e60:	10800358 	cmpnei	r2,r2,13
   80e64:	1000061e 	bne	r2,zero,80e80 <main+0x158>
   80e68:	e0bff417 	ldw	r2,-48(fp)
   80e6c:	10800358 	cmpnei	r2,r2,13
   80e70:	1000361e 	bne	r2,zero,80f4c <main+0x224>
   80e74:	e0bfe917 	ldw	r2,-92(fp)
   80e78:	1004c03a 	cmpne	r2,r2,zero
   80e7c:	1000331e 	bne	r2,zero,80f4c <main+0x224>
			if(load == 1) {
   80e80:	e0bfe917 	ldw	r2,-92(fp)
   80e84:	10800058 	cmpnei	r2,r2,1
   80e88:	1000081e 	bne	r2,zero,80eac <main+0x184>
				load_counter_config(&PB_timer.elevator_move);
   80e8c:	e0bfea04 	addi	r2,fp,-88
   80e90:	11000104 	addi	r4,r2,4
   80e94:	00806e40 	call	806e4 <load_counter_config>
				load = 0;
   80e98:	e03fe915 	stw	zero,-92(fp)
				plan.des_floor = floor_list[0];
   80e9c:	e0bff417 	ldw	r2,-48(fp)
   80ea0:	e0bfee15 	stw	r2,-72(fp)
				floor_list[0] = 13;
   80ea4:	00800344 	movi	r2,13
   80ea8:	e0bff415 	stw	r2,-48(fp)
			}

			if ((plan.state == 1) && (read_counter_interrupt() == 1) && (PB_timer.hold == 0)){
   80eac:	e0bff217 	ldw	r2,-56(fp)
   80eb0:	10800058 	cmpnei	r2,r2,1
   80eb4:	10000a1e 	bne	r2,zero,80ee0 <main+0x1b8>
   80eb8:	00806bc0 	call	806bc <read_counter_interrupt>
   80ebc:	10800058 	cmpnei	r2,r2,1
   80ec0:	1000071e 	bne	r2,zero,80ee0 <main+0x1b8>
   80ec4:	e0bfec17 	ldw	r2,-80(fp)
   80ec8:	1004c03a 	cmpne	r2,r2,zero
   80ecc:	1000041e 	bne	r2,zero,80ee0 <main+0x1b8>
					reset_counter();
   80ed0:	00806500 	call	80650 <reset_counter>
					elevator(&plan);
   80ed4:	e13fee04 	addi	r4,fp,-72
   80ed8:	0080c740 	call	80c74 <elevator>
				load = 0;
				plan.des_floor = floor_list[0];
				floor_list[0] = 13;
			}

			if ((plan.state == 1) && (read_counter_interrupt() == 1) && (PB_timer.hold == 0)){
   80edc:	003fdc06 	br	80e50 <main+0x128>
					reset_counter();
					elevator(&plan);

			}
			else if (plan.cur_floor == plan.des_floor){
   80ee0:	e0ffef17 	ldw	r3,-68(fp)
   80ee4:	e0bfee17 	ldw	r2,-72(fp)
   80ee8:	18bfd91e 	bne	r3,r2,80e50 <main+0x128>
				if (load == 0){
   80eec:	e0bfe917 	ldw	r2,-92(fp)
   80ef0:	1004c03a 	cmpne	r2,r2,zero
   80ef4:	1000041e 	bne	r2,zero,80f08 <main+0x1e0>
					load = 1;
   80ef8:	00800044 	movi	r2,1
   80efc:	e0bfe915 	stw	r2,-92(fp)
					load_counter_config(&PB_timer.door_open);
   80f00:	e13fea04 	addi	r4,fp,-88
   80f04:	00806e40 	call	806e4 <load_counter_config>
				}
				reset_counter();
   80f08:	00806500 	call	80650 <reset_counter>
				opendoor(&plan, &PB_timer);
   80f0c:	e13fee04 	addi	r4,fp,-72
   80f10:	e17fea04 	addi	r5,fp,-88
   80f14:	0080cc80 	call	80cc8 <opendoor>
				printf("current floor = %d, destination floor= %d, direction = %d \n", plan.des_floor, plan.cur_floor, plan.direction);
   80f18:	e17fee17 	ldw	r5,-72(fp)
   80f1c:	e1bfef17 	ldw	r6,-68(fp)
   80f20:	e1fff017 	ldw	r7,-64(fp)
   80f24:	01000274 	movhi	r4,9
   80f28:	21370304 	addi	r4,r4,-9204
   80f2c:	00812500 	call	81250 <printf>
				IOWR(LED_RED_O_BASE, 0, 0x0);
   80f30:	00800434 	movhi	r2,16
   80f34:	10840404 	addi	r2,r2,4112
   80f38:	10000035 	stwio	zero,0(r2)
				FindNext(&floor_list, &plan);
   80f3c:	e13ff404 	addi	r4,fp,-48
   80f40:	e17fee04 	addi	r5,fp,-72
   80f44:	008077c0 	call	8077c <FindNext>
	printf("Switch value: %X\n", IORD(SWITCH_I_BASE, 0));
	IOWR(SEVEN_SEGMENT_N_O_0_BASE, 0, 0x40);
		
	while (1){

		if((plan.initial == 0) && (((floor_list[0] != 13)) ||((floor_list[0] == 13) && (load == 0)))) {
   80f48:	003fc106 	br	80e50 <main+0x128>
				printf("current floor = %d, destination floor= %d, direction = %d \n", plan.des_floor, plan.cur_floor, plan.direction);
				IOWR(LED_RED_O_BASE, 0, 0x0);
				FindNext(&floor_list, &plan);
			}
		}
		else if (plan.initial == 1) {
   80f4c:	e0bff117 	ldw	r2,-60(fp)
   80f50:	10800058 	cmpnei	r2,r2,1
   80f54:	103fbe1e 	bne	r2,zero,80e50 <main+0x128>
			if(load == 1) {
   80f58:	e0bfe917 	ldw	r2,-92(fp)
   80f5c:	10800058 	cmpnei	r2,r2,1
   80f60:	1000011e 	bne	r2,zero,80f68 <main+0x240>
				load = 0;
   80f64:	e03fe915 	stw	zero,-92(fp)
			}
			if ((plan.state == 1) && (read_counter_interrupt() == 1) && (PB_timer.hold == 0)){
   80f68:	e0bff217 	ldw	r2,-56(fp)
   80f6c:	10800058 	cmpnei	r2,r2,1
   80f70:	10000a1e 	bne	r2,zero,80f9c <main+0x274>
   80f74:	00806bc0 	call	806bc <read_counter_interrupt>
   80f78:	10800058 	cmpnei	r2,r2,1
   80f7c:	1000071e 	bne	r2,zero,80f9c <main+0x274>
   80f80:	e0bfec17 	ldw	r2,-80(fp)
   80f84:	1004c03a 	cmpne	r2,r2,zero
   80f88:	1000041e 	bne	r2,zero,80f9c <main+0x274>
					reset_counter();
   80f8c:	00806500 	call	80650 <reset_counter>
					elevator(&plan);
   80f90:	e13fee04 	addi	r4,fp,-72
   80f94:	0080c740 	call	80c74 <elevator>
		}
		else if (plan.initial == 1) {
			if(load == 1) {
				load = 0;
			}
			if ((plan.state == 1) && (read_counter_interrupt() == 1) && (PB_timer.hold == 0)){
   80f98:	003fad06 	br	80e50 <main+0x128>
					reset_counter();
					elevator(&plan);
			}
			else if (plan.cur_floor == plan.des_floor){
   80f9c:	e0ffef17 	ldw	r3,-68(fp)
   80fa0:	e0bfee17 	ldw	r2,-72(fp)
   80fa4:	18bfaa1e 	bne	r3,r2,80e50 <main+0x128>
				if (load == 0){
   80fa8:	e0bfe917 	ldw	r2,-92(fp)
   80fac:	1004c03a 	cmpne	r2,r2,zero
   80fb0:	1000041e 	bne	r2,zero,80fc4 <main+0x29c>
					load = 1;
   80fb4:	00800044 	movi	r2,1
   80fb8:	e0bfe915 	stw	r2,-92(fp)
					load_counter_config(&PB_timer.door_open);
   80fbc:	e13fea04 	addi	r4,fp,-88
   80fc0:	00806e40 	call	806e4 <load_counter_config>
				}
				reset_counter();
   80fc4:	00806500 	call	80650 <reset_counter>
				opendoor(&plan, &PB_timer);
   80fc8:	e13fee04 	addi	r4,fp,-72
   80fcc:	e17fea04 	addi	r5,fp,-88
   80fd0:	0080cc80 	call	80cc8 <opendoor>
				printf("current floor = %d, destination floor = %d, direction = %d \n", plan.des_floor, plan.cur_floor, plan.direction);
   80fd4:	e17fee17 	ldw	r5,-72(fp)
   80fd8:	e1bfef17 	ldw	r6,-68(fp)
   80fdc:	e1fff017 	ldw	r7,-64(fp)
   80fe0:	01000274 	movhi	r4,9
   80fe4:	21371204 	addi	r4,r4,-9144
   80fe8:	00812500 	call	81250 <printf>
				IOWR(LED_RED_O_BASE, 0, 0x0);
   80fec:	00800434 	movhi	r2,16
   80ff0:	10840404 	addi	r2,r2,4112
   80ff4:	10000035 	stwio	zero,0(r2)
				FindNext(&floor_list, &plan);
   80ff8:	e13ff404 	addi	r4,fp,-48
   80ffc:	e17fee04 	addi	r5,fp,-72
   81000:	008077c0 	call	8077c <FindNext>
			}
		}
	}
   81004:	003f9206 	br	80e50 <main+0x128>

00081008 <insertSort>:

#include "define.h"

void insertSort(int *floor_buf, int key){
   81008:	defffc04 	addi	sp,sp,-16
   8100c:	df000315 	stw	fp,12(sp)
   81010:	df000304 	addi	fp,sp,12
   81014:	e13ffe15 	stw	r4,-8(fp)
   81018:	e17fff15 	stw	r5,-4(fp)
		int i;
	    for (i = ARRAY_SIZE_MAX - 1; (i >= 0 && floor_buf[i] > key); i--){
   8101c:	008002c4 	movi	r2,11
   81020:	e0bffd15 	stw	r2,-12(fp)
   81024:	00001206 	br	81070 <insertSort+0x68>
	    	floor_buf[i+1] = floor_buf[i];
   81028:	e0bffd17 	ldw	r2,-12(fp)
   8102c:	1085883a 	add	r2,r2,r2
   81030:	1085883a 	add	r2,r2,r2
   81034:	1007883a 	mov	r3,r2
   81038:	e0bffe17 	ldw	r2,-8(fp)
   8103c:	1885883a 	add	r2,r3,r2
   81040:	11000104 	addi	r4,r2,4
   81044:	e0bffd17 	ldw	r2,-12(fp)
   81048:	1085883a 	add	r2,r2,r2
   8104c:	1085883a 	add	r2,r2,r2
   81050:	1007883a 	mov	r3,r2
   81054:	e0bffe17 	ldw	r2,-8(fp)
   81058:	1885883a 	add	r2,r3,r2
   8105c:	10800017 	ldw	r2,0(r2)
   81060:	20800015 	stw	r2,0(r4)

#include "define.h"

void insertSort(int *floor_buf, int key){
		int i;
	    for (i = ARRAY_SIZE_MAX - 1; (i >= 0 && floor_buf[i] > key); i--){
   81064:	e0bffd17 	ldw	r2,-12(fp)
   81068:	10bfffc4 	addi	r2,r2,-1
   8106c:	e0bffd15 	stw	r2,-12(fp)
   81070:	e0bffd17 	ldw	r2,-12(fp)
   81074:	1004803a 	cmplt	r2,r2,zero
   81078:	1000091e 	bne	r2,zero,810a0 <insertSort+0x98>
   8107c:	e0bffd17 	ldw	r2,-12(fp)
   81080:	1085883a 	add	r2,r2,r2
   81084:	1085883a 	add	r2,r2,r2
   81088:	1007883a 	mov	r3,r2
   8108c:	e0bffe17 	ldw	r2,-8(fp)
   81090:	1885883a 	add	r2,r3,r2
   81094:	10c00017 	ldw	r3,0(r2)
   81098:	e0bfff17 	ldw	r2,-4(fp)
   8109c:	10ffe216 	blt	r2,r3,81028 <insertSort+0x20>
	    	floor_buf[i+1] = floor_buf[i];
	    }
	    floor_buf[i + 1] = key;
   810a0:	e0bffd17 	ldw	r2,-12(fp)
   810a4:	1085883a 	add	r2,r2,r2
   810a8:	1085883a 	add	r2,r2,r2
   810ac:	1007883a 	mov	r3,r2
   810b0:	e0bffe17 	ldw	r2,-8(fp)
   810b4:	1885883a 	add	r2,r3,r2
   810b8:	10c00104 	addi	r3,r2,4
   810bc:	e0bfff17 	ldw	r2,-4(fp)
   810c0:	18800015 	stw	r2,0(r3)
}
   810c4:	e037883a 	mov	sp,fp
   810c8:	df000017 	ldw	fp,0(sp)
   810cc:	dec00104 	addi	sp,sp,4
   810d0:	f800283a 	ret

000810d4 <handle_switch_interrupt>:

void handle_switch_interrupt(int *floor_buf){
   810d4:	defffb04 	addi	sp,sp,-20
   810d8:	dfc00415 	stw	ra,16(sp)
   810dc:	df000315 	stw	fp,12(sp)
   810e0:	df000304 	addi	fp,sp,12
   810e4:	e13fff15 	stw	r4,-4(fp)
	int sw_grp;
	sw_grp = IORD(SWITCH_I_BASE, 3);
   810e8:	00800434 	movhi	r2,16
   810ec:	10841304 	addi	r2,r2,4172
   810f0:	10800037 	ldwio	r2,0(r2)
   810f4:	e0bffe15 	stw	r2,-8(fp)
	int i;
	for (i=0; i<12; i++){
   810f8:	e03ffd15 	stw	zero,-12(fp)
   810fc:	00000e06 	br	81138 <handle_switch_interrupt+0x64>
		if (((sw_grp >> i) & 0x1) == 1){
   81100:	e0fffe17 	ldw	r3,-8(fp)
   81104:	e0bffd17 	ldw	r2,-12(fp)
   81108:	1885d83a 	sra	r2,r3,r2
   8110c:	1080004c 	andi	r2,r2,1
   81110:	10803fcc 	andi	r2,r2,255
   81114:	1005003a 	cmpeq	r2,r2,zero
   81118:	1000041e 	bne	r2,zero,8112c <handle_switch_interrupt+0x58>
			insertSort(floor_buf,i);
   8111c:	e13fff17 	ldw	r4,-4(fp)
   81120:	e17ffd17 	ldw	r5,-12(fp)
   81124:	00810080 	call	81008 <insertSort>
			break;
   81128:	00000606 	br	81144 <handle_switch_interrupt+0x70>

void handle_switch_interrupt(int *floor_buf){
	int sw_grp;
	sw_grp = IORD(SWITCH_I_BASE, 3);
	int i;
	for (i=0; i<12; i++){
   8112c:	e0bffd17 	ldw	r2,-12(fp)
   81130:	10800044 	addi	r2,r2,1
   81134:	e0bffd15 	stw	r2,-12(fp)
   81138:	e0bffd17 	ldw	r2,-12(fp)
   8113c:	10800310 	cmplti	r2,r2,12
   81140:	103fef1e 	bne	r2,zero,81100 <handle_switch_interrupt+0x2c>
		if (((sw_grp >> i) & 0x1) == 1){
			insertSort(floor_buf,i);
			break;
		}
	}
	printf("ARRAY is: \n");
   81144:	01000274 	movhi	r4,9
   81148:	21372204 	addi	r4,r4,-9080
   8114c:	008138c0 	call	8138c <puts>
	for(i = 0; i < 12; i++){
   81150:	e03ffd15 	stw	zero,-12(fp)
   81154:	00000d06 	br	8118c <handle_switch_interrupt+0xb8>
		printf("%d, ", floor_buf[i]);
   81158:	e0bffd17 	ldw	r2,-12(fp)
   8115c:	1085883a 	add	r2,r2,r2
   81160:	1085883a 	add	r2,r2,r2
   81164:	1007883a 	mov	r3,r2
   81168:	e0bfff17 	ldw	r2,-4(fp)
   8116c:	1885883a 	add	r2,r3,r2
   81170:	11400017 	ldw	r5,0(r2)
   81174:	01000274 	movhi	r4,9
   81178:	21372504 	addi	r4,r4,-9068
   8117c:	00812500 	call	81250 <printf>
			insertSort(floor_buf,i);
			break;
		}
	}
	printf("ARRAY is: \n");
	for(i = 0; i < 12; i++){
   81180:	e0bffd17 	ldw	r2,-12(fp)
   81184:	10800044 	addi	r2,r2,1
   81188:	e0bffd15 	stw	r2,-12(fp)
   8118c:	e0bffd17 	ldw	r2,-12(fp)
   81190:	10800310 	cmplti	r2,r2,12
   81194:	103ff01e 	bne	r2,zero,81158 <handle_switch_interrupt+0x84>
		printf("%d, ", floor_buf[i]);
	}
	printf("\n");
   81198:	01000284 	movi	r4,10
   8119c:	00812c80 	call	812c8 <putchar>

	IOWR(SWITCH_I_BASE, 3, 0x0);
   811a0:	00800434 	movhi	r2,16
   811a4:	10841304 	addi	r2,r2,4172
   811a8:	10000035 	stwio	zero,0(r2)
	//printf("Switch %d is triggered :) \n", i);

	}
   811ac:	e037883a 	mov	sp,fp
   811b0:	dfc00117 	ldw	ra,4(sp)
   811b4:	df000017 	ldw	fp,0(sp)
   811b8:	dec00204 	addi	sp,sp,8
   811bc:	f800283a 	ret

000811c0 <init_switch_irq>:


void init_switch_irq(int *floor_buf) {
   811c0:	defffd04 	addi	sp,sp,-12
   811c4:	dfc00215 	stw	ra,8(sp)
   811c8:	df000115 	stw	fp,4(sp)
   811cc:	df000104 	addi	fp,sp,4
   811d0:	e13fff15 	stw	r4,-4(fp)
	IOWR(SWITCH_I_BASE, 3, 0x0); // edge capture register
   811d4:	00800434 	movhi	r2,16
   811d8:	10841304 	addi	r2,r2,4172
   811dc:	10000035 	stwio	zero,0(r2)
	IOWR(SWITCH_I_BASE, 2, 0xFFF); // IRQ mask
   811e0:	00c00434 	movhi	r3,16
   811e4:	18c41204 	addi	r3,r3,4168
   811e8:	0083ffc4 	movi	r2,4095
   811ec:	18800035 	stwio	r2,0(r3)
	alt_irq_register(SWITCH_I_IRQ, (void*)floor_buf, (void*)handle_switch_interrupt);
   811f0:	010000c4 	movi	r4,3
   811f4:	e17fff17 	ldw	r5,-4(fp)
   811f8:	01800234 	movhi	r6,8
   811fc:	31843504 	addi	r6,r6,4308
   81200:	008b2a40 	call	8b2a4 <alt_irq_register>
}
   81204:	e037883a 	mov	sp,fp
   81208:	dfc00117 	ldw	ra,4(sp)
   8120c:	df000017 	ldw	fp,0(sp)
   81210:	dec00204 	addi	sp,sp,8
   81214:	f800283a 	ret

00081218 <__mulsi3>:
   81218:	20000a26 	beq	r4,zero,81244 <__mulsi3+0x2c>
   8121c:	0007883a 	mov	r3,zero
   81220:	2080004c 	andi	r2,r4,1
   81224:	1005003a 	cmpeq	r2,r2,zero
   81228:	2008d07a 	srli	r4,r4,1
   8122c:	1000011e 	bne	r2,zero,81234 <__mulsi3+0x1c>
   81230:	1947883a 	add	r3,r3,r5
   81234:	294b883a 	add	r5,r5,r5
   81238:	203ff91e 	bne	r4,zero,81220 <__mulsi3+0x8>
   8123c:	1805883a 	mov	r2,r3
   81240:	f800283a 	ret
   81244:	0007883a 	mov	r3,zero
   81248:	1805883a 	mov	r2,r3
   8124c:	f800283a 	ret

00081250 <printf>:
   81250:	defffb04 	addi	sp,sp,-20
   81254:	dfc00115 	stw	ra,4(sp)
   81258:	d9400215 	stw	r5,8(sp)
   8125c:	d9800315 	stw	r6,12(sp)
   81260:	d9c00415 	stw	r7,16(sp)
   81264:	00800274 	movhi	r2,9
   81268:	10be7f04 	addi	r2,r2,-1540
   8126c:	10c00017 	ldw	r3,0(r2)
   81270:	200b883a 	mov	r5,r4
   81274:	d8800204 	addi	r2,sp,8
   81278:	19000217 	ldw	r4,8(r3)
   8127c:	100d883a 	mov	r6,r2
   81280:	d8800015 	stw	r2,0(sp)
   81284:	00833300 	call	83330 <__vfprintf_internal>
   81288:	dfc00117 	ldw	ra,4(sp)
   8128c:	dec00504 	addi	sp,sp,20
   81290:	f800283a 	ret

00081294 <_printf_r>:
   81294:	defffc04 	addi	sp,sp,-16
   81298:	dfc00115 	stw	ra,4(sp)
   8129c:	d9800215 	stw	r6,8(sp)
   812a0:	d9c00315 	stw	r7,12(sp)
   812a4:	280d883a 	mov	r6,r5
   812a8:	21400217 	ldw	r5,8(r4)
   812ac:	d8c00204 	addi	r3,sp,8
   812b0:	180f883a 	mov	r7,r3
   812b4:	d8c00015 	stw	r3,0(sp)
   812b8:	008146c0 	call	8146c <___vfprintf_internal_r>
   812bc:	dfc00117 	ldw	ra,4(sp)
   812c0:	dec00404 	addi	sp,sp,16
   812c4:	f800283a 	ret

000812c8 <putchar>:
   812c8:	00800274 	movhi	r2,9
   812cc:	10be7f04 	addi	r2,r2,-1540
   812d0:	11800017 	ldw	r6,0(r2)
   812d4:	200b883a 	mov	r5,r4
   812d8:	3009883a 	mov	r4,r6
   812dc:	31800217 	ldw	r6,8(r6)
   812e0:	0087a2c1 	jmpi	87a2c <_putc_r>

000812e4 <_putchar_r>:
   812e4:	21800217 	ldw	r6,8(r4)
   812e8:	0087a2c1 	jmpi	87a2c <_putc_r>

000812ec <_puts_r>:
   812ec:	defff604 	addi	sp,sp,-40
   812f0:	dc400715 	stw	r17,28(sp)
   812f4:	2023883a 	mov	r17,r4
   812f8:	2809883a 	mov	r4,r5
   812fc:	dfc00915 	stw	ra,36(sp)
   81300:	dcc00815 	stw	r19,32(sp)
   81304:	2827883a 	mov	r19,r5
   81308:	00813a00 	call	813a0 <strlen>
   8130c:	89400217 	ldw	r5,8(r17)
   81310:	00c00274 	movhi	r3,9
   81314:	18f72704 	addi	r3,r3,-9060
   81318:	01c00044 	movi	r7,1
   8131c:	12000044 	addi	r8,r2,1
   81320:	d8c00515 	stw	r3,20(sp)
   81324:	d9c00615 	stw	r7,24(sp)
   81328:	d8c00304 	addi	r3,sp,12
   8132c:	01c00084 	movi	r7,2
   81330:	8809883a 	mov	r4,r17
   81334:	d80d883a 	mov	r6,sp
   81338:	d8c00015 	stw	r3,0(sp)
   8133c:	dcc00315 	stw	r19,12(sp)
   81340:	da000215 	stw	r8,8(sp)
   81344:	d9c00115 	stw	r7,4(sp)
   81348:	d8800415 	stw	r2,16(sp)
   8134c:	00855ec0 	call	855ec <__sfvwrite_r>
   81350:	00ffffc4 	movi	r3,-1
   81354:	10000626 	beq	r2,zero,81370 <_puts_r+0x84>
   81358:	1805883a 	mov	r2,r3
   8135c:	dfc00917 	ldw	ra,36(sp)
   81360:	dcc00817 	ldw	r19,32(sp)
   81364:	dc400717 	ldw	r17,28(sp)
   81368:	dec00a04 	addi	sp,sp,40
   8136c:	f800283a 	ret
   81370:	00c00284 	movi	r3,10
   81374:	1805883a 	mov	r2,r3
   81378:	dfc00917 	ldw	ra,36(sp)
   8137c:	dcc00817 	ldw	r19,32(sp)
   81380:	dc400717 	ldw	r17,28(sp)
   81384:	dec00a04 	addi	sp,sp,40
   81388:	f800283a 	ret

0008138c <puts>:
   8138c:	00800274 	movhi	r2,9
   81390:	10be7f04 	addi	r2,r2,-1540
   81394:	200b883a 	mov	r5,r4
   81398:	11000017 	ldw	r4,0(r2)
   8139c:	00812ec1 	jmpi	812ec <_puts_r>

000813a0 <strlen>:
   813a0:	208000cc 	andi	r2,r4,3
   813a4:	2011883a 	mov	r8,r4
   813a8:	1000161e 	bne	r2,zero,81404 <strlen+0x64>
   813ac:	20c00017 	ldw	r3,0(r4)
   813b0:	017fbff4 	movhi	r5,65279
   813b4:	297fbfc4 	addi	r5,r5,-257
   813b8:	01e02074 	movhi	r7,32897
   813bc:	39e02004 	addi	r7,r7,-32640
   813c0:	1945883a 	add	r2,r3,r5
   813c4:	11c4703a 	and	r2,r2,r7
   813c8:	00c6303a 	nor	r3,zero,r3
   813cc:	1886703a 	and	r3,r3,r2
   813d0:	18000c1e 	bne	r3,zero,81404 <strlen+0x64>
   813d4:	280d883a 	mov	r6,r5
   813d8:	380b883a 	mov	r5,r7
   813dc:	21000104 	addi	r4,r4,4
   813e0:	20800017 	ldw	r2,0(r4)
   813e4:	1187883a 	add	r3,r2,r6
   813e8:	1946703a 	and	r3,r3,r5
   813ec:	0084303a 	nor	r2,zero,r2
   813f0:	10c4703a 	and	r2,r2,r3
   813f4:	103ff926 	beq	r2,zero,813dc <strlen+0x3c>
   813f8:	20800007 	ldb	r2,0(r4)
   813fc:	10000326 	beq	r2,zero,8140c <strlen+0x6c>
   81400:	21000044 	addi	r4,r4,1
   81404:	20800007 	ldb	r2,0(r4)
   81408:	103ffd1e 	bne	r2,zero,81400 <strlen+0x60>
   8140c:	2205c83a 	sub	r2,r4,r8
   81410:	f800283a 	ret

00081414 <__sprint_r>:
   81414:	30800217 	ldw	r2,8(r6)
   81418:	defffe04 	addi	sp,sp,-8
   8141c:	dc000015 	stw	r16,0(sp)
   81420:	dfc00115 	stw	ra,4(sp)
   81424:	3021883a 	mov	r16,r6
   81428:	0007883a 	mov	r3,zero
   8142c:	1000061e 	bne	r2,zero,81448 <__sprint_r+0x34>
   81430:	1805883a 	mov	r2,r3
   81434:	30000115 	stw	zero,4(r6)
   81438:	dfc00117 	ldw	ra,4(sp)
   8143c:	dc000017 	ldw	r16,0(sp)
   81440:	dec00204 	addi	sp,sp,8
   81444:	f800283a 	ret
   81448:	00855ec0 	call	855ec <__sfvwrite_r>
   8144c:	1007883a 	mov	r3,r2
   81450:	1805883a 	mov	r2,r3
   81454:	80000115 	stw	zero,4(r16)
   81458:	80000215 	stw	zero,8(r16)
   8145c:	dfc00117 	ldw	ra,4(sp)
   81460:	dc000017 	ldw	r16,0(sp)
   81464:	dec00204 	addi	sp,sp,8
   81468:	f800283a 	ret

0008146c <___vfprintf_internal_r>:
   8146c:	defea404 	addi	sp,sp,-1392
   81470:	dd815815 	stw	r22,1376(sp)
   81474:	dc015215 	stw	r16,1352(sp)
   81478:	d9c15115 	stw	r7,1348(sp)
   8147c:	dfc15b15 	stw	ra,1388(sp)
   81480:	df015a15 	stw	fp,1384(sp)
   81484:	ddc15915 	stw	r23,1380(sp)
   81488:	dd415715 	stw	r21,1372(sp)
   8148c:	dd015615 	stw	r20,1368(sp)
   81490:	dcc15515 	stw	r19,1364(sp)
   81494:	dc815415 	stw	r18,1360(sp)
   81498:	dc415315 	stw	r17,1356(sp)
   8149c:	282d883a 	mov	r22,r5
   814a0:	3021883a 	mov	r16,r6
   814a4:	d9014f15 	stw	r4,1340(sp)
   814a8:	0085c100 	call	85c10 <_localeconv_r>
   814ac:	10800017 	ldw	r2,0(r2)
   814b0:	d9c15117 	ldw	r7,1348(sp)
   814b4:	d8814915 	stw	r2,1316(sp)
   814b8:	d8814f17 	ldw	r2,1340(sp)
   814bc:	10000226 	beq	r2,zero,814c8 <___vfprintf_internal_r+0x5c>
   814c0:	10800e17 	ldw	r2,56(r2)
   814c4:	10020d26 	beq	r2,zero,81cfc <___vfprintf_internal_r+0x890>
   814c8:	b080030b 	ldhu	r2,12(r22)
   814cc:	1080020c 	andi	r2,r2,8
   814d0:	10020e26 	beq	r2,zero,81d0c <___vfprintf_internal_r+0x8a0>
   814d4:	b0800417 	ldw	r2,16(r22)
   814d8:	10020c26 	beq	r2,zero,81d0c <___vfprintf_internal_r+0x8a0>
   814dc:	b200030b 	ldhu	r8,12(r22)
   814e0:	00800284 	movi	r2,10
   814e4:	40c0068c 	andi	r3,r8,26
   814e8:	18802f1e 	bne	r3,r2,815a8 <___vfprintf_internal_r+0x13c>
   814ec:	b080038f 	ldh	r2,14(r22)
   814f0:	10002d16 	blt	r2,zero,815a8 <___vfprintf_internal_r+0x13c>
   814f4:	b240038b 	ldhu	r9,14(r22)
   814f8:	b2800717 	ldw	r10,28(r22)
   814fc:	b2c00917 	ldw	r11,36(r22)
   81500:	d9014f17 	ldw	r4,1340(sp)
   81504:	dc402904 	addi	r17,sp,164
   81508:	d8804004 	addi	r2,sp,256
   8150c:	00c10004 	movi	r3,1024
   81510:	423fff4c 	andi	r8,r8,65533
   81514:	800d883a 	mov	r6,r16
   81518:	880b883a 	mov	r5,r17
   8151c:	da002c0d 	sth	r8,176(sp)
   81520:	da402c8d 	sth	r9,178(sp)
   81524:	da803015 	stw	r10,192(sp)
   81528:	dac03215 	stw	r11,200(sp)
   8152c:	d8802d15 	stw	r2,180(sp)
   81530:	d8c02e15 	stw	r3,184(sp)
   81534:	d8802915 	stw	r2,164(sp)
   81538:	d8c02b15 	stw	r3,172(sp)
   8153c:	d8002f15 	stw	zero,188(sp)
   81540:	008146c0 	call	8146c <___vfprintf_internal_r>
   81544:	d8814b15 	stw	r2,1324(sp)
   81548:	10000416 	blt	r2,zero,8155c <___vfprintf_internal_r+0xf0>
   8154c:	d9014f17 	ldw	r4,1340(sp)
   81550:	880b883a 	mov	r5,r17
   81554:	0084c880 	call	84c88 <_fflush_r>
   81558:	1002321e 	bne	r2,zero,81e24 <___vfprintf_internal_r+0x9b8>
   8155c:	d8802c0b 	ldhu	r2,176(sp)
   81560:	1080100c 	andi	r2,r2,64
   81564:	10000326 	beq	r2,zero,81574 <___vfprintf_internal_r+0x108>
   81568:	b080030b 	ldhu	r2,12(r22)
   8156c:	10801014 	ori	r2,r2,64
   81570:	b080030d 	sth	r2,12(r22)
   81574:	d8814b17 	ldw	r2,1324(sp)
   81578:	dfc15b17 	ldw	ra,1388(sp)
   8157c:	df015a17 	ldw	fp,1384(sp)
   81580:	ddc15917 	ldw	r23,1380(sp)
   81584:	dd815817 	ldw	r22,1376(sp)
   81588:	dd415717 	ldw	r21,1372(sp)
   8158c:	dd015617 	ldw	r20,1368(sp)
   81590:	dcc15517 	ldw	r19,1364(sp)
   81594:	dc815417 	ldw	r18,1360(sp)
   81598:	dc415317 	ldw	r17,1356(sp)
   8159c:	dc015217 	ldw	r16,1352(sp)
   815a0:	dec15c04 	addi	sp,sp,1392
   815a4:	f800283a 	ret
   815a8:	0005883a 	mov	r2,zero
   815ac:	0007883a 	mov	r3,zero
   815b0:	dd401904 	addi	r21,sp,100
   815b4:	d8814215 	stw	r2,1288(sp)
   815b8:	802f883a 	mov	r23,r16
   815bc:	d8c14315 	stw	r3,1292(sp)
   815c0:	d8014b15 	stw	zero,1324(sp)
   815c4:	d8014815 	stw	zero,1312(sp)
   815c8:	d8014415 	stw	zero,1296(sp)
   815cc:	d8014715 	stw	zero,1308(sp)
   815d0:	dd400c15 	stw	r21,48(sp)
   815d4:	d8000e15 	stw	zero,56(sp)
   815d8:	d8000d15 	stw	zero,52(sp)
   815dc:	b8800007 	ldb	r2,0(r23)
   815e0:	10001926 	beq	r2,zero,81648 <___vfprintf_internal_r+0x1dc>
   815e4:	00c00944 	movi	r3,37
   815e8:	10c01726 	beq	r2,r3,81648 <___vfprintf_internal_r+0x1dc>
   815ec:	b821883a 	mov	r16,r23
   815f0:	00000106 	br	815f8 <___vfprintf_internal_r+0x18c>
   815f4:	10c00326 	beq	r2,r3,81604 <___vfprintf_internal_r+0x198>
   815f8:	84000044 	addi	r16,r16,1
   815fc:	80800007 	ldb	r2,0(r16)
   81600:	103ffc1e 	bne	r2,zero,815f4 <___vfprintf_internal_r+0x188>
   81604:	85e7c83a 	sub	r19,r16,r23
   81608:	98000e26 	beq	r19,zero,81644 <___vfprintf_internal_r+0x1d8>
   8160c:	dc800e17 	ldw	r18,56(sp)
   81610:	dc400d17 	ldw	r17,52(sp)
   81614:	008001c4 	movi	r2,7
   81618:	94e5883a 	add	r18,r18,r19
   8161c:	8c400044 	addi	r17,r17,1
   81620:	adc00015 	stw	r23,0(r21)
   81624:	dc800e15 	stw	r18,56(sp)
   81628:	acc00115 	stw	r19,4(r21)
   8162c:	dc400d15 	stw	r17,52(sp)
   81630:	14428b16 	blt	r2,r17,82060 <___vfprintf_internal_r+0xbf4>
   81634:	ad400204 	addi	r21,r21,8
   81638:	d9014b17 	ldw	r4,1324(sp)
   8163c:	24c9883a 	add	r4,r4,r19
   81640:	d9014b15 	stw	r4,1324(sp)
   81644:	802f883a 	mov	r23,r16
   81648:	b8800007 	ldb	r2,0(r23)
   8164c:	10013c26 	beq	r2,zero,81b40 <___vfprintf_internal_r+0x6d4>
   81650:	bdc00044 	addi	r23,r23,1
   81654:	d8000405 	stb	zero,16(sp)
   81658:	b8c00007 	ldb	r3,0(r23)
   8165c:	04ffffc4 	movi	r19,-1
   81660:	d8014c15 	stw	zero,1328(sp)
   81664:	d8014a15 	stw	zero,1320(sp)
   81668:	d8c14d15 	stw	r3,1332(sp)
   8166c:	bdc00044 	addi	r23,r23,1
   81670:	d9414d17 	ldw	r5,1332(sp)
   81674:	00801604 	movi	r2,88
   81678:	28fff804 	addi	r3,r5,-32
   8167c:	10c06036 	bltu	r2,r3,81800 <___vfprintf_internal_r+0x394>
   81680:	18c5883a 	add	r2,r3,r3
   81684:	1085883a 	add	r2,r2,r2
   81688:	00c00234 	movhi	r3,8
   8168c:	18c5a704 	addi	r3,r3,5788
   81690:	10c5883a 	add	r2,r2,r3
   81694:	11000017 	ldw	r4,0(r2)
   81698:	2000683a 	jmp	r4
   8169c:	00082610 	cmplti	zero,zero,8344
   816a0:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816a4:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816a8:	000825fc 	xorhi	zero,zero,8343
   816ac:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816b0:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816b4:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816b8:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816bc:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816c0:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816c4:	000823dc 	xori	zero,zero,8335
   816c8:	000825ec 	andhi	zero,zero,8343
   816cc:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816d0:	000823f4 	movhi	zero,8335
   816d4:	00082694 	movui	zero,8346
   816d8:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   816dc:	00082680 	call	8268 <__alt_mem_sram_0-0x77d98>
   816e0:	0008263c 	xorhi	zero,zero,8344
   816e4:	0008263c 	xorhi	zero,zero,8344
   816e8:	0008263c 	xorhi	zero,zero,8344
   816ec:	0008263c 	xorhi	zero,zero,8344
   816f0:	0008263c 	xorhi	zero,zero,8344
   816f4:	0008263c 	xorhi	zero,zero,8344
   816f8:	0008263c 	xorhi	zero,zero,8344
   816fc:	0008263c 	xorhi	zero,zero,8344
   81700:	0008263c 	xorhi	zero,zero,8344
   81704:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81708:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   8170c:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81710:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81714:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81718:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   8171c:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81720:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81724:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81728:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   8172c:	00081e58 	cmpnei	zero,zero,8313
   81730:	000824c4 	movi	zero,8339
   81734:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81738:	000824c4 	movi	zero,8339
   8173c:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81740:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81744:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81748:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   8174c:	00082628 	cmpgeui	zero,zero,8344
   81750:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81754:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81758:	00081f0c 	andi	zero,zero,8316
   8175c:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81760:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81764:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81768:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   8176c:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81770:	00081f58 	cmpnei	zero,zero,8317
   81774:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81778:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   8177c:	00082578 	rdprs	zero,zero,8341
   81780:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81784:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81788:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   8178c:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81790:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81794:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   81798:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   8179c:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817a0:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817a4:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817a8:	0008254c 	andi	zero,zero,8341
   817ac:	00081e64 	muli	zero,zero,8313
   817b0:	000824c4 	movi	zero,8339
   817b4:	000824c4 	movi	zero,8339
   817b8:	000824c4 	movi	zero,8339
   817bc:	000824b0 	cmpltui	zero,zero,8338
   817c0:	00081e64 	muli	zero,zero,8313
   817c4:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817c8:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817cc:	00082438 	rdprs	zero,zero,8336
   817d0:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817d4:	00082408 	cmpgei	zero,zero,8336
   817d8:	00081f18 	cmpnei	zero,zero,8316
   817dc:	00082468 	cmpgeui	zero,zero,8337
   817e0:	00082454 	movui	zero,8337
   817e4:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817e8:	000826fc 	xorhi	zero,zero,8347
   817ec:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817f0:	00081f64 	muli	zero,zero,8317
   817f4:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817f8:	00081800 	call	8180 <__alt_mem_sram_0-0x77e80>
   817fc:	000825dc 	xori	zero,zero,8343
   81800:	d9014d17 	ldw	r4,1332(sp)
   81804:	2000ce26 	beq	r4,zero,81b40 <___vfprintf_internal_r+0x6d4>
   81808:	01400044 	movi	r5,1
   8180c:	d9800f04 	addi	r6,sp,60
   81810:	d9c14015 	stw	r7,1280(sp)
   81814:	d9414515 	stw	r5,1300(sp)
   81818:	d9814115 	stw	r6,1284(sp)
   8181c:	280f883a 	mov	r7,r5
   81820:	d9000f05 	stb	r4,60(sp)
   81824:	d8000405 	stb	zero,16(sp)
   81828:	d8014615 	stw	zero,1304(sp)
   8182c:	d8c14c17 	ldw	r3,1328(sp)
   81830:	1880008c 	andi	r2,r3,2
   81834:	1005003a 	cmpeq	r2,r2,zero
   81838:	d8815015 	stw	r2,1344(sp)
   8183c:	1000031e 	bne	r2,zero,8184c <___vfprintf_internal_r+0x3e0>
   81840:	d9014517 	ldw	r4,1300(sp)
   81844:	21000084 	addi	r4,r4,2
   81848:	d9014515 	stw	r4,1300(sp)
   8184c:	d9414c17 	ldw	r5,1328(sp)
   81850:	2940210c 	andi	r5,r5,132
   81854:	d9414e15 	stw	r5,1336(sp)
   81858:	28002d1e 	bne	r5,zero,81910 <___vfprintf_internal_r+0x4a4>
   8185c:	d9814a17 	ldw	r6,1320(sp)
   81860:	d8814517 	ldw	r2,1300(sp)
   81864:	30a1c83a 	sub	r16,r6,r2
   81868:	0400290e 	bge	zero,r16,81910 <___vfprintf_internal_r+0x4a4>
   8186c:	00800404 	movi	r2,16
   81870:	14045e0e 	bge	r2,r16,829ec <___vfprintf_internal_r+0x1580>
   81874:	dc800e17 	ldw	r18,56(sp)
   81878:	dc400d17 	ldw	r17,52(sp)
   8187c:	1027883a 	mov	r19,r2
   81880:	07000274 	movhi	fp,9
   81884:	e7374384 	addi	fp,fp,-8946
   81888:	050001c4 	movi	r20,7
   8188c:	00000306 	br	8189c <___vfprintf_internal_r+0x430>
   81890:	843ffc04 	addi	r16,r16,-16
   81894:	ad400204 	addi	r21,r21,8
   81898:	9c00130e 	bge	r19,r16,818e8 <___vfprintf_internal_r+0x47c>
   8189c:	94800404 	addi	r18,r18,16
   818a0:	8c400044 	addi	r17,r17,1
   818a4:	af000015 	stw	fp,0(r21)
   818a8:	acc00115 	stw	r19,4(r21)
   818ac:	dc800e15 	stw	r18,56(sp)
   818b0:	dc400d15 	stw	r17,52(sp)
   818b4:	a47ff60e 	bge	r20,r17,81890 <___vfprintf_internal_r+0x424>
   818b8:	d9014f17 	ldw	r4,1340(sp)
   818bc:	b00b883a 	mov	r5,r22
   818c0:	d9800c04 	addi	r6,sp,48
   818c4:	d9c15115 	stw	r7,1348(sp)
   818c8:	00814140 	call	81414 <__sprint_r>
   818cc:	d9c15117 	ldw	r7,1348(sp)
   818d0:	10009e1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   818d4:	843ffc04 	addi	r16,r16,-16
   818d8:	dc800e17 	ldw	r18,56(sp)
   818dc:	dc400d17 	ldw	r17,52(sp)
   818e0:	dd401904 	addi	r21,sp,100
   818e4:	9c3fed16 	blt	r19,r16,8189c <___vfprintf_internal_r+0x430>
   818e8:	9425883a 	add	r18,r18,r16
   818ec:	8c400044 	addi	r17,r17,1
   818f0:	008001c4 	movi	r2,7
   818f4:	af000015 	stw	fp,0(r21)
   818f8:	ac000115 	stw	r16,4(r21)
   818fc:	dc800e15 	stw	r18,56(sp)
   81900:	dc400d15 	stw	r17,52(sp)
   81904:	1441f516 	blt	r2,r17,820dc <___vfprintf_internal_r+0xc70>
   81908:	ad400204 	addi	r21,r21,8
   8190c:	00000206 	br	81918 <___vfprintf_internal_r+0x4ac>
   81910:	dc800e17 	ldw	r18,56(sp)
   81914:	dc400d17 	ldw	r17,52(sp)
   81918:	d8800407 	ldb	r2,16(sp)
   8191c:	10000b26 	beq	r2,zero,8194c <___vfprintf_internal_r+0x4e0>
   81920:	00800044 	movi	r2,1
   81924:	94800044 	addi	r18,r18,1
   81928:	8c400044 	addi	r17,r17,1
   8192c:	a8800115 	stw	r2,4(r21)
   81930:	d8c00404 	addi	r3,sp,16
   81934:	008001c4 	movi	r2,7
   81938:	a8c00015 	stw	r3,0(r21)
   8193c:	dc800e15 	stw	r18,56(sp)
   81940:	dc400d15 	stw	r17,52(sp)
   81944:	1441da16 	blt	r2,r17,820b0 <___vfprintf_internal_r+0xc44>
   81948:	ad400204 	addi	r21,r21,8
   8194c:	d9015017 	ldw	r4,1344(sp)
   81950:	20000b1e 	bne	r4,zero,81980 <___vfprintf_internal_r+0x514>
   81954:	d8800444 	addi	r2,sp,17
   81958:	94800084 	addi	r18,r18,2
   8195c:	8c400044 	addi	r17,r17,1
   81960:	a8800015 	stw	r2,0(r21)
   81964:	00c00084 	movi	r3,2
   81968:	008001c4 	movi	r2,7
   8196c:	a8c00115 	stw	r3,4(r21)
   81970:	dc800e15 	stw	r18,56(sp)
   81974:	dc400d15 	stw	r17,52(sp)
   81978:	1441c216 	blt	r2,r17,82084 <___vfprintf_internal_r+0xc18>
   8197c:	ad400204 	addi	r21,r21,8
   81980:	d9414e17 	ldw	r5,1336(sp)
   81984:	00802004 	movi	r2,128
   81988:	2880b126 	beq	r5,r2,81c50 <___vfprintf_internal_r+0x7e4>
   8198c:	d8c14617 	ldw	r3,1304(sp)
   81990:	19e1c83a 	sub	r16,r3,r7
   81994:	0400260e 	bge	zero,r16,81a30 <___vfprintf_internal_r+0x5c4>
   81998:	00800404 	movi	r2,16
   8199c:	1403cf0e 	bge	r2,r16,828dc <___vfprintf_internal_r+0x1470>
   819a0:	1027883a 	mov	r19,r2
   819a4:	07000274 	movhi	fp,9
   819a8:	e7373f84 	addi	fp,fp,-8962
   819ac:	050001c4 	movi	r20,7
   819b0:	00000306 	br	819c0 <___vfprintf_internal_r+0x554>
   819b4:	843ffc04 	addi	r16,r16,-16
   819b8:	ad400204 	addi	r21,r21,8
   819bc:	9c00130e 	bge	r19,r16,81a0c <___vfprintf_internal_r+0x5a0>
   819c0:	94800404 	addi	r18,r18,16
   819c4:	8c400044 	addi	r17,r17,1
   819c8:	af000015 	stw	fp,0(r21)
   819cc:	acc00115 	stw	r19,4(r21)
   819d0:	dc800e15 	stw	r18,56(sp)
   819d4:	dc400d15 	stw	r17,52(sp)
   819d8:	a47ff60e 	bge	r20,r17,819b4 <___vfprintf_internal_r+0x548>
   819dc:	d9014f17 	ldw	r4,1340(sp)
   819e0:	b00b883a 	mov	r5,r22
   819e4:	d9800c04 	addi	r6,sp,48
   819e8:	d9c15115 	stw	r7,1348(sp)
   819ec:	00814140 	call	81414 <__sprint_r>
   819f0:	d9c15117 	ldw	r7,1348(sp)
   819f4:	1000551e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   819f8:	843ffc04 	addi	r16,r16,-16
   819fc:	dc800e17 	ldw	r18,56(sp)
   81a00:	dc400d17 	ldw	r17,52(sp)
   81a04:	dd401904 	addi	r21,sp,100
   81a08:	9c3fed16 	blt	r19,r16,819c0 <___vfprintf_internal_r+0x554>
   81a0c:	9425883a 	add	r18,r18,r16
   81a10:	8c400044 	addi	r17,r17,1
   81a14:	008001c4 	movi	r2,7
   81a18:	af000015 	stw	fp,0(r21)
   81a1c:	ac000115 	stw	r16,4(r21)
   81a20:	dc800e15 	stw	r18,56(sp)
   81a24:	dc400d15 	stw	r17,52(sp)
   81a28:	14418216 	blt	r2,r17,82034 <___vfprintf_internal_r+0xbc8>
   81a2c:	ad400204 	addi	r21,r21,8
   81a30:	d9014c17 	ldw	r4,1328(sp)
   81a34:	2080400c 	andi	r2,r4,256
   81a38:	10004a1e 	bne	r2,zero,81b64 <___vfprintf_internal_r+0x6f8>
   81a3c:	d9414117 	ldw	r5,1284(sp)
   81a40:	91e5883a 	add	r18,r18,r7
   81a44:	8c400044 	addi	r17,r17,1
   81a48:	008001c4 	movi	r2,7
   81a4c:	a9400015 	stw	r5,0(r21)
   81a50:	a9c00115 	stw	r7,4(r21)
   81a54:	dc800e15 	stw	r18,56(sp)
   81a58:	dc400d15 	stw	r17,52(sp)
   81a5c:	14416716 	blt	r2,r17,81ffc <___vfprintf_internal_r+0xb90>
   81a60:	a8c00204 	addi	r3,r21,8
   81a64:	d9814c17 	ldw	r6,1328(sp)
   81a68:	3080010c 	andi	r2,r6,4
   81a6c:	10002826 	beq	r2,zero,81b10 <___vfprintf_internal_r+0x6a4>
   81a70:	d8814a17 	ldw	r2,1320(sp)
   81a74:	d9014517 	ldw	r4,1300(sp)
   81a78:	1121c83a 	sub	r16,r2,r4
   81a7c:	0400240e 	bge	zero,r16,81b10 <___vfprintf_internal_r+0x6a4>
   81a80:	00800404 	movi	r2,16
   81a84:	1404550e 	bge	r2,r16,82bdc <___vfprintf_internal_r+0x1770>
   81a88:	dc400d17 	ldw	r17,52(sp)
   81a8c:	1027883a 	mov	r19,r2
   81a90:	07000274 	movhi	fp,9
   81a94:	e7374384 	addi	fp,fp,-8946
   81a98:	050001c4 	movi	r20,7
   81a9c:	00000306 	br	81aac <___vfprintf_internal_r+0x640>
   81aa0:	843ffc04 	addi	r16,r16,-16
   81aa4:	18c00204 	addi	r3,r3,8
   81aa8:	9c00110e 	bge	r19,r16,81af0 <___vfprintf_internal_r+0x684>
   81aac:	94800404 	addi	r18,r18,16
   81ab0:	8c400044 	addi	r17,r17,1
   81ab4:	1f000015 	stw	fp,0(r3)
   81ab8:	1cc00115 	stw	r19,4(r3)
   81abc:	dc800e15 	stw	r18,56(sp)
   81ac0:	dc400d15 	stw	r17,52(sp)
   81ac4:	a47ff60e 	bge	r20,r17,81aa0 <___vfprintf_internal_r+0x634>
   81ac8:	d9014f17 	ldw	r4,1340(sp)
   81acc:	b00b883a 	mov	r5,r22
   81ad0:	d9800c04 	addi	r6,sp,48
   81ad4:	00814140 	call	81414 <__sprint_r>
   81ad8:	10001c1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   81adc:	843ffc04 	addi	r16,r16,-16
   81ae0:	dc800e17 	ldw	r18,56(sp)
   81ae4:	dc400d17 	ldw	r17,52(sp)
   81ae8:	d8c01904 	addi	r3,sp,100
   81aec:	9c3fef16 	blt	r19,r16,81aac <___vfprintf_internal_r+0x640>
   81af0:	9425883a 	add	r18,r18,r16
   81af4:	8c400044 	addi	r17,r17,1
   81af8:	008001c4 	movi	r2,7
   81afc:	1f000015 	stw	fp,0(r3)
   81b00:	1c000115 	stw	r16,4(r3)
   81b04:	dc800e15 	stw	r18,56(sp)
   81b08:	dc400d15 	stw	r17,52(sp)
   81b0c:	1440cb16 	blt	r2,r17,81e3c <___vfprintf_internal_r+0x9d0>
   81b10:	d8814a17 	ldw	r2,1320(sp)
   81b14:	d9414517 	ldw	r5,1300(sp)
   81b18:	1140010e 	bge	r2,r5,81b20 <___vfprintf_internal_r+0x6b4>
   81b1c:	2805883a 	mov	r2,r5
   81b20:	d9814b17 	ldw	r6,1324(sp)
   81b24:	308d883a 	add	r6,r6,r2
   81b28:	d9814b15 	stw	r6,1324(sp)
   81b2c:	90013b1e 	bne	r18,zero,8201c <___vfprintf_internal_r+0xbb0>
   81b30:	d9c14017 	ldw	r7,1280(sp)
   81b34:	dd401904 	addi	r21,sp,100
   81b38:	d8000d15 	stw	zero,52(sp)
   81b3c:	003ea706 	br	815dc <___vfprintf_internal_r+0x170>
   81b40:	d8800e17 	ldw	r2,56(sp)
   81b44:	1005451e 	bne	r2,zero,8305c <___vfprintf_internal_r+0x1bf0>
   81b48:	d8000d15 	stw	zero,52(sp)
   81b4c:	b080030b 	ldhu	r2,12(r22)
   81b50:	1080100c 	andi	r2,r2,64
   81b54:	103e8726 	beq	r2,zero,81574 <___vfprintf_internal_r+0x108>
   81b58:	00bfffc4 	movi	r2,-1
   81b5c:	d8814b15 	stw	r2,1324(sp)
   81b60:	003e8406 	br	81574 <___vfprintf_internal_r+0x108>
   81b64:	d9814d17 	ldw	r6,1332(sp)
   81b68:	00801944 	movi	r2,101
   81b6c:	11806e16 	blt	r2,r6,81d28 <___vfprintf_internal_r+0x8bc>
   81b70:	d9414717 	ldw	r5,1308(sp)
   81b74:	00c00044 	movi	r3,1
   81b78:	1943490e 	bge	r3,r5,828a0 <___vfprintf_internal_r+0x1434>
   81b7c:	d8814117 	ldw	r2,1284(sp)
   81b80:	94800044 	addi	r18,r18,1
   81b84:	8c400044 	addi	r17,r17,1
   81b88:	a8800015 	stw	r2,0(r21)
   81b8c:	008001c4 	movi	r2,7
   81b90:	a8c00115 	stw	r3,4(r21)
   81b94:	dc800e15 	stw	r18,56(sp)
   81b98:	dc400d15 	stw	r17,52(sp)
   81b9c:	1441ca16 	blt	r2,r17,822c8 <___vfprintf_internal_r+0xe5c>
   81ba0:	a8c00204 	addi	r3,r21,8
   81ba4:	d9014917 	ldw	r4,1316(sp)
   81ba8:	00800044 	movi	r2,1
   81bac:	94800044 	addi	r18,r18,1
   81bb0:	8c400044 	addi	r17,r17,1
   81bb4:	18800115 	stw	r2,4(r3)
   81bb8:	008001c4 	movi	r2,7
   81bbc:	19000015 	stw	r4,0(r3)
   81bc0:	dc800e15 	stw	r18,56(sp)
   81bc4:	dc400d15 	stw	r17,52(sp)
   81bc8:	1441b616 	blt	r2,r17,822a4 <___vfprintf_internal_r+0xe38>
   81bcc:	1cc00204 	addi	r19,r3,8
   81bd0:	d9014217 	ldw	r4,1288(sp)
   81bd4:	d9414317 	ldw	r5,1292(sp)
   81bd8:	000d883a 	mov	r6,zero
   81bdc:	000f883a 	mov	r7,zero
   81be0:	008a2580 	call	8a258 <__nedf2>
   81be4:	10017426 	beq	r2,zero,821b8 <___vfprintf_internal_r+0xd4c>
   81be8:	d9414717 	ldw	r5,1308(sp)
   81bec:	d9814117 	ldw	r6,1284(sp)
   81bf0:	8c400044 	addi	r17,r17,1
   81bf4:	2c85883a 	add	r2,r5,r18
   81bf8:	14bfffc4 	addi	r18,r2,-1
   81bfc:	28bfffc4 	addi	r2,r5,-1
   81c00:	30c00044 	addi	r3,r6,1
   81c04:	98800115 	stw	r2,4(r19)
   81c08:	008001c4 	movi	r2,7
   81c0c:	98c00015 	stw	r3,0(r19)
   81c10:	dc800e15 	stw	r18,56(sp)
   81c14:	dc400d15 	stw	r17,52(sp)
   81c18:	14418e16 	blt	r2,r17,82254 <___vfprintf_internal_r+0xde8>
   81c1c:	9cc00204 	addi	r19,r19,8
   81c20:	d9414817 	ldw	r5,1312(sp)
   81c24:	d8800804 	addi	r2,sp,32
   81c28:	8c400044 	addi	r17,r17,1
   81c2c:	9165883a 	add	r18,r18,r5
   81c30:	98800015 	stw	r2,0(r19)
   81c34:	008001c4 	movi	r2,7
   81c38:	99400115 	stw	r5,4(r19)
   81c3c:	dc800e15 	stw	r18,56(sp)
   81c40:	dc400d15 	stw	r17,52(sp)
   81c44:	1440ed16 	blt	r2,r17,81ffc <___vfprintf_internal_r+0xb90>
   81c48:	98c00204 	addi	r3,r19,8
   81c4c:	003f8506 	br	81a64 <___vfprintf_internal_r+0x5f8>
   81c50:	d9814a17 	ldw	r6,1320(sp)
   81c54:	d8814517 	ldw	r2,1300(sp)
   81c58:	30a1c83a 	sub	r16,r6,r2
   81c5c:	043f4b0e 	bge	zero,r16,8198c <___vfprintf_internal_r+0x520>
   81c60:	00800404 	movi	r2,16
   81c64:	14043a0e 	bge	r2,r16,82d50 <___vfprintf_internal_r+0x18e4>
   81c68:	1027883a 	mov	r19,r2
   81c6c:	07000274 	movhi	fp,9
   81c70:	e7373f84 	addi	fp,fp,-8962
   81c74:	050001c4 	movi	r20,7
   81c78:	00000306 	br	81c88 <___vfprintf_internal_r+0x81c>
   81c7c:	843ffc04 	addi	r16,r16,-16
   81c80:	ad400204 	addi	r21,r21,8
   81c84:	9c00130e 	bge	r19,r16,81cd4 <___vfprintf_internal_r+0x868>
   81c88:	94800404 	addi	r18,r18,16
   81c8c:	8c400044 	addi	r17,r17,1
   81c90:	af000015 	stw	fp,0(r21)
   81c94:	acc00115 	stw	r19,4(r21)
   81c98:	dc800e15 	stw	r18,56(sp)
   81c9c:	dc400d15 	stw	r17,52(sp)
   81ca0:	a47ff60e 	bge	r20,r17,81c7c <___vfprintf_internal_r+0x810>
   81ca4:	d9014f17 	ldw	r4,1340(sp)
   81ca8:	b00b883a 	mov	r5,r22
   81cac:	d9800c04 	addi	r6,sp,48
   81cb0:	d9c15115 	stw	r7,1348(sp)
   81cb4:	00814140 	call	81414 <__sprint_r>
   81cb8:	d9c15117 	ldw	r7,1348(sp)
   81cbc:	103fa31e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   81cc0:	843ffc04 	addi	r16,r16,-16
   81cc4:	dc800e17 	ldw	r18,56(sp)
   81cc8:	dc400d17 	ldw	r17,52(sp)
   81ccc:	dd401904 	addi	r21,sp,100
   81cd0:	9c3fed16 	blt	r19,r16,81c88 <___vfprintf_internal_r+0x81c>
   81cd4:	9425883a 	add	r18,r18,r16
   81cd8:	8c400044 	addi	r17,r17,1
   81cdc:	008001c4 	movi	r2,7
   81ce0:	af000015 	stw	fp,0(r21)
   81ce4:	ac000115 	stw	r16,4(r21)
   81ce8:	dc800e15 	stw	r18,56(sp)
   81cec:	dc400d15 	stw	r17,52(sp)
   81cf0:	14416116 	blt	r2,r17,82278 <___vfprintf_internal_r+0xe0c>
   81cf4:	ad400204 	addi	r21,r21,8
   81cf8:	003f2406 	br	8198c <___vfprintf_internal_r+0x520>
   81cfc:	d9014f17 	ldw	r4,1340(sp)
   81d00:	0084f200 	call	84f20 <__sinit>
   81d04:	d9c15117 	ldw	r7,1348(sp)
   81d08:	003def06 	br	814c8 <___vfprintf_internal_r+0x5c>
   81d0c:	d9014f17 	ldw	r4,1340(sp)
   81d10:	b00b883a 	mov	r5,r22
   81d14:	d9c15115 	stw	r7,1348(sp)
   81d18:	00833540 	call	83354 <__swsetup_r>
   81d1c:	d9c15117 	ldw	r7,1348(sp)
   81d20:	103dee26 	beq	r2,zero,814dc <___vfprintf_internal_r+0x70>
   81d24:	003f8c06 	br	81b58 <___vfprintf_internal_r+0x6ec>
   81d28:	d9014217 	ldw	r4,1288(sp)
   81d2c:	d9414317 	ldw	r5,1292(sp)
   81d30:	000d883a 	mov	r6,zero
   81d34:	000f883a 	mov	r7,zero
   81d38:	008a1d00 	call	8a1d0 <__eqdf2>
   81d3c:	1000f21e 	bne	r2,zero,82108 <___vfprintf_internal_r+0xc9c>
   81d40:	00800274 	movhi	r2,9
   81d44:	10b73f04 	addi	r2,r2,-8964
   81d48:	94800044 	addi	r18,r18,1
   81d4c:	8c400044 	addi	r17,r17,1
   81d50:	a8800015 	stw	r2,0(r21)
   81d54:	00c00044 	movi	r3,1
   81d58:	008001c4 	movi	r2,7
   81d5c:	a8c00115 	stw	r3,4(r21)
   81d60:	dc800e15 	stw	r18,56(sp)
   81d64:	dc400d15 	stw	r17,52(sp)
   81d68:	14430016 	blt	r2,r17,8296c <___vfprintf_internal_r+0x1500>
   81d6c:	a8c00204 	addi	r3,r21,8
   81d70:	d8800517 	ldw	r2,20(sp)
   81d74:	d9014717 	ldw	r4,1308(sp)
   81d78:	11015c0e 	bge	r2,r4,822ec <___vfprintf_internal_r+0xe80>
   81d7c:	dc400d17 	ldw	r17,52(sp)
   81d80:	d9814917 	ldw	r6,1316(sp)
   81d84:	00800044 	movi	r2,1
   81d88:	94800044 	addi	r18,r18,1
   81d8c:	8c400044 	addi	r17,r17,1
   81d90:	18800115 	stw	r2,4(r3)
   81d94:	008001c4 	movi	r2,7
   81d98:	19800015 	stw	r6,0(r3)
   81d9c:	dc800e15 	stw	r18,56(sp)
   81da0:	dc400d15 	stw	r17,52(sp)
   81da4:	14431616 	blt	r2,r17,82a00 <___vfprintf_internal_r+0x1594>
   81da8:	18c00204 	addi	r3,r3,8
   81dac:	d8814717 	ldw	r2,1308(sp)
   81db0:	143fffc4 	addi	r16,r2,-1
   81db4:	043f2b0e 	bge	zero,r16,81a64 <___vfprintf_internal_r+0x5f8>
   81db8:	00800404 	movi	r2,16
   81dbc:	1402a80e 	bge	r2,r16,82860 <___vfprintf_internal_r+0x13f4>
   81dc0:	dc400d17 	ldw	r17,52(sp)
   81dc4:	1027883a 	mov	r19,r2
   81dc8:	07000274 	movhi	fp,9
   81dcc:	e7373f84 	addi	fp,fp,-8962
   81dd0:	050001c4 	movi	r20,7
   81dd4:	00000306 	br	81de4 <___vfprintf_internal_r+0x978>
   81dd8:	18c00204 	addi	r3,r3,8
   81ddc:	843ffc04 	addi	r16,r16,-16
   81de0:	9c02a20e 	bge	r19,r16,8286c <___vfprintf_internal_r+0x1400>
   81de4:	94800404 	addi	r18,r18,16
   81de8:	8c400044 	addi	r17,r17,1
   81dec:	1f000015 	stw	fp,0(r3)
   81df0:	1cc00115 	stw	r19,4(r3)
   81df4:	dc800e15 	stw	r18,56(sp)
   81df8:	dc400d15 	stw	r17,52(sp)
   81dfc:	a47ff60e 	bge	r20,r17,81dd8 <___vfprintf_internal_r+0x96c>
   81e00:	d9014f17 	ldw	r4,1340(sp)
   81e04:	b00b883a 	mov	r5,r22
   81e08:	d9800c04 	addi	r6,sp,48
   81e0c:	00814140 	call	81414 <__sprint_r>
   81e10:	103f4e1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   81e14:	dc800e17 	ldw	r18,56(sp)
   81e18:	dc400d17 	ldw	r17,52(sp)
   81e1c:	d8c01904 	addi	r3,sp,100
   81e20:	003fee06 	br	81ddc <___vfprintf_internal_r+0x970>
   81e24:	d8802c0b 	ldhu	r2,176(sp)
   81e28:	00ffffc4 	movi	r3,-1
   81e2c:	d8c14b15 	stw	r3,1324(sp)
   81e30:	1080100c 	andi	r2,r2,64
   81e34:	103dcc1e 	bne	r2,zero,81568 <___vfprintf_internal_r+0xfc>
   81e38:	003dce06 	br	81574 <___vfprintf_internal_r+0x108>
   81e3c:	d9014f17 	ldw	r4,1340(sp)
   81e40:	b00b883a 	mov	r5,r22
   81e44:	d9800c04 	addi	r6,sp,48
   81e48:	00814140 	call	81414 <__sprint_r>
   81e4c:	103f3f1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   81e50:	dc800e17 	ldw	r18,56(sp)
   81e54:	003f2e06 	br	81b10 <___vfprintf_internal_r+0x6a4>
   81e58:	d9414c17 	ldw	r5,1328(sp)
   81e5c:	29400414 	ori	r5,r5,16
   81e60:	d9414c15 	stw	r5,1328(sp)
   81e64:	d9814c17 	ldw	r6,1328(sp)
   81e68:	3080080c 	andi	r2,r6,32
   81e6c:	10014f1e 	bne	r2,zero,823ac <___vfprintf_internal_r+0xf40>
   81e70:	d8c14c17 	ldw	r3,1328(sp)
   81e74:	1880040c 	andi	r2,r3,16
   81e78:	1002f01e 	bne	r2,zero,82a3c <___vfprintf_internal_r+0x15d0>
   81e7c:	d9014c17 	ldw	r4,1328(sp)
   81e80:	2080100c 	andi	r2,r4,64
   81e84:	1002ed26 	beq	r2,zero,82a3c <___vfprintf_internal_r+0x15d0>
   81e88:	3880000f 	ldh	r2,0(r7)
   81e8c:	39c00104 	addi	r7,r7,4
   81e90:	d9c14015 	stw	r7,1280(sp)
   81e94:	1023d7fa 	srai	r17,r2,31
   81e98:	1021883a 	mov	r16,r2
   81e9c:	88037816 	blt	r17,zero,82c80 <___vfprintf_internal_r+0x1814>
   81ea0:	01000044 	movi	r4,1
   81ea4:	98000416 	blt	r19,zero,81eb8 <___vfprintf_internal_r+0xa4c>
   81ea8:	d8c14c17 	ldw	r3,1328(sp)
   81eac:	00bfdfc4 	movi	r2,-129
   81eb0:	1886703a 	and	r3,r3,r2
   81eb4:	d8c14c15 	stw	r3,1328(sp)
   81eb8:	8444b03a 	or	r2,r16,r17
   81ebc:	10022c1e 	bne	r2,zero,82770 <___vfprintf_internal_r+0x1304>
   81ec0:	98022b1e 	bne	r19,zero,82770 <___vfprintf_internal_r+0x1304>
   81ec4:	20803fcc 	andi	r2,r4,255
   81ec8:	1002a126 	beq	r2,zero,82950 <___vfprintf_internal_r+0x14e4>
   81ecc:	d8c01904 	addi	r3,sp,100
   81ed0:	dd000f04 	addi	r20,sp,60
   81ed4:	d8c14115 	stw	r3,1284(sp)
   81ed8:	d8c14117 	ldw	r3,1284(sp)
   81edc:	dcc14515 	stw	r19,1300(sp)
   81ee0:	a0c5c83a 	sub	r2,r20,r3
   81ee4:	11c00a04 	addi	r7,r2,40
   81ee8:	99c0010e 	bge	r19,r7,81ef0 <___vfprintf_internal_r+0xa84>
   81eec:	d9c14515 	stw	r7,1300(sp)
   81ef0:	dcc14615 	stw	r19,1304(sp)
   81ef4:	d8800407 	ldb	r2,16(sp)
   81ef8:	103e4c26 	beq	r2,zero,8182c <___vfprintf_internal_r+0x3c0>
   81efc:	d8814517 	ldw	r2,1300(sp)
   81f00:	10800044 	addi	r2,r2,1
   81f04:	d8814515 	stw	r2,1300(sp)
   81f08:	003e4806 	br	8182c <___vfprintf_internal_r+0x3c0>
   81f0c:	d9814c17 	ldw	r6,1328(sp)
   81f10:	31800414 	ori	r6,r6,16
   81f14:	d9814c15 	stw	r6,1328(sp)
   81f18:	d8c14c17 	ldw	r3,1328(sp)
   81f1c:	1880080c 	andi	r2,r3,32
   81f20:	1001271e 	bne	r2,zero,823c0 <___vfprintf_internal_r+0xf54>
   81f24:	d9414c17 	ldw	r5,1328(sp)
   81f28:	2880040c 	andi	r2,r5,16
   81f2c:	1002bc1e 	bne	r2,zero,82a20 <___vfprintf_internal_r+0x15b4>
   81f30:	d9814c17 	ldw	r6,1328(sp)
   81f34:	3080100c 	andi	r2,r6,64
   81f38:	1002b926 	beq	r2,zero,82a20 <___vfprintf_internal_r+0x15b4>
   81f3c:	3c00000b 	ldhu	r16,0(r7)
   81f40:	0009883a 	mov	r4,zero
   81f44:	39c00104 	addi	r7,r7,4
   81f48:	0023883a 	mov	r17,zero
   81f4c:	d9c14015 	stw	r7,1280(sp)
   81f50:	d8000405 	stb	zero,16(sp)
   81f54:	003fd306 	br	81ea4 <___vfprintf_internal_r+0xa38>
   81f58:	d9014c17 	ldw	r4,1328(sp)
   81f5c:	21000414 	ori	r4,r4,16
   81f60:	d9014c15 	stw	r4,1328(sp)
   81f64:	d9414c17 	ldw	r5,1328(sp)
   81f68:	2880080c 	andi	r2,r5,32
   81f6c:	1001081e 	bne	r2,zero,82390 <___vfprintf_internal_r+0xf24>
   81f70:	d8c14c17 	ldw	r3,1328(sp)
   81f74:	1880040c 	andi	r2,r3,16
   81f78:	1002b61e 	bne	r2,zero,82a54 <___vfprintf_internal_r+0x15e8>
   81f7c:	d9014c17 	ldw	r4,1328(sp)
   81f80:	2080100c 	andi	r2,r4,64
   81f84:	1002b326 	beq	r2,zero,82a54 <___vfprintf_internal_r+0x15e8>
   81f88:	3c00000b 	ldhu	r16,0(r7)
   81f8c:	01000044 	movi	r4,1
   81f90:	39c00104 	addi	r7,r7,4
   81f94:	0023883a 	mov	r17,zero
   81f98:	d9c14015 	stw	r7,1280(sp)
   81f9c:	d8000405 	stb	zero,16(sp)
   81fa0:	003fc006 	br	81ea4 <___vfprintf_internal_r+0xa38>
   81fa4:	d9014f17 	ldw	r4,1340(sp)
   81fa8:	b00b883a 	mov	r5,r22
   81fac:	d9800c04 	addi	r6,sp,48
   81fb0:	00814140 	call	81414 <__sprint_r>
   81fb4:	103ee51e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   81fb8:	dc800e17 	ldw	r18,56(sp)
   81fbc:	d8c01904 	addi	r3,sp,100
   81fc0:	d9814c17 	ldw	r6,1328(sp)
   81fc4:	3080004c 	andi	r2,r6,1
   81fc8:	1005003a 	cmpeq	r2,r2,zero
   81fcc:	103ea51e 	bne	r2,zero,81a64 <___vfprintf_internal_r+0x5f8>
   81fd0:	00800044 	movi	r2,1
   81fd4:	dc400d17 	ldw	r17,52(sp)
   81fd8:	18800115 	stw	r2,4(r3)
   81fdc:	d8814917 	ldw	r2,1316(sp)
   81fe0:	94800044 	addi	r18,r18,1
   81fe4:	8c400044 	addi	r17,r17,1
   81fe8:	18800015 	stw	r2,0(r3)
   81fec:	008001c4 	movi	r2,7
   81ff0:	dc800e15 	stw	r18,56(sp)
   81ff4:	dc400d15 	stw	r17,52(sp)
   81ff8:	1442240e 	bge	r2,r17,8288c <___vfprintf_internal_r+0x1420>
   81ffc:	d9014f17 	ldw	r4,1340(sp)
   82000:	b00b883a 	mov	r5,r22
   82004:	d9800c04 	addi	r6,sp,48
   82008:	00814140 	call	81414 <__sprint_r>
   8200c:	103ecf1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82010:	dc800e17 	ldw	r18,56(sp)
   82014:	d8c01904 	addi	r3,sp,100
   82018:	003e9206 	br	81a64 <___vfprintf_internal_r+0x5f8>
   8201c:	d9014f17 	ldw	r4,1340(sp)
   82020:	b00b883a 	mov	r5,r22
   82024:	d9800c04 	addi	r6,sp,48
   82028:	00814140 	call	81414 <__sprint_r>
   8202c:	103ec026 	beq	r2,zero,81b30 <___vfprintf_internal_r+0x6c4>
   82030:	003ec606 	br	81b4c <___vfprintf_internal_r+0x6e0>
   82034:	d9014f17 	ldw	r4,1340(sp)
   82038:	b00b883a 	mov	r5,r22
   8203c:	d9800c04 	addi	r6,sp,48
   82040:	d9c15115 	stw	r7,1348(sp)
   82044:	00814140 	call	81414 <__sprint_r>
   82048:	d9c15117 	ldw	r7,1348(sp)
   8204c:	103ebf1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82050:	dc800e17 	ldw	r18,56(sp)
   82054:	dc400d17 	ldw	r17,52(sp)
   82058:	dd401904 	addi	r21,sp,100
   8205c:	003e7406 	br	81a30 <___vfprintf_internal_r+0x5c4>
   82060:	d9014f17 	ldw	r4,1340(sp)
   82064:	b00b883a 	mov	r5,r22
   82068:	d9800c04 	addi	r6,sp,48
   8206c:	d9c15115 	stw	r7,1348(sp)
   82070:	00814140 	call	81414 <__sprint_r>
   82074:	d9c15117 	ldw	r7,1348(sp)
   82078:	103eb41e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   8207c:	dd401904 	addi	r21,sp,100
   82080:	003d6d06 	br	81638 <___vfprintf_internal_r+0x1cc>
   82084:	d9014f17 	ldw	r4,1340(sp)
   82088:	b00b883a 	mov	r5,r22
   8208c:	d9800c04 	addi	r6,sp,48
   82090:	d9c15115 	stw	r7,1348(sp)
   82094:	00814140 	call	81414 <__sprint_r>
   82098:	d9c15117 	ldw	r7,1348(sp)
   8209c:	103eab1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   820a0:	dc800e17 	ldw	r18,56(sp)
   820a4:	dc400d17 	ldw	r17,52(sp)
   820a8:	dd401904 	addi	r21,sp,100
   820ac:	003e3406 	br	81980 <___vfprintf_internal_r+0x514>
   820b0:	d9014f17 	ldw	r4,1340(sp)
   820b4:	b00b883a 	mov	r5,r22
   820b8:	d9800c04 	addi	r6,sp,48
   820bc:	d9c15115 	stw	r7,1348(sp)
   820c0:	00814140 	call	81414 <__sprint_r>
   820c4:	d9c15117 	ldw	r7,1348(sp)
   820c8:	103ea01e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   820cc:	dc800e17 	ldw	r18,56(sp)
   820d0:	dc400d17 	ldw	r17,52(sp)
   820d4:	dd401904 	addi	r21,sp,100
   820d8:	003e1c06 	br	8194c <___vfprintf_internal_r+0x4e0>
   820dc:	d9014f17 	ldw	r4,1340(sp)
   820e0:	b00b883a 	mov	r5,r22
   820e4:	d9800c04 	addi	r6,sp,48
   820e8:	d9c15115 	stw	r7,1348(sp)
   820ec:	00814140 	call	81414 <__sprint_r>
   820f0:	d9c15117 	ldw	r7,1348(sp)
   820f4:	103e951e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   820f8:	dc800e17 	ldw	r18,56(sp)
   820fc:	dc400d17 	ldw	r17,52(sp)
   82100:	dd401904 	addi	r21,sp,100
   82104:	003e0406 	br	81918 <___vfprintf_internal_r+0x4ac>
   82108:	d9000517 	ldw	r4,20(sp)
   8210c:	0102580e 	bge	zero,r4,82a70 <___vfprintf_internal_r+0x1604>
   82110:	d9814717 	ldw	r6,1308(sp)
   82114:	21807a16 	blt	r4,r6,82300 <___vfprintf_internal_r+0xe94>
   82118:	d8814117 	ldw	r2,1284(sp)
   8211c:	91a5883a 	add	r18,r18,r6
   82120:	8c400044 	addi	r17,r17,1
   82124:	a8800015 	stw	r2,0(r21)
   82128:	008001c4 	movi	r2,7
   8212c:	a9800115 	stw	r6,4(r21)
   82130:	dc800e15 	stw	r18,56(sp)
   82134:	dc400d15 	stw	r17,52(sp)
   82138:	1442fc16 	blt	r2,r17,82d2c <___vfprintf_internal_r+0x18c0>
   8213c:	a8c00204 	addi	r3,r21,8
   82140:	d9414717 	ldw	r5,1308(sp)
   82144:	2161c83a 	sub	r16,r4,r5
   82148:	043f9d0e 	bge	zero,r16,81fc0 <___vfprintf_internal_r+0xb54>
   8214c:	00800404 	movi	r2,16
   82150:	1402190e 	bge	r2,r16,829b8 <___vfprintf_internal_r+0x154c>
   82154:	dc400d17 	ldw	r17,52(sp)
   82158:	1027883a 	mov	r19,r2
   8215c:	07000274 	movhi	fp,9
   82160:	e7373f84 	addi	fp,fp,-8962
   82164:	050001c4 	movi	r20,7
   82168:	00000306 	br	82178 <___vfprintf_internal_r+0xd0c>
   8216c:	18c00204 	addi	r3,r3,8
   82170:	843ffc04 	addi	r16,r16,-16
   82174:	9c02130e 	bge	r19,r16,829c4 <___vfprintf_internal_r+0x1558>
   82178:	94800404 	addi	r18,r18,16
   8217c:	8c400044 	addi	r17,r17,1
   82180:	1f000015 	stw	fp,0(r3)
   82184:	1cc00115 	stw	r19,4(r3)
   82188:	dc800e15 	stw	r18,56(sp)
   8218c:	dc400d15 	stw	r17,52(sp)
   82190:	a47ff60e 	bge	r20,r17,8216c <___vfprintf_internal_r+0xd00>
   82194:	d9014f17 	ldw	r4,1340(sp)
   82198:	b00b883a 	mov	r5,r22
   8219c:	d9800c04 	addi	r6,sp,48
   821a0:	00814140 	call	81414 <__sprint_r>
   821a4:	103e691e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   821a8:	dc800e17 	ldw	r18,56(sp)
   821ac:	dc400d17 	ldw	r17,52(sp)
   821b0:	d8c01904 	addi	r3,sp,100
   821b4:	003fee06 	br	82170 <___vfprintf_internal_r+0xd04>
   821b8:	d8814717 	ldw	r2,1308(sp)
   821bc:	143fffc4 	addi	r16,r2,-1
   821c0:	043e970e 	bge	zero,r16,81c20 <___vfprintf_internal_r+0x7b4>
   821c4:	00800404 	movi	r2,16
   821c8:	1400180e 	bge	r2,r16,8222c <___vfprintf_internal_r+0xdc0>
   821cc:	1029883a 	mov	r20,r2
   821d0:	07000274 	movhi	fp,9
   821d4:	e7373f84 	addi	fp,fp,-8962
   821d8:	054001c4 	movi	r21,7
   821dc:	00000306 	br	821ec <___vfprintf_internal_r+0xd80>
   821e0:	9cc00204 	addi	r19,r19,8
   821e4:	843ffc04 	addi	r16,r16,-16
   821e8:	a400120e 	bge	r20,r16,82234 <___vfprintf_internal_r+0xdc8>
   821ec:	94800404 	addi	r18,r18,16
   821f0:	8c400044 	addi	r17,r17,1
   821f4:	9f000015 	stw	fp,0(r19)
   821f8:	9d000115 	stw	r20,4(r19)
   821fc:	dc800e15 	stw	r18,56(sp)
   82200:	dc400d15 	stw	r17,52(sp)
   82204:	ac7ff60e 	bge	r21,r17,821e0 <___vfprintf_internal_r+0xd74>
   82208:	d9014f17 	ldw	r4,1340(sp)
   8220c:	b00b883a 	mov	r5,r22
   82210:	d9800c04 	addi	r6,sp,48
   82214:	00814140 	call	81414 <__sprint_r>
   82218:	103e4c1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   8221c:	dc800e17 	ldw	r18,56(sp)
   82220:	dc400d17 	ldw	r17,52(sp)
   82224:	dcc01904 	addi	r19,sp,100
   82228:	003fee06 	br	821e4 <___vfprintf_internal_r+0xd78>
   8222c:	07000274 	movhi	fp,9
   82230:	e7373f84 	addi	fp,fp,-8962
   82234:	9425883a 	add	r18,r18,r16
   82238:	8c400044 	addi	r17,r17,1
   8223c:	008001c4 	movi	r2,7
   82240:	9f000015 	stw	fp,0(r19)
   82244:	9c000115 	stw	r16,4(r19)
   82248:	dc800e15 	stw	r18,56(sp)
   8224c:	dc400d15 	stw	r17,52(sp)
   82250:	147e720e 	bge	r2,r17,81c1c <___vfprintf_internal_r+0x7b0>
   82254:	d9014f17 	ldw	r4,1340(sp)
   82258:	b00b883a 	mov	r5,r22
   8225c:	d9800c04 	addi	r6,sp,48
   82260:	00814140 	call	81414 <__sprint_r>
   82264:	103e391e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82268:	dc800e17 	ldw	r18,56(sp)
   8226c:	dc400d17 	ldw	r17,52(sp)
   82270:	dcc01904 	addi	r19,sp,100
   82274:	003e6a06 	br	81c20 <___vfprintf_internal_r+0x7b4>
   82278:	d9014f17 	ldw	r4,1340(sp)
   8227c:	b00b883a 	mov	r5,r22
   82280:	d9800c04 	addi	r6,sp,48
   82284:	d9c15115 	stw	r7,1348(sp)
   82288:	00814140 	call	81414 <__sprint_r>
   8228c:	d9c15117 	ldw	r7,1348(sp)
   82290:	103e2e1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82294:	dc800e17 	ldw	r18,56(sp)
   82298:	dc400d17 	ldw	r17,52(sp)
   8229c:	dd401904 	addi	r21,sp,100
   822a0:	003dba06 	br	8198c <___vfprintf_internal_r+0x520>
   822a4:	d9014f17 	ldw	r4,1340(sp)
   822a8:	b00b883a 	mov	r5,r22
   822ac:	d9800c04 	addi	r6,sp,48
   822b0:	00814140 	call	81414 <__sprint_r>
   822b4:	103e251e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   822b8:	dc800e17 	ldw	r18,56(sp)
   822bc:	dc400d17 	ldw	r17,52(sp)
   822c0:	dcc01904 	addi	r19,sp,100
   822c4:	003e4206 	br	81bd0 <___vfprintf_internal_r+0x764>
   822c8:	d9014f17 	ldw	r4,1340(sp)
   822cc:	b00b883a 	mov	r5,r22
   822d0:	d9800c04 	addi	r6,sp,48
   822d4:	00814140 	call	81414 <__sprint_r>
   822d8:	103e1c1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   822dc:	dc800e17 	ldw	r18,56(sp)
   822e0:	dc400d17 	ldw	r17,52(sp)
   822e4:	d8c01904 	addi	r3,sp,100
   822e8:	003e2e06 	br	81ba4 <___vfprintf_internal_r+0x738>
   822ec:	d9414c17 	ldw	r5,1328(sp)
   822f0:	2880004c 	andi	r2,r5,1
   822f4:	1005003a 	cmpeq	r2,r2,zero
   822f8:	103dda1e 	bne	r2,zero,81a64 <___vfprintf_internal_r+0x5f8>
   822fc:	003e9f06 	br	81d7c <___vfprintf_internal_r+0x910>
   82300:	d8c14117 	ldw	r3,1284(sp)
   82304:	9125883a 	add	r18,r18,r4
   82308:	8c400044 	addi	r17,r17,1
   8230c:	008001c4 	movi	r2,7
   82310:	a8c00015 	stw	r3,0(r21)
   82314:	a9000115 	stw	r4,4(r21)
   82318:	dc800e15 	stw	r18,56(sp)
   8231c:	dc400d15 	stw	r17,52(sp)
   82320:	14426c16 	blt	r2,r17,82cd4 <___vfprintf_internal_r+0x1868>
   82324:	a8c00204 	addi	r3,r21,8
   82328:	d9414917 	ldw	r5,1316(sp)
   8232c:	00800044 	movi	r2,1
   82330:	94800044 	addi	r18,r18,1
   82334:	8c400044 	addi	r17,r17,1
   82338:	18800115 	stw	r2,4(r3)
   8233c:	008001c4 	movi	r2,7
   82340:	19400015 	stw	r5,0(r3)
   82344:	dc800e15 	stw	r18,56(sp)
   82348:	dc400d15 	stw	r17,52(sp)
   8234c:	2021883a 	mov	r16,r4
   82350:	14425616 	blt	r2,r17,82cac <___vfprintf_internal_r+0x1840>
   82354:	19400204 	addi	r5,r3,8
   82358:	d9814717 	ldw	r6,1308(sp)
   8235c:	8c400044 	addi	r17,r17,1
   82360:	dc400d15 	stw	r17,52(sp)
   82364:	3107c83a 	sub	r3,r6,r4
   82368:	d9014117 	ldw	r4,1284(sp)
   8236c:	90e5883a 	add	r18,r18,r3
   82370:	28c00115 	stw	r3,4(r5)
   82374:	8105883a 	add	r2,r16,r4
   82378:	28800015 	stw	r2,0(r5)
   8237c:	008001c4 	movi	r2,7
   82380:	dc800e15 	stw	r18,56(sp)
   82384:	147f1d16 	blt	r2,r17,81ffc <___vfprintf_internal_r+0xb90>
   82388:	28c00204 	addi	r3,r5,8
   8238c:	003db506 	br	81a64 <___vfprintf_internal_r+0x5f8>
   82390:	3c000017 	ldw	r16,0(r7)
   82394:	3c400117 	ldw	r17,4(r7)
   82398:	39800204 	addi	r6,r7,8
   8239c:	01000044 	movi	r4,1
   823a0:	d9814015 	stw	r6,1280(sp)
   823a4:	d8000405 	stb	zero,16(sp)
   823a8:	003ebe06 	br	81ea4 <___vfprintf_internal_r+0xa38>
   823ac:	3c000017 	ldw	r16,0(r7)
   823b0:	3c400117 	ldw	r17,4(r7)
   823b4:	38800204 	addi	r2,r7,8
   823b8:	d8814015 	stw	r2,1280(sp)
   823bc:	003eb706 	br	81e9c <___vfprintf_internal_r+0xa30>
   823c0:	3c000017 	ldw	r16,0(r7)
   823c4:	3c400117 	ldw	r17,4(r7)
   823c8:	39000204 	addi	r4,r7,8
   823cc:	d9014015 	stw	r4,1280(sp)
   823d0:	0009883a 	mov	r4,zero
   823d4:	d8000405 	stb	zero,16(sp)
   823d8:	003eb206 	br	81ea4 <___vfprintf_internal_r+0xa38>
   823dc:	38c00017 	ldw	r3,0(r7)
   823e0:	39c00104 	addi	r7,r7,4
   823e4:	d8c14a15 	stw	r3,1320(sp)
   823e8:	1800d70e 	bge	r3,zero,82748 <___vfprintf_internal_r+0x12dc>
   823ec:	00c7c83a 	sub	r3,zero,r3
   823f0:	d8c14a15 	stw	r3,1320(sp)
   823f4:	d9014c17 	ldw	r4,1328(sp)
   823f8:	b8c00007 	ldb	r3,0(r23)
   823fc:	21000114 	ori	r4,r4,4
   82400:	d9014c15 	stw	r4,1328(sp)
   82404:	003c9806 	br	81668 <___vfprintf_internal_r+0x1fc>
   82408:	d9814c17 	ldw	r6,1328(sp)
   8240c:	3080080c 	andi	r2,r6,32
   82410:	1001f626 	beq	r2,zero,82bec <___vfprintf_internal_r+0x1780>
   82414:	d9014b17 	ldw	r4,1324(sp)
   82418:	38800017 	ldw	r2,0(r7)
   8241c:	39c00104 	addi	r7,r7,4
   82420:	d9c14015 	stw	r7,1280(sp)
   82424:	2007d7fa 	srai	r3,r4,31
   82428:	d9c14017 	ldw	r7,1280(sp)
   8242c:	11000015 	stw	r4,0(r2)
   82430:	10c00115 	stw	r3,4(r2)
   82434:	003c6906 	br	815dc <___vfprintf_internal_r+0x170>
   82438:	b8c00007 	ldb	r3,0(r23)
   8243c:	00801b04 	movi	r2,108
   82440:	18825526 	beq	r3,r2,82d98 <___vfprintf_internal_r+0x192c>
   82444:	d9414c17 	ldw	r5,1328(sp)
   82448:	29400414 	ori	r5,r5,16
   8244c:	d9414c15 	stw	r5,1328(sp)
   82450:	003c8506 	br	81668 <___vfprintf_internal_r+0x1fc>
   82454:	d9814c17 	ldw	r6,1328(sp)
   82458:	b8c00007 	ldb	r3,0(r23)
   8245c:	31800814 	ori	r6,r6,32
   82460:	d9814c15 	stw	r6,1328(sp)
   82464:	003c8006 	br	81668 <___vfprintf_internal_r+0x1fc>
   82468:	d8814c17 	ldw	r2,1328(sp)
   8246c:	3c000017 	ldw	r16,0(r7)
   82470:	00c01e04 	movi	r3,120
   82474:	10800094 	ori	r2,r2,2
   82478:	d8814c15 	stw	r2,1328(sp)
   8247c:	39c00104 	addi	r7,r7,4
   82480:	01400274 	movhi	r5,9
   82484:	29772804 	addi	r5,r5,-9056
   82488:	00800c04 	movi	r2,48
   8248c:	0023883a 	mov	r17,zero
   82490:	01000084 	movi	r4,2
   82494:	d9c14015 	stw	r7,1280(sp)
   82498:	d8c14d15 	stw	r3,1332(sp)
   8249c:	d9414415 	stw	r5,1296(sp)
   824a0:	d8800445 	stb	r2,17(sp)
   824a4:	d8c00485 	stb	r3,18(sp)
   824a8:	d8000405 	stb	zero,16(sp)
   824ac:	003e7d06 	br	81ea4 <___vfprintf_internal_r+0xa38>
   824b0:	d8814c17 	ldw	r2,1328(sp)
   824b4:	b8c00007 	ldb	r3,0(r23)
   824b8:	10801014 	ori	r2,r2,64
   824bc:	d8814c15 	stw	r2,1328(sp)
   824c0:	003c6906 	br	81668 <___vfprintf_internal_r+0x1fc>
   824c4:	d9414c17 	ldw	r5,1328(sp)
   824c8:	2880020c 	andi	r2,r5,8
   824cc:	1001e526 	beq	r2,zero,82c64 <___vfprintf_internal_r+0x17f8>
   824d0:	39800017 	ldw	r6,0(r7)
   824d4:	38800204 	addi	r2,r7,8
   824d8:	d8814015 	stw	r2,1280(sp)
   824dc:	d9814215 	stw	r6,1288(sp)
   824e0:	39c00117 	ldw	r7,4(r7)
   824e4:	d9c14315 	stw	r7,1292(sp)
   824e8:	d9014217 	ldw	r4,1288(sp)
   824ec:	d9414317 	ldw	r5,1292(sp)
   824f0:	00881080 	call	88108 <__isinfd>
   824f4:	10021d26 	beq	r2,zero,82d6c <___vfprintf_internal_r+0x1900>
   824f8:	d9014217 	ldw	r4,1288(sp)
   824fc:	d9414317 	ldw	r5,1292(sp)
   82500:	000d883a 	mov	r6,zero
   82504:	000f883a 	mov	r7,zero
   82508:	008a3f00 	call	8a3f0 <__ltdf2>
   8250c:	1002d016 	blt	r2,zero,83050 <___vfprintf_internal_r+0x1be4>
   82510:	d9414d17 	ldw	r5,1332(sp)
   82514:	008011c4 	movi	r2,71
   82518:	11421016 	blt	r2,r5,82d5c <___vfprintf_internal_r+0x18f0>
   8251c:	01800274 	movhi	r6,9
   82520:	31b72d04 	addi	r6,r6,-9036
   82524:	d9814115 	stw	r6,1284(sp)
   82528:	d9014c17 	ldw	r4,1328(sp)
   8252c:	00c000c4 	movi	r3,3
   82530:	00bfdfc4 	movi	r2,-129
   82534:	2088703a 	and	r4,r4,r2
   82538:	180f883a 	mov	r7,r3
   8253c:	d8c14515 	stw	r3,1300(sp)
   82540:	d9014c15 	stw	r4,1328(sp)
   82544:	d8014615 	stw	zero,1304(sp)
   82548:	003e6a06 	br	81ef4 <___vfprintf_internal_r+0xa88>
   8254c:	38800017 	ldw	r2,0(r7)
   82550:	00c00044 	movi	r3,1
   82554:	39c00104 	addi	r7,r7,4
   82558:	d9c14015 	stw	r7,1280(sp)
   8255c:	d9000f04 	addi	r4,sp,60
   82560:	180f883a 	mov	r7,r3
   82564:	d8c14515 	stw	r3,1300(sp)
   82568:	d9014115 	stw	r4,1284(sp)
   8256c:	d8800f05 	stb	r2,60(sp)
   82570:	d8000405 	stb	zero,16(sp)
   82574:	003cac06 	br	81828 <___vfprintf_internal_r+0x3bc>
   82578:	01400274 	movhi	r5,9
   8257c:	29773304 	addi	r5,r5,-9012
   82580:	d9414415 	stw	r5,1296(sp)
   82584:	d9814c17 	ldw	r6,1328(sp)
   82588:	3080080c 	andi	r2,r6,32
   8258c:	1000ff26 	beq	r2,zero,8298c <___vfprintf_internal_r+0x1520>
   82590:	3c000017 	ldw	r16,0(r7)
   82594:	3c400117 	ldw	r17,4(r7)
   82598:	38800204 	addi	r2,r7,8
   8259c:	d8814015 	stw	r2,1280(sp)
   825a0:	d9414c17 	ldw	r5,1328(sp)
   825a4:	2880004c 	andi	r2,r5,1
   825a8:	1005003a 	cmpeq	r2,r2,zero
   825ac:	1000b91e 	bne	r2,zero,82894 <___vfprintf_internal_r+0x1428>
   825b0:	8444b03a 	or	r2,r16,r17
   825b4:	1000b726 	beq	r2,zero,82894 <___vfprintf_internal_r+0x1428>
   825b8:	d9814d17 	ldw	r6,1332(sp)
   825bc:	29400094 	ori	r5,r5,2
   825c0:	00800c04 	movi	r2,48
   825c4:	01000084 	movi	r4,2
   825c8:	d9414c15 	stw	r5,1328(sp)
   825cc:	d8800445 	stb	r2,17(sp)
   825d0:	d9800485 	stb	r6,18(sp)
   825d4:	d8000405 	stb	zero,16(sp)
   825d8:	003e3206 	br	81ea4 <___vfprintf_internal_r+0xa38>
   825dc:	01800274 	movhi	r6,9
   825e0:	31b72804 	addi	r6,r6,-9056
   825e4:	d9814415 	stw	r6,1296(sp)
   825e8:	003fe606 	br	82584 <___vfprintf_internal_r+0x1118>
   825ec:	00800ac4 	movi	r2,43
   825f0:	d8800405 	stb	r2,16(sp)
   825f4:	b8c00007 	ldb	r3,0(r23)
   825f8:	003c1b06 	br	81668 <___vfprintf_internal_r+0x1fc>
   825fc:	d8814c17 	ldw	r2,1328(sp)
   82600:	b8c00007 	ldb	r3,0(r23)
   82604:	10800054 	ori	r2,r2,1
   82608:	d8814c15 	stw	r2,1328(sp)
   8260c:	003c1606 	br	81668 <___vfprintf_internal_r+0x1fc>
   82610:	d8800407 	ldb	r2,16(sp)
   82614:	10004c1e 	bne	r2,zero,82748 <___vfprintf_internal_r+0x12dc>
   82618:	00800804 	movi	r2,32
   8261c:	d8800405 	stb	r2,16(sp)
   82620:	b8c00007 	ldb	r3,0(r23)
   82624:	003c1006 	br	81668 <___vfprintf_internal_r+0x1fc>
   82628:	d9814c17 	ldw	r6,1328(sp)
   8262c:	b8c00007 	ldb	r3,0(r23)
   82630:	31800214 	ori	r6,r6,8
   82634:	d9814c15 	stw	r6,1328(sp)
   82638:	003c0b06 	br	81668 <___vfprintf_internal_r+0x1fc>
   8263c:	0009883a 	mov	r4,zero
   82640:	04000244 	movi	r16,9
   82644:	01400284 	movi	r5,10
   82648:	d9c15115 	stw	r7,1348(sp)
   8264c:	00812180 	call	81218 <__mulsi3>
   82650:	b9000007 	ldb	r4,0(r23)
   82654:	d8c14d17 	ldw	r3,1332(sp)
   82658:	bdc00044 	addi	r23,r23,1
   8265c:	d9014d15 	stw	r4,1332(sp)
   82660:	d9414d17 	ldw	r5,1332(sp)
   82664:	1885883a 	add	r2,r3,r2
   82668:	113ff404 	addi	r4,r2,-48
   8266c:	28bff404 	addi	r2,r5,-48
   82670:	d9c15117 	ldw	r7,1348(sp)
   82674:	80bff32e 	bgeu	r16,r2,82644 <___vfprintf_internal_r+0x11d8>
   82678:	d9014a15 	stw	r4,1320(sp)
   8267c:	003bfc06 	br	81670 <___vfprintf_internal_r+0x204>
   82680:	d8814c17 	ldw	r2,1328(sp)
   82684:	b8c00007 	ldb	r3,0(r23)
   82688:	10802014 	ori	r2,r2,128
   8268c:	d8814c15 	stw	r2,1328(sp)
   82690:	003bf506 	br	81668 <___vfprintf_internal_r+0x1fc>
   82694:	b8c00007 	ldb	r3,0(r23)
   82698:	00800a84 	movi	r2,42
   8269c:	bdc00044 	addi	r23,r23,1
   826a0:	18831826 	beq	r3,r2,83304 <___vfprintf_internal_r+0x1e98>
   826a4:	d8c14d15 	stw	r3,1332(sp)
   826a8:	18bff404 	addi	r2,r3,-48
   826ac:	00c00244 	movi	r3,9
   826b0:	18827b36 	bltu	r3,r2,830a0 <___vfprintf_internal_r+0x1c34>
   826b4:	1821883a 	mov	r16,r3
   826b8:	0009883a 	mov	r4,zero
   826bc:	01400284 	movi	r5,10
   826c0:	d9c15115 	stw	r7,1348(sp)
   826c4:	00812180 	call	81218 <__mulsi3>
   826c8:	d9414d17 	ldw	r5,1332(sp)
   826cc:	b9800007 	ldb	r6,0(r23)
   826d0:	d9c15117 	ldw	r7,1348(sp)
   826d4:	1145883a 	add	r2,r2,r5
   826d8:	113ff404 	addi	r4,r2,-48
   826dc:	30bff404 	addi	r2,r6,-48
   826e0:	d9814d15 	stw	r6,1332(sp)
   826e4:	bdc00044 	addi	r23,r23,1
   826e8:	80bff42e 	bgeu	r16,r2,826bc <___vfprintf_internal_r+0x1250>
   826ec:	2027883a 	mov	r19,r4
   826f0:	203bdf0e 	bge	r4,zero,81670 <___vfprintf_internal_r+0x204>
   826f4:	04ffffc4 	movi	r19,-1
   826f8:	003bdd06 	br	81670 <___vfprintf_internal_r+0x204>
   826fc:	d8000405 	stb	zero,16(sp)
   82700:	39800017 	ldw	r6,0(r7)
   82704:	39c00104 	addi	r7,r7,4
   82708:	d9c14015 	stw	r7,1280(sp)
   8270c:	d9814115 	stw	r6,1284(sp)
   82710:	3001c926 	beq	r6,zero,82e38 <___vfprintf_internal_r+0x19cc>
   82714:	98000e16 	blt	r19,zero,82750 <___vfprintf_internal_r+0x12e4>
   82718:	d9014117 	ldw	r4,1284(sp)
   8271c:	000b883a 	mov	r5,zero
   82720:	980d883a 	mov	r6,r19
   82724:	00865a00 	call	865a0 <memchr>
   82728:	10025926 	beq	r2,zero,83090 <___vfprintf_internal_r+0x1c24>
   8272c:	d8c14117 	ldw	r3,1284(sp)
   82730:	10cfc83a 	sub	r7,r2,r3
   82734:	99c19e16 	blt	r19,r7,82db0 <___vfprintf_internal_r+0x1944>
   82738:	d9c14515 	stw	r7,1300(sp)
   8273c:	38000916 	blt	r7,zero,82764 <___vfprintf_internal_r+0x12f8>
   82740:	d8014615 	stw	zero,1304(sp)
   82744:	003deb06 	br	81ef4 <___vfprintf_internal_r+0xa88>
   82748:	b8c00007 	ldb	r3,0(r23)
   8274c:	003bc606 	br	81668 <___vfprintf_internal_r+0x1fc>
   82750:	d9014117 	ldw	r4,1284(sp)
   82754:	00813a00 	call	813a0 <strlen>
   82758:	d8814515 	stw	r2,1300(sp)
   8275c:	100f883a 	mov	r7,r2
   82760:	103ff70e 	bge	r2,zero,82740 <___vfprintf_internal_r+0x12d4>
   82764:	d8014515 	stw	zero,1300(sp)
   82768:	d8014615 	stw	zero,1304(sp)
   8276c:	003de106 	br	81ef4 <___vfprintf_internal_r+0xa88>
   82770:	20c03fcc 	andi	r3,r4,255
   82774:	00800044 	movi	r2,1
   82778:	18802d26 	beq	r3,r2,82830 <___vfprintf_internal_r+0x13c4>
   8277c:	18800e36 	bltu	r3,r2,827b8 <___vfprintf_internal_r+0x134c>
   82780:	00800084 	movi	r2,2
   82784:	1880fa26 	beq	r3,r2,82b70 <___vfprintf_internal_r+0x1704>
   82788:	01000274 	movhi	r4,9
   8278c:	21373804 	addi	r4,r4,-8992
   82790:	00813a00 	call	813a0 <strlen>
   82794:	100f883a 	mov	r7,r2
   82798:	dcc14515 	stw	r19,1300(sp)
   8279c:	9880010e 	bge	r19,r2,827a4 <___vfprintf_internal_r+0x1338>
   827a0:	d8814515 	stw	r2,1300(sp)
   827a4:	00800274 	movhi	r2,9
   827a8:	10b73804 	addi	r2,r2,-8992
   827ac:	dcc14615 	stw	r19,1304(sp)
   827b0:	d8814115 	stw	r2,1284(sp)
   827b4:	003dcf06 	br	81ef4 <___vfprintf_internal_r+0xa88>
   827b8:	d9401904 	addi	r5,sp,100
   827bc:	dd000f04 	addi	r20,sp,60
   827c0:	d9414115 	stw	r5,1284(sp)
   827c4:	880a977a 	slli	r5,r17,29
   827c8:	d9814117 	ldw	r6,1284(sp)
   827cc:	8004d0fa 	srli	r2,r16,3
   827d0:	8806d0fa 	srli	r3,r17,3
   827d4:	810001cc 	andi	r4,r16,7
   827d8:	2884b03a 	or	r2,r5,r2
   827dc:	31bfffc4 	addi	r6,r6,-1
   827e0:	21000c04 	addi	r4,r4,48
   827e4:	d9814115 	stw	r6,1284(sp)
   827e8:	10cab03a 	or	r5,r2,r3
   827ec:	31000005 	stb	r4,0(r6)
   827f0:	1021883a 	mov	r16,r2
   827f4:	1823883a 	mov	r17,r3
   827f8:	283ff21e 	bne	r5,zero,827c4 <___vfprintf_internal_r+0x1358>
   827fc:	d8c14c17 	ldw	r3,1328(sp)
   82800:	1880004c 	andi	r2,r3,1
   82804:	1005003a 	cmpeq	r2,r2,zero
   82808:	103db31e 	bne	r2,zero,81ed8 <___vfprintf_internal_r+0xa6c>
   8280c:	20803fcc 	andi	r2,r4,255
   82810:	1080201c 	xori	r2,r2,128
   82814:	10bfe004 	addi	r2,r2,-128
   82818:	00c00c04 	movi	r3,48
   8281c:	10fdae26 	beq	r2,r3,81ed8 <___vfprintf_internal_r+0xa6c>
   82820:	31bfffc4 	addi	r6,r6,-1
   82824:	d9814115 	stw	r6,1284(sp)
   82828:	30c00005 	stb	r3,0(r6)
   8282c:	003daa06 	br	81ed8 <___vfprintf_internal_r+0xa6c>
   82830:	88800068 	cmpgeui	r2,r17,1
   82834:	10002c1e 	bne	r2,zero,828e8 <___vfprintf_internal_r+0x147c>
   82838:	8800021e 	bne	r17,zero,82844 <___vfprintf_internal_r+0x13d8>
   8283c:	00800244 	movi	r2,9
   82840:	14002936 	bltu	r2,r16,828e8 <___vfprintf_internal_r+0x147c>
   82844:	d90018c4 	addi	r4,sp,99
   82848:	dd000f04 	addi	r20,sp,60
   8284c:	d9014115 	stw	r4,1284(sp)
   82850:	d9014117 	ldw	r4,1284(sp)
   82854:	80800c04 	addi	r2,r16,48
   82858:	20800005 	stb	r2,0(r4)
   8285c:	003d9e06 	br	81ed8 <___vfprintf_internal_r+0xa6c>
   82860:	dc400d17 	ldw	r17,52(sp)
   82864:	07000274 	movhi	fp,9
   82868:	e7373f84 	addi	fp,fp,-8962
   8286c:	9425883a 	add	r18,r18,r16
   82870:	8c400044 	addi	r17,r17,1
   82874:	008001c4 	movi	r2,7
   82878:	1f000015 	stw	fp,0(r3)
   8287c:	1c000115 	stw	r16,4(r3)
   82880:	dc800e15 	stw	r18,56(sp)
   82884:	dc400d15 	stw	r17,52(sp)
   82888:	147ddc16 	blt	r2,r17,81ffc <___vfprintf_internal_r+0xb90>
   8288c:	18c00204 	addi	r3,r3,8
   82890:	003c7406 	br	81a64 <___vfprintf_internal_r+0x5f8>
   82894:	01000084 	movi	r4,2
   82898:	d8000405 	stb	zero,16(sp)
   8289c:	003d8106 	br	81ea4 <___vfprintf_internal_r+0xa38>
   828a0:	d9814c17 	ldw	r6,1328(sp)
   828a4:	30c4703a 	and	r2,r6,r3
   828a8:	1005003a 	cmpeq	r2,r2,zero
   828ac:	103cb326 	beq	r2,zero,81b7c <___vfprintf_internal_r+0x710>
   828b0:	d9014117 	ldw	r4,1284(sp)
   828b4:	94800044 	addi	r18,r18,1
   828b8:	8c400044 	addi	r17,r17,1
   828bc:	008001c4 	movi	r2,7
   828c0:	a9000015 	stw	r4,0(r21)
   828c4:	a8c00115 	stw	r3,4(r21)
   828c8:	dc800e15 	stw	r18,56(sp)
   828cc:	dc400d15 	stw	r17,52(sp)
   828d0:	147e6016 	blt	r2,r17,82254 <___vfprintf_internal_r+0xde8>
   828d4:	acc00204 	addi	r19,r21,8
   828d8:	003cd106 	br	81c20 <___vfprintf_internal_r+0x7b4>
   828dc:	07000274 	movhi	fp,9
   828e0:	e7373f84 	addi	fp,fp,-8962
   828e4:	003c4906 	br	81a0c <___vfprintf_internal_r+0x5a0>
   828e8:	dd000f04 	addi	r20,sp,60
   828ec:	dc801904 	addi	r18,sp,100
   828f0:	8009883a 	mov	r4,r16
   828f4:	880b883a 	mov	r5,r17
   828f8:	01800284 	movi	r6,10
   828fc:	000f883a 	mov	r7,zero
   82900:	00890500 	call	89050 <__umoddi3>
   82904:	12000c04 	addi	r8,r2,48
   82908:	94bfffc4 	addi	r18,r18,-1
   8290c:	8009883a 	mov	r4,r16
   82910:	880b883a 	mov	r5,r17
   82914:	01800284 	movi	r6,10
   82918:	000f883a 	mov	r7,zero
   8291c:	92000005 	stb	r8,0(r18)
   82920:	00889e40 	call	889e4 <__udivdi3>
   82924:	1009883a 	mov	r4,r2
   82928:	1021883a 	mov	r16,r2
   8292c:	18800068 	cmpgeui	r2,r3,1
   82930:	1823883a 	mov	r17,r3
   82934:	103fee1e 	bne	r2,zero,828f0 <___vfprintf_internal_r+0x1484>
   82938:	1800021e 	bne	r3,zero,82944 <___vfprintf_internal_r+0x14d8>
   8293c:	00800244 	movi	r2,9
   82940:	113feb36 	bltu	r2,r4,828f0 <___vfprintf_internal_r+0x1484>
   82944:	94bfffc4 	addi	r18,r18,-1
   82948:	dc814115 	stw	r18,1284(sp)
   8294c:	003fc006 	br	82850 <___vfprintf_internal_r+0x13e4>
   82950:	d9014c17 	ldw	r4,1328(sp)
   82954:	2080004c 	andi	r2,r4,1
   82958:	10009a1e 	bne	r2,zero,82bc4 <___vfprintf_internal_r+0x1758>
   8295c:	d9401904 	addi	r5,sp,100
   82960:	dd000f04 	addi	r20,sp,60
   82964:	d9414115 	stw	r5,1284(sp)
   82968:	003d5b06 	br	81ed8 <___vfprintf_internal_r+0xa6c>
   8296c:	d9014f17 	ldw	r4,1340(sp)
   82970:	b00b883a 	mov	r5,r22
   82974:	d9800c04 	addi	r6,sp,48
   82978:	00814140 	call	81414 <__sprint_r>
   8297c:	103c731e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82980:	dc800e17 	ldw	r18,56(sp)
   82984:	d8c01904 	addi	r3,sp,100
   82988:	003cf906 	br	81d70 <___vfprintf_internal_r+0x904>
   8298c:	d8c14c17 	ldw	r3,1328(sp)
   82990:	1880040c 	andi	r2,r3,16
   82994:	1000711e 	bne	r2,zero,82b5c <___vfprintf_internal_r+0x16f0>
   82998:	d9014c17 	ldw	r4,1328(sp)
   8299c:	2080100c 	andi	r2,r4,64
   829a0:	10006e26 	beq	r2,zero,82b5c <___vfprintf_internal_r+0x16f0>
   829a4:	3c00000b 	ldhu	r16,0(r7)
   829a8:	0023883a 	mov	r17,zero
   829ac:	39c00104 	addi	r7,r7,4
   829b0:	d9c14015 	stw	r7,1280(sp)
   829b4:	003efa06 	br	825a0 <___vfprintf_internal_r+0x1134>
   829b8:	dc400d17 	ldw	r17,52(sp)
   829bc:	07000274 	movhi	fp,9
   829c0:	e7373f84 	addi	fp,fp,-8962
   829c4:	9425883a 	add	r18,r18,r16
   829c8:	8c400044 	addi	r17,r17,1
   829cc:	008001c4 	movi	r2,7
   829d0:	1f000015 	stw	fp,0(r3)
   829d4:	1c000115 	stw	r16,4(r3)
   829d8:	dc800e15 	stw	r18,56(sp)
   829dc:	dc400d15 	stw	r17,52(sp)
   829e0:	147d7016 	blt	r2,r17,81fa4 <___vfprintf_internal_r+0xb38>
   829e4:	18c00204 	addi	r3,r3,8
   829e8:	003d7506 	br	81fc0 <___vfprintf_internal_r+0xb54>
   829ec:	dc800e17 	ldw	r18,56(sp)
   829f0:	dc400d17 	ldw	r17,52(sp)
   829f4:	07000274 	movhi	fp,9
   829f8:	e7374384 	addi	fp,fp,-8946
   829fc:	003bba06 	br	818e8 <___vfprintf_internal_r+0x47c>
   82a00:	d9014f17 	ldw	r4,1340(sp)
   82a04:	b00b883a 	mov	r5,r22
   82a08:	d9800c04 	addi	r6,sp,48
   82a0c:	00814140 	call	81414 <__sprint_r>
   82a10:	103c4e1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82a14:	dc800e17 	ldw	r18,56(sp)
   82a18:	d8c01904 	addi	r3,sp,100
   82a1c:	003ce306 	br	81dac <___vfprintf_internal_r+0x940>
   82a20:	3c000017 	ldw	r16,0(r7)
   82a24:	0009883a 	mov	r4,zero
   82a28:	39c00104 	addi	r7,r7,4
   82a2c:	0023883a 	mov	r17,zero
   82a30:	d9c14015 	stw	r7,1280(sp)
   82a34:	d8000405 	stb	zero,16(sp)
   82a38:	003d1a06 	br	81ea4 <___vfprintf_internal_r+0xa38>
   82a3c:	38800017 	ldw	r2,0(r7)
   82a40:	39c00104 	addi	r7,r7,4
   82a44:	d9c14015 	stw	r7,1280(sp)
   82a48:	1023d7fa 	srai	r17,r2,31
   82a4c:	1021883a 	mov	r16,r2
   82a50:	003d1206 	br	81e9c <___vfprintf_internal_r+0xa30>
   82a54:	3c000017 	ldw	r16,0(r7)
   82a58:	01000044 	movi	r4,1
   82a5c:	39c00104 	addi	r7,r7,4
   82a60:	0023883a 	mov	r17,zero
   82a64:	d9c14015 	stw	r7,1280(sp)
   82a68:	d8000405 	stb	zero,16(sp)
   82a6c:	003d0d06 	br	81ea4 <___vfprintf_internal_r+0xa38>
   82a70:	00800274 	movhi	r2,9
   82a74:	10b73f04 	addi	r2,r2,-8964
   82a78:	94800044 	addi	r18,r18,1
   82a7c:	8c400044 	addi	r17,r17,1
   82a80:	a8800015 	stw	r2,0(r21)
   82a84:	00c00044 	movi	r3,1
   82a88:	008001c4 	movi	r2,7
   82a8c:	a8c00115 	stw	r3,4(r21)
   82a90:	dc800e15 	stw	r18,56(sp)
   82a94:	dc400d15 	stw	r17,52(sp)
   82a98:	1440ca16 	blt	r2,r17,82dc4 <___vfprintf_internal_r+0x1958>
   82a9c:	a8c00204 	addi	r3,r21,8
   82aa0:	2000061e 	bne	r4,zero,82abc <___vfprintf_internal_r+0x1650>
   82aa4:	d9414717 	ldw	r5,1308(sp)
   82aa8:	2800041e 	bne	r5,zero,82abc <___vfprintf_internal_r+0x1650>
   82aac:	d9814c17 	ldw	r6,1328(sp)
   82ab0:	3080004c 	andi	r2,r6,1
   82ab4:	1005003a 	cmpeq	r2,r2,zero
   82ab8:	103bea1e 	bne	r2,zero,81a64 <___vfprintf_internal_r+0x5f8>
   82abc:	00800044 	movi	r2,1
   82ac0:	dc400d17 	ldw	r17,52(sp)
   82ac4:	18800115 	stw	r2,4(r3)
   82ac8:	d8814917 	ldw	r2,1316(sp)
   82acc:	94800044 	addi	r18,r18,1
   82ad0:	8c400044 	addi	r17,r17,1
   82ad4:	18800015 	stw	r2,0(r3)
   82ad8:	008001c4 	movi	r2,7
   82adc:	dc800e15 	stw	r18,56(sp)
   82ae0:	dc400d15 	stw	r17,52(sp)
   82ae4:	1440ca16 	blt	r2,r17,82e10 <___vfprintf_internal_r+0x19a4>
   82ae8:	18c00204 	addi	r3,r3,8
   82aec:	0121c83a 	sub	r16,zero,r4
   82af0:	0400500e 	bge	zero,r16,82c34 <___vfprintf_internal_r+0x17c8>
   82af4:	00800404 	movi	r2,16
   82af8:	1400800e 	bge	r2,r16,82cfc <___vfprintf_internal_r+0x1890>
   82afc:	1027883a 	mov	r19,r2
   82b00:	07000274 	movhi	fp,9
   82b04:	e7373f84 	addi	fp,fp,-8962
   82b08:	050001c4 	movi	r20,7
   82b0c:	00000306 	br	82b1c <___vfprintf_internal_r+0x16b0>
   82b10:	18c00204 	addi	r3,r3,8
   82b14:	843ffc04 	addi	r16,r16,-16
   82b18:	9c007a0e 	bge	r19,r16,82d04 <___vfprintf_internal_r+0x1898>
   82b1c:	94800404 	addi	r18,r18,16
   82b20:	8c400044 	addi	r17,r17,1
   82b24:	1f000015 	stw	fp,0(r3)
   82b28:	1cc00115 	stw	r19,4(r3)
   82b2c:	dc800e15 	stw	r18,56(sp)
   82b30:	dc400d15 	stw	r17,52(sp)
   82b34:	a47ff60e 	bge	r20,r17,82b10 <___vfprintf_internal_r+0x16a4>
   82b38:	d9014f17 	ldw	r4,1340(sp)
   82b3c:	b00b883a 	mov	r5,r22
   82b40:	d9800c04 	addi	r6,sp,48
   82b44:	00814140 	call	81414 <__sprint_r>
   82b48:	103c001e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82b4c:	dc800e17 	ldw	r18,56(sp)
   82b50:	dc400d17 	ldw	r17,52(sp)
   82b54:	d8c01904 	addi	r3,sp,100
   82b58:	003fee06 	br	82b14 <___vfprintf_internal_r+0x16a8>
   82b5c:	3c000017 	ldw	r16,0(r7)
   82b60:	0023883a 	mov	r17,zero
   82b64:	39c00104 	addi	r7,r7,4
   82b68:	d9c14015 	stw	r7,1280(sp)
   82b6c:	003e8c06 	br	825a0 <___vfprintf_internal_r+0x1134>
   82b70:	d9401904 	addi	r5,sp,100
   82b74:	dd000f04 	addi	r20,sp,60
   82b78:	d9414115 	stw	r5,1284(sp)
   82b7c:	d9814417 	ldw	r6,1296(sp)
   82b80:	880a973a 	slli	r5,r17,28
   82b84:	8004d13a 	srli	r2,r16,4
   82b88:	810003cc 	andi	r4,r16,15
   82b8c:	3109883a 	add	r4,r6,r4
   82b90:	2884b03a 	or	r2,r5,r2
   82b94:	21400003 	ldbu	r5,0(r4)
   82b98:	d9014117 	ldw	r4,1284(sp)
   82b9c:	8806d13a 	srli	r3,r17,4
   82ba0:	1021883a 	mov	r16,r2
   82ba4:	213fffc4 	addi	r4,r4,-1
   82ba8:	d9014115 	stw	r4,1284(sp)
   82bac:	d9814117 	ldw	r6,1284(sp)
   82bb0:	10c8b03a 	or	r4,r2,r3
   82bb4:	1823883a 	mov	r17,r3
   82bb8:	31400005 	stb	r5,0(r6)
   82bbc:	203fef1e 	bne	r4,zero,82b7c <___vfprintf_internal_r+0x1710>
   82bc0:	003cc506 	br	81ed8 <___vfprintf_internal_r+0xa6c>
   82bc4:	00800c04 	movi	r2,48
   82bc8:	d98018c4 	addi	r6,sp,99
   82bcc:	dd000f04 	addi	r20,sp,60
   82bd0:	d88018c5 	stb	r2,99(sp)
   82bd4:	d9814115 	stw	r6,1284(sp)
   82bd8:	003cbf06 	br	81ed8 <___vfprintf_internal_r+0xa6c>
   82bdc:	dc400d17 	ldw	r17,52(sp)
   82be0:	07000274 	movhi	fp,9
   82be4:	e7374384 	addi	fp,fp,-8946
   82be8:	003bc106 	br	81af0 <___vfprintf_internal_r+0x684>
   82bec:	d9414c17 	ldw	r5,1328(sp)
   82bf0:	2880040c 	andi	r2,r5,16
   82bf4:	10007c26 	beq	r2,zero,82de8 <___vfprintf_internal_r+0x197c>
   82bf8:	38800017 	ldw	r2,0(r7)
   82bfc:	39c00104 	addi	r7,r7,4
   82c00:	d9c14015 	stw	r7,1280(sp)
   82c04:	d9814b17 	ldw	r6,1324(sp)
   82c08:	d9c14017 	ldw	r7,1280(sp)
   82c0c:	11800015 	stw	r6,0(r2)
   82c10:	003a7206 	br	815dc <___vfprintf_internal_r+0x170>
   82c14:	d9014f17 	ldw	r4,1340(sp)
   82c18:	b00b883a 	mov	r5,r22
   82c1c:	d9800c04 	addi	r6,sp,48
   82c20:	00814140 	call	81414 <__sprint_r>
   82c24:	103bc91e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82c28:	dc800e17 	ldw	r18,56(sp)
   82c2c:	dc400d17 	ldw	r17,52(sp)
   82c30:	d8c01904 	addi	r3,sp,100
   82c34:	d9014717 	ldw	r4,1308(sp)
   82c38:	d9414117 	ldw	r5,1284(sp)
   82c3c:	8c400044 	addi	r17,r17,1
   82c40:	9125883a 	add	r18,r18,r4
   82c44:	008001c4 	movi	r2,7
   82c48:	19400015 	stw	r5,0(r3)
   82c4c:	19000115 	stw	r4,4(r3)
   82c50:	dc800e15 	stw	r18,56(sp)
   82c54:	dc400d15 	stw	r17,52(sp)
   82c58:	147ce816 	blt	r2,r17,81ffc <___vfprintf_internal_r+0xb90>
   82c5c:	18c00204 	addi	r3,r3,8
   82c60:	003b8006 	br	81a64 <___vfprintf_internal_r+0x5f8>
   82c64:	38c00017 	ldw	r3,0(r7)
   82c68:	39000204 	addi	r4,r7,8
   82c6c:	d9014015 	stw	r4,1280(sp)
   82c70:	d8c14215 	stw	r3,1288(sp)
   82c74:	39c00117 	ldw	r7,4(r7)
   82c78:	d9c14315 	stw	r7,1292(sp)
   82c7c:	003e1a06 	br	824e8 <___vfprintf_internal_r+0x107c>
   82c80:	0005883a 	mov	r2,zero
   82c84:	1409c83a 	sub	r4,r2,r16
   82c88:	1105803a 	cmpltu	r2,r2,r4
   82c8c:	044bc83a 	sub	r5,zero,r17
   82c90:	2885c83a 	sub	r2,r5,r2
   82c94:	2021883a 	mov	r16,r4
   82c98:	1023883a 	mov	r17,r2
   82c9c:	01000044 	movi	r4,1
   82ca0:	00800b44 	movi	r2,45
   82ca4:	d8800405 	stb	r2,16(sp)
   82ca8:	003c7e06 	br	81ea4 <___vfprintf_internal_r+0xa38>
   82cac:	d9014f17 	ldw	r4,1340(sp)
   82cb0:	b00b883a 	mov	r5,r22
   82cb4:	d9800c04 	addi	r6,sp,48
   82cb8:	00814140 	call	81414 <__sprint_r>
   82cbc:	103ba31e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82cc0:	dc800e17 	ldw	r18,56(sp)
   82cc4:	dc400d17 	ldw	r17,52(sp)
   82cc8:	d9000517 	ldw	r4,20(sp)
   82ccc:	d9401904 	addi	r5,sp,100
   82cd0:	003da106 	br	82358 <___vfprintf_internal_r+0xeec>
   82cd4:	d9014f17 	ldw	r4,1340(sp)
   82cd8:	b00b883a 	mov	r5,r22
   82cdc:	d9800c04 	addi	r6,sp,48
   82ce0:	00814140 	call	81414 <__sprint_r>
   82ce4:	103b991e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82ce8:	dc800e17 	ldw	r18,56(sp)
   82cec:	dc400d17 	ldw	r17,52(sp)
   82cf0:	d9000517 	ldw	r4,20(sp)
   82cf4:	d8c01904 	addi	r3,sp,100
   82cf8:	003d8b06 	br	82328 <___vfprintf_internal_r+0xebc>
   82cfc:	07000274 	movhi	fp,9
   82d00:	e7373f84 	addi	fp,fp,-8962
   82d04:	9425883a 	add	r18,r18,r16
   82d08:	8c400044 	addi	r17,r17,1
   82d0c:	008001c4 	movi	r2,7
   82d10:	1f000015 	stw	fp,0(r3)
   82d14:	1c000115 	stw	r16,4(r3)
   82d18:	dc800e15 	stw	r18,56(sp)
   82d1c:	dc400d15 	stw	r17,52(sp)
   82d20:	147fbc16 	blt	r2,r17,82c14 <___vfprintf_internal_r+0x17a8>
   82d24:	18c00204 	addi	r3,r3,8
   82d28:	003fc206 	br	82c34 <___vfprintf_internal_r+0x17c8>
   82d2c:	d9014f17 	ldw	r4,1340(sp)
   82d30:	b00b883a 	mov	r5,r22
   82d34:	d9800c04 	addi	r6,sp,48
   82d38:	00814140 	call	81414 <__sprint_r>
   82d3c:	103b831e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82d40:	dc800e17 	ldw	r18,56(sp)
   82d44:	d9000517 	ldw	r4,20(sp)
   82d48:	d8c01904 	addi	r3,sp,100
   82d4c:	003cfc06 	br	82140 <___vfprintf_internal_r+0xcd4>
   82d50:	07000274 	movhi	fp,9
   82d54:	e7373f84 	addi	fp,fp,-8962
   82d58:	003bde06 	br	81cd4 <___vfprintf_internal_r+0x868>
   82d5c:	00800274 	movhi	r2,9
   82d60:	10b72e04 	addi	r2,r2,-9032
   82d64:	d8814115 	stw	r2,1284(sp)
   82d68:	003def06 	br	82528 <___vfprintf_internal_r+0x10bc>
   82d6c:	d9014217 	ldw	r4,1288(sp)
   82d70:	d9414317 	ldw	r5,1292(sp)
   82d74:	00881480 	call	88148 <__isnand>
   82d78:	10003926 	beq	r2,zero,82e60 <___vfprintf_internal_r+0x19f4>
   82d7c:	d9414d17 	ldw	r5,1332(sp)
   82d80:	008011c4 	movi	r2,71
   82d84:	1140ce16 	blt	r2,r5,830c0 <___vfprintf_internal_r+0x1c54>
   82d88:	01800274 	movhi	r6,9
   82d8c:	31b72f04 	addi	r6,r6,-9028
   82d90:	d9814115 	stw	r6,1284(sp)
   82d94:	003de406 	br	82528 <___vfprintf_internal_r+0x10bc>
   82d98:	d9014c17 	ldw	r4,1328(sp)
   82d9c:	bdc00044 	addi	r23,r23,1
   82da0:	b8c00007 	ldb	r3,0(r23)
   82da4:	21000814 	ori	r4,r4,32
   82da8:	d9014c15 	stw	r4,1328(sp)
   82dac:	003a2e06 	br	81668 <___vfprintf_internal_r+0x1fc>
   82db0:	dcc14515 	stw	r19,1300(sp)
   82db4:	98011016 	blt	r19,zero,831f8 <___vfprintf_internal_r+0x1d8c>
   82db8:	980f883a 	mov	r7,r19
   82dbc:	d8014615 	stw	zero,1304(sp)
   82dc0:	003c4c06 	br	81ef4 <___vfprintf_internal_r+0xa88>
   82dc4:	d9014f17 	ldw	r4,1340(sp)
   82dc8:	b00b883a 	mov	r5,r22
   82dcc:	d9800c04 	addi	r6,sp,48
   82dd0:	00814140 	call	81414 <__sprint_r>
   82dd4:	103b5d1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82dd8:	dc800e17 	ldw	r18,56(sp)
   82ddc:	d9000517 	ldw	r4,20(sp)
   82de0:	d8c01904 	addi	r3,sp,100
   82de4:	003f2e06 	br	82aa0 <___vfprintf_internal_r+0x1634>
   82de8:	d8c14c17 	ldw	r3,1328(sp)
   82dec:	1880100c 	andi	r2,r3,64
   82df0:	1000a026 	beq	r2,zero,83074 <___vfprintf_internal_r+0x1c08>
   82df4:	38800017 	ldw	r2,0(r7)
   82df8:	39c00104 	addi	r7,r7,4
   82dfc:	d9c14015 	stw	r7,1280(sp)
   82e00:	d9014b17 	ldw	r4,1324(sp)
   82e04:	d9c14017 	ldw	r7,1280(sp)
   82e08:	1100000d 	sth	r4,0(r2)
   82e0c:	0039f306 	br	815dc <___vfprintf_internal_r+0x170>
   82e10:	d9014f17 	ldw	r4,1340(sp)
   82e14:	b00b883a 	mov	r5,r22
   82e18:	d9800c04 	addi	r6,sp,48
   82e1c:	00814140 	call	81414 <__sprint_r>
   82e20:	103b4a1e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   82e24:	dc800e17 	ldw	r18,56(sp)
   82e28:	dc400d17 	ldw	r17,52(sp)
   82e2c:	d9000517 	ldw	r4,20(sp)
   82e30:	d8c01904 	addi	r3,sp,100
   82e34:	003f2d06 	br	82aec <___vfprintf_internal_r+0x1680>
   82e38:	00800184 	movi	r2,6
   82e3c:	14c09a36 	bltu	r2,r19,830a8 <___vfprintf_internal_r+0x1c3c>
   82e40:	dcc14515 	stw	r19,1300(sp)
   82e44:	9800010e 	bge	r19,zero,82e4c <___vfprintf_internal_r+0x19e0>
   82e48:	d8014515 	stw	zero,1300(sp)
   82e4c:	00800274 	movhi	r2,9
   82e50:	10b73104 	addi	r2,r2,-9020
   82e54:	980f883a 	mov	r7,r19
   82e58:	d8814115 	stw	r2,1284(sp)
   82e5c:	003a7206 	br	81828 <___vfprintf_internal_r+0x3bc>
   82e60:	00bfffc4 	movi	r2,-1
   82e64:	9880e226 	beq	r19,r2,831f0 <___vfprintf_internal_r+0x1d84>
   82e68:	d9414d17 	ldw	r5,1332(sp)
   82e6c:	008019c4 	movi	r2,103
   82e70:	2880dc26 	beq	r5,r2,831e4 <___vfprintf_internal_r+0x1d78>
   82e74:	008011c4 	movi	r2,71
   82e78:	2880da26 	beq	r5,r2,831e4 <___vfprintf_internal_r+0x1d78>
   82e7c:	d9414c17 	ldw	r5,1328(sp)
   82e80:	d9014317 	ldw	r4,1292(sp)
   82e84:	d9814217 	ldw	r6,1288(sp)
   82e88:	29404014 	ori	r5,r5,256
   82e8c:	d9414c15 	stw	r5,1328(sp)
   82e90:	2000cc16 	blt	r4,zero,831c4 <___vfprintf_internal_r+0x1d58>
   82e94:	3021883a 	mov	r16,r6
   82e98:	2023883a 	mov	r17,r4
   82e9c:	0039883a 	mov	fp,zero
   82ea0:	d9414d17 	ldw	r5,1332(sp)
   82ea4:	00801984 	movi	r2,102
   82ea8:	2880b726 	beq	r5,r2,83188 <___vfprintf_internal_r+0x1d1c>
   82eac:	00801184 	movi	r2,70
   82eb0:	2880b526 	beq	r5,r2,83188 <___vfprintf_internal_r+0x1d1c>
   82eb4:	00801944 	movi	r2,101
   82eb8:	2880c826 	beq	r5,r2,831dc <___vfprintf_internal_r+0x1d70>
   82ebc:	00801144 	movi	r2,69
   82ec0:	2880c626 	beq	r5,r2,831dc <___vfprintf_internal_r+0x1d70>
   82ec4:	9829883a 	mov	r20,r19
   82ec8:	d9014f17 	ldw	r4,1340(sp)
   82ecc:	d8800504 	addi	r2,sp,20
   82ed0:	880d883a 	mov	r6,r17
   82ed4:	d8800115 	stw	r2,4(sp)
   82ed8:	d8c00604 	addi	r3,sp,24
   82edc:	d8800704 	addi	r2,sp,28
   82ee0:	800b883a 	mov	r5,r16
   82ee4:	01c00084 	movi	r7,2
   82ee8:	d8c00215 	stw	r3,8(sp)
   82eec:	d8800315 	stw	r2,12(sp)
   82ef0:	dd000015 	stw	r20,0(sp)
   82ef4:	00836d40 	call	836d4 <_dtoa_r>
   82ef8:	d9814d17 	ldw	r6,1332(sp)
   82efc:	d8814115 	stw	r2,1284(sp)
   82f00:	008019c4 	movi	r2,103
   82f04:	30809526 	beq	r6,r2,8315c <___vfprintf_internal_r+0x1cf0>
   82f08:	d8c14d17 	ldw	r3,1332(sp)
   82f0c:	008011c4 	movi	r2,71
   82f10:	18809226 	beq	r3,r2,8315c <___vfprintf_internal_r+0x1cf0>
   82f14:	d9414117 	ldw	r5,1284(sp)
   82f18:	d9814d17 	ldw	r6,1332(sp)
   82f1c:	00801984 	movi	r2,102
   82f20:	2d25883a 	add	r18,r5,r20
   82f24:	30808626 	beq	r6,r2,83140 <___vfprintf_internal_r+0x1cd4>
   82f28:	00801184 	movi	r2,70
   82f2c:	30808426 	beq	r6,r2,83140 <___vfprintf_internal_r+0x1cd4>
   82f30:	000d883a 	mov	r6,zero
   82f34:	000f883a 	mov	r7,zero
   82f38:	880b883a 	mov	r5,r17
   82f3c:	8009883a 	mov	r4,r16
   82f40:	008a1d00 	call	8a1d0 <__eqdf2>
   82f44:	1000751e 	bne	r2,zero,8311c <___vfprintf_internal_r+0x1cb0>
   82f48:	9005883a 	mov	r2,r18
   82f4c:	dc800715 	stw	r18,28(sp)
   82f50:	d9014117 	ldw	r4,1284(sp)
   82f54:	d9414d17 	ldw	r5,1332(sp)
   82f58:	00c019c4 	movi	r3,103
   82f5c:	1125c83a 	sub	r18,r2,r4
   82f60:	28c06826 	beq	r5,r3,83104 <___vfprintf_internal_r+0x1c98>
   82f64:	008011c4 	movi	r2,71
   82f68:	28806626 	beq	r5,r2,83104 <___vfprintf_internal_r+0x1c98>
   82f6c:	d9000517 	ldw	r4,20(sp)
   82f70:	d8c14d17 	ldw	r3,1332(sp)
   82f74:	00801944 	movi	r2,101
   82f78:	10c05516 	blt	r2,r3,830d0 <___vfprintf_internal_r+0x1c64>
   82f7c:	213fffc4 	addi	r4,r4,-1
   82f80:	d9000515 	stw	r4,20(sp)
   82f84:	d8c00805 	stb	r3,32(sp)
   82f88:	2021883a 	mov	r16,r4
   82f8c:	2000c116 	blt	r4,zero,83294 <___vfprintf_internal_r+0x1e28>
   82f90:	00800ac4 	movi	r2,43
   82f94:	d8800845 	stb	r2,33(sp)
   82f98:	00800244 	movi	r2,9
   82f9c:	1400af0e 	bge	r2,r16,8325c <___vfprintf_internal_r+0x1df0>
   82fa0:	1027883a 	mov	r19,r2
   82fa4:	dc400b84 	addi	r17,sp,46
   82fa8:	8009883a 	mov	r4,r16
   82fac:	01400284 	movi	r5,10
   82fb0:	008a8b80 	call	8a8b8 <__modsi3>
   82fb4:	10800c04 	addi	r2,r2,48
   82fb8:	8c7fffc4 	addi	r17,r17,-1
   82fbc:	8009883a 	mov	r4,r16
   82fc0:	01400284 	movi	r5,10
   82fc4:	88800005 	stb	r2,0(r17)
   82fc8:	008a8580 	call	8a858 <__divsi3>
   82fcc:	1021883a 	mov	r16,r2
   82fd0:	98bff516 	blt	r19,r2,82fa8 <___vfprintf_internal_r+0x1b3c>
   82fd4:	10c00c04 	addi	r3,r2,48
   82fd8:	d88009c4 	addi	r2,sp,39
   82fdc:	108001c4 	addi	r2,r2,7
   82fe0:	897fffc4 	addi	r5,r17,-1
   82fe4:	88ffffc5 	stb	r3,-1(r17)
   82fe8:	2880a72e 	bgeu	r5,r2,83288 <___vfprintf_internal_r+0x1e1c>
   82fec:	1009883a 	mov	r4,r2
   82ff0:	d9800804 	addi	r6,sp,32
   82ff4:	d8c00884 	addi	r3,sp,34
   82ff8:	28800003 	ldbu	r2,0(r5)
   82ffc:	29400044 	addi	r5,r5,1
   83000:	18800005 	stb	r2,0(r3)
   83004:	18c00044 	addi	r3,r3,1
   83008:	293ffb36 	bltu	r5,r4,82ff8 <___vfprintf_internal_r+0x1b8c>
   8300c:	1987c83a 	sub	r3,r3,r6
   83010:	00800044 	movi	r2,1
   83014:	d8c14815 	stw	r3,1312(sp)
   83018:	90cf883a 	add	r7,r18,r3
   8301c:	1480960e 	bge	r2,r18,83278 <___vfprintf_internal_r+0x1e0c>
   83020:	39c00044 	addi	r7,r7,1
   83024:	d9c14515 	stw	r7,1300(sp)
   83028:	38003416 	blt	r7,zero,830fc <___vfprintf_internal_r+0x1c90>
   8302c:	e0803fcc 	andi	r2,fp,255
   83030:	1080201c 	xori	r2,r2,128
   83034:	10bfe004 	addi	r2,r2,-128
   83038:	10004e26 	beq	r2,zero,83174 <___vfprintf_internal_r+0x1d08>
   8303c:	00800b44 	movi	r2,45
   83040:	dc814715 	stw	r18,1308(sp)
   83044:	d8014615 	stw	zero,1304(sp)
   83048:	d8800405 	stb	r2,16(sp)
   8304c:	003bab06 	br	81efc <___vfprintf_internal_r+0xa90>
   83050:	00800b44 	movi	r2,45
   83054:	d8800405 	stb	r2,16(sp)
   83058:	003d2d06 	br	82510 <___vfprintf_internal_r+0x10a4>
   8305c:	d9014f17 	ldw	r4,1340(sp)
   83060:	b00b883a 	mov	r5,r22
   83064:	d9800c04 	addi	r6,sp,48
   83068:	00814140 	call	81414 <__sprint_r>
   8306c:	103ab71e 	bne	r2,zero,81b4c <___vfprintf_internal_r+0x6e0>
   83070:	003ab506 	br	81b48 <___vfprintf_internal_r+0x6dc>
   83074:	38800017 	ldw	r2,0(r7)
   83078:	39c00104 	addi	r7,r7,4
   8307c:	d9c14015 	stw	r7,1280(sp)
   83080:	d9414b17 	ldw	r5,1324(sp)
   83084:	d9c14017 	ldw	r7,1280(sp)
   83088:	11400015 	stw	r5,0(r2)
   8308c:	00395306 	br	815dc <___vfprintf_internal_r+0x170>
   83090:	980f883a 	mov	r7,r19
   83094:	dcc14515 	stw	r19,1300(sp)
   83098:	d8014615 	stw	zero,1304(sp)
   8309c:	003b9506 	br	81ef4 <___vfprintf_internal_r+0xa88>
   830a0:	0027883a 	mov	r19,zero
   830a4:	00397206 	br	81670 <___vfprintf_internal_r+0x204>
   830a8:	00c00274 	movhi	r3,9
   830ac:	18f73104 	addi	r3,r3,-9020
   830b0:	100f883a 	mov	r7,r2
   830b4:	d8814515 	stw	r2,1300(sp)
   830b8:	d8c14115 	stw	r3,1284(sp)
   830bc:	0039da06 	br	81828 <___vfprintf_internal_r+0x3bc>
   830c0:	00800274 	movhi	r2,9
   830c4:	10b73004 	addi	r2,r2,-9024
   830c8:	d8814115 	stw	r2,1284(sp)
   830cc:	003d1606 	br	82528 <___vfprintf_internal_r+0x10bc>
   830d0:	d9414d17 	ldw	r5,1332(sp)
   830d4:	00801984 	movi	r2,102
   830d8:	28804926 	beq	r5,r2,83200 <___vfprintf_internal_r+0x1d94>
   830dc:	200f883a 	mov	r7,r4
   830e0:	24805716 	blt	r4,r18,83240 <___vfprintf_internal_r+0x1dd4>
   830e4:	d9414c17 	ldw	r5,1328(sp)
   830e8:	2880004c 	andi	r2,r5,1
   830ec:	10000126 	beq	r2,zero,830f4 <___vfprintf_internal_r+0x1c88>
   830f0:	21c00044 	addi	r7,r4,1
   830f4:	d9c14515 	stw	r7,1300(sp)
   830f8:	383fcc0e 	bge	r7,zero,8302c <___vfprintf_internal_r+0x1bc0>
   830fc:	d8014515 	stw	zero,1300(sp)
   83100:	003fca06 	br	8302c <___vfprintf_internal_r+0x1bc0>
   83104:	d9000517 	ldw	r4,20(sp)
   83108:	00bfff04 	movi	r2,-4
   8310c:	1100480e 	bge	r2,r4,83230 <___vfprintf_internal_r+0x1dc4>
   83110:	99004716 	blt	r19,r4,83230 <___vfprintf_internal_r+0x1dc4>
   83114:	d8c14d15 	stw	r3,1332(sp)
   83118:	003ff006 	br	830dc <___vfprintf_internal_r+0x1c70>
   8311c:	d8800717 	ldw	r2,28(sp)
   83120:	14bf8b2e 	bgeu	r2,r18,82f50 <___vfprintf_internal_r+0x1ae4>
   83124:	9007883a 	mov	r3,r18
   83128:	01000c04 	movi	r4,48
   8312c:	11000005 	stb	r4,0(r2)
   83130:	10800044 	addi	r2,r2,1
   83134:	d8800715 	stw	r2,28(sp)
   83138:	18bffc1e 	bne	r3,r2,8312c <___vfprintf_internal_r+0x1cc0>
   8313c:	003f8406 	br	82f50 <___vfprintf_internal_r+0x1ae4>
   83140:	d8814117 	ldw	r2,1284(sp)
   83144:	10c00007 	ldb	r3,0(r2)
   83148:	00800c04 	movi	r2,48
   8314c:	18805b26 	beq	r3,r2,832bc <___vfprintf_internal_r+0x1e50>
   83150:	d9000517 	ldw	r4,20(sp)
   83154:	9125883a 	add	r18,r18,r4
   83158:	003f7506 	br	82f30 <___vfprintf_internal_r+0x1ac4>
   8315c:	d9014c17 	ldw	r4,1328(sp)
   83160:	2080004c 	andi	r2,r4,1
   83164:	1005003a 	cmpeq	r2,r2,zero
   83168:	103f6a26 	beq	r2,zero,82f14 <___vfprintf_internal_r+0x1aa8>
   8316c:	d8800717 	ldw	r2,28(sp)
   83170:	003f7706 	br	82f50 <___vfprintf_internal_r+0x1ae4>
   83174:	d9c14515 	stw	r7,1300(sp)
   83178:	38004d16 	blt	r7,zero,832b0 <___vfprintf_internal_r+0x1e44>
   8317c:	dc814715 	stw	r18,1308(sp)
   83180:	d8014615 	stw	zero,1304(sp)
   83184:	003b5b06 	br	81ef4 <___vfprintf_internal_r+0xa88>
   83188:	d9014f17 	ldw	r4,1340(sp)
   8318c:	d8800504 	addi	r2,sp,20
   83190:	d8800115 	stw	r2,4(sp)
   83194:	d8c00604 	addi	r3,sp,24
   83198:	d8800704 	addi	r2,sp,28
   8319c:	800b883a 	mov	r5,r16
   831a0:	880d883a 	mov	r6,r17
   831a4:	01c000c4 	movi	r7,3
   831a8:	d8c00215 	stw	r3,8(sp)
   831ac:	d8800315 	stw	r2,12(sp)
   831b0:	dcc00015 	stw	r19,0(sp)
   831b4:	9829883a 	mov	r20,r19
   831b8:	00836d40 	call	836d4 <_dtoa_r>
   831bc:	d8814115 	stw	r2,1284(sp)
   831c0:	003f5106 	br	82f08 <___vfprintf_internal_r+0x1a9c>
   831c4:	d8c14217 	ldw	r3,1288(sp)
   831c8:	d9014317 	ldw	r4,1292(sp)
   831cc:	07000b44 	movi	fp,45
   831d0:	1821883a 	mov	r16,r3
   831d4:	2460003c 	xorhi	r17,r4,32768
   831d8:	003f3106 	br	82ea0 <___vfprintf_internal_r+0x1a34>
   831dc:	9d000044 	addi	r20,r19,1
   831e0:	003f3906 	br	82ec8 <___vfprintf_internal_r+0x1a5c>
   831e4:	983f251e 	bne	r19,zero,82e7c <___vfprintf_internal_r+0x1a10>
   831e8:	04c00044 	movi	r19,1
   831ec:	003f2306 	br	82e7c <___vfprintf_internal_r+0x1a10>
   831f0:	04c00184 	movi	r19,6
   831f4:	003f2106 	br	82e7c <___vfprintf_internal_r+0x1a10>
   831f8:	d8014515 	stw	zero,1300(sp)
   831fc:	003eee06 	br	82db8 <___vfprintf_internal_r+0x194c>
   83200:	200f883a 	mov	r7,r4
   83204:	0100370e 	bge	zero,r4,832e4 <___vfprintf_internal_r+0x1e78>
   83208:	9800031e 	bne	r19,zero,83218 <___vfprintf_internal_r+0x1dac>
   8320c:	d9814c17 	ldw	r6,1328(sp)
   83210:	3080004c 	andi	r2,r6,1
   83214:	103fb726 	beq	r2,zero,830f4 <___vfprintf_internal_r+0x1c88>
   83218:	20800044 	addi	r2,r4,1
   8321c:	98a7883a 	add	r19,r19,r2
   83220:	dcc14515 	stw	r19,1300(sp)
   83224:	980f883a 	mov	r7,r19
   83228:	983f800e 	bge	r19,zero,8302c <___vfprintf_internal_r+0x1bc0>
   8322c:	003fb306 	br	830fc <___vfprintf_internal_r+0x1c90>
   83230:	d9814d17 	ldw	r6,1332(sp)
   83234:	31bfff84 	addi	r6,r6,-2
   83238:	d9814d15 	stw	r6,1332(sp)
   8323c:	003f4c06 	br	82f70 <___vfprintf_internal_r+0x1b04>
   83240:	0100180e 	bge	zero,r4,832a4 <___vfprintf_internal_r+0x1e38>
   83244:	00800044 	movi	r2,1
   83248:	1485883a 	add	r2,r2,r18
   8324c:	d8814515 	stw	r2,1300(sp)
   83250:	100f883a 	mov	r7,r2
   83254:	103f750e 	bge	r2,zero,8302c <___vfprintf_internal_r+0x1bc0>
   83258:	003fa806 	br	830fc <___vfprintf_internal_r+0x1c90>
   8325c:	80c00c04 	addi	r3,r16,48
   83260:	00800c04 	movi	r2,48
   83264:	d8c008c5 	stb	r3,35(sp)
   83268:	d9800804 	addi	r6,sp,32
   8326c:	d8c00904 	addi	r3,sp,36
   83270:	d8800885 	stb	r2,34(sp)
   83274:	003f6506 	br	8300c <___vfprintf_internal_r+0x1ba0>
   83278:	d9014c17 	ldw	r4,1328(sp)
   8327c:	2084703a 	and	r2,r4,r2
   83280:	103f9c26 	beq	r2,zero,830f4 <___vfprintf_internal_r+0x1c88>
   83284:	003f6606 	br	83020 <___vfprintf_internal_r+0x1bb4>
   83288:	d9800804 	addi	r6,sp,32
   8328c:	d8c00884 	addi	r3,sp,34
   83290:	003f5e06 	br	8300c <___vfprintf_internal_r+0x1ba0>
   83294:	00800b44 	movi	r2,45
   83298:	0121c83a 	sub	r16,zero,r4
   8329c:	d8800845 	stb	r2,33(sp)
   832a0:	003f3d06 	br	82f98 <___vfprintf_internal_r+0x1b2c>
   832a4:	00800084 	movi	r2,2
   832a8:	1105c83a 	sub	r2,r2,r4
   832ac:	003fe606 	br	83248 <___vfprintf_internal_r+0x1ddc>
   832b0:	d8014515 	stw	zero,1300(sp)
   832b4:	dc814715 	stw	r18,1308(sp)
   832b8:	003fb106 	br	83180 <___vfprintf_internal_r+0x1d14>
   832bc:	000d883a 	mov	r6,zero
   832c0:	000f883a 	mov	r7,zero
   832c4:	8009883a 	mov	r4,r16
   832c8:	880b883a 	mov	r5,r17
   832cc:	008a2580 	call	8a258 <__nedf2>
   832d0:	103f9f26 	beq	r2,zero,83150 <___vfprintf_internal_r+0x1ce4>
   832d4:	00800044 	movi	r2,1
   832d8:	1509c83a 	sub	r4,r2,r20
   832dc:	d9000515 	stw	r4,20(sp)
   832e0:	003f9b06 	br	83150 <___vfprintf_internal_r+0x1ce4>
   832e4:	98000d1e 	bne	r19,zero,8331c <___vfprintf_internal_r+0x1eb0>
   832e8:	d8c14c17 	ldw	r3,1328(sp)
   832ec:	1880004c 	andi	r2,r3,1
   832f0:	10000a1e 	bne	r2,zero,8331c <___vfprintf_internal_r+0x1eb0>
   832f4:	01000044 	movi	r4,1
   832f8:	200f883a 	mov	r7,r4
   832fc:	d9014515 	stw	r4,1300(sp)
   83300:	003f4a06 	br	8302c <___vfprintf_internal_r+0x1bc0>
   83304:	3cc00017 	ldw	r19,0(r7)
   83308:	39c00104 	addi	r7,r7,4
   8330c:	983d0e0e 	bge	r19,zero,82748 <___vfprintf_internal_r+0x12dc>
   83310:	b8c00007 	ldb	r3,0(r23)
   83314:	04ffffc4 	movi	r19,-1
   83318:	0038d306 	br	81668 <___vfprintf_internal_r+0x1fc>
   8331c:	9cc00084 	addi	r19,r19,2
   83320:	dcc14515 	stw	r19,1300(sp)
   83324:	980f883a 	mov	r7,r19
   83328:	983f400e 	bge	r19,zero,8302c <___vfprintf_internal_r+0x1bc0>
   8332c:	003f7306 	br	830fc <___vfprintf_internal_r+0x1c90>

00083330 <__vfprintf_internal>:
   83330:	00800274 	movhi	r2,9
   83334:	10be7f04 	addi	r2,r2,-1540
   83338:	2013883a 	mov	r9,r4
   8333c:	11000017 	ldw	r4,0(r2)
   83340:	2805883a 	mov	r2,r5
   83344:	300f883a 	mov	r7,r6
   83348:	480b883a 	mov	r5,r9
   8334c:	100d883a 	mov	r6,r2
   83350:	008146c1 	jmpi	8146c <___vfprintf_internal_r>

00083354 <__swsetup_r>:
   83354:	00800274 	movhi	r2,9
   83358:	10be7f04 	addi	r2,r2,-1540
   8335c:	10c00017 	ldw	r3,0(r2)
   83360:	defffd04 	addi	sp,sp,-12
   83364:	dc400115 	stw	r17,4(sp)
   83368:	dc000015 	stw	r16,0(sp)
   8336c:	dfc00215 	stw	ra,8(sp)
   83370:	2023883a 	mov	r17,r4
   83374:	2821883a 	mov	r16,r5
   83378:	18000226 	beq	r3,zero,83384 <__swsetup_r+0x30>
   8337c:	18800e17 	ldw	r2,56(r3)
   83380:	10001f26 	beq	r2,zero,83400 <__swsetup_r+0xac>
   83384:	8100030b 	ldhu	r4,12(r16)
   83388:	2080020c 	andi	r2,r4,8
   8338c:	10002826 	beq	r2,zero,83430 <__swsetup_r+0xdc>
   83390:	81400417 	ldw	r5,16(r16)
   83394:	28001d26 	beq	r5,zero,8340c <__swsetup_r+0xb8>
   83398:	2080004c 	andi	r2,r4,1
   8339c:	1005003a 	cmpeq	r2,r2,zero
   833a0:	10000b26 	beq	r2,zero,833d0 <__swsetup_r+0x7c>
   833a4:	2080008c 	andi	r2,r4,2
   833a8:	10001226 	beq	r2,zero,833f4 <__swsetup_r+0xa0>
   833ac:	0005883a 	mov	r2,zero
   833b0:	80800215 	stw	r2,8(r16)
   833b4:	28000b26 	beq	r5,zero,833e4 <__swsetup_r+0x90>
   833b8:	0005883a 	mov	r2,zero
   833bc:	dfc00217 	ldw	ra,8(sp)
   833c0:	dc400117 	ldw	r17,4(sp)
   833c4:	dc000017 	ldw	r16,0(sp)
   833c8:	dec00304 	addi	sp,sp,12
   833cc:	f800283a 	ret
   833d0:	80800517 	ldw	r2,20(r16)
   833d4:	80000215 	stw	zero,8(r16)
   833d8:	0085c83a 	sub	r2,zero,r2
   833dc:	80800615 	stw	r2,24(r16)
   833e0:	283ff51e 	bne	r5,zero,833b8 <__swsetup_r+0x64>
   833e4:	2080200c 	andi	r2,r4,128
   833e8:	103ff326 	beq	r2,zero,833b8 <__swsetup_r+0x64>
   833ec:	00bfffc4 	movi	r2,-1
   833f0:	003ff206 	br	833bc <__swsetup_r+0x68>
   833f4:	80800517 	ldw	r2,20(r16)
   833f8:	80800215 	stw	r2,8(r16)
   833fc:	003fed06 	br	833b4 <__swsetup_r+0x60>
   83400:	1809883a 	mov	r4,r3
   83404:	0084f200 	call	84f20 <__sinit>
   83408:	003fde06 	br	83384 <__swsetup_r+0x30>
   8340c:	20c0a00c 	andi	r3,r4,640
   83410:	00808004 	movi	r2,512
   83414:	18bfe026 	beq	r3,r2,83398 <__swsetup_r+0x44>
   83418:	8809883a 	mov	r4,r17
   8341c:	800b883a 	mov	r5,r16
   83420:	0085ccc0 	call	85ccc <__smakebuf_r>
   83424:	8100030b 	ldhu	r4,12(r16)
   83428:	81400417 	ldw	r5,16(r16)
   8342c:	003fda06 	br	83398 <__swsetup_r+0x44>
   83430:	2080040c 	andi	r2,r4,16
   83434:	103fed26 	beq	r2,zero,833ec <__swsetup_r+0x98>
   83438:	2080010c 	andi	r2,r4,4
   8343c:	10001226 	beq	r2,zero,83488 <__swsetup_r+0x134>
   83440:	81400c17 	ldw	r5,48(r16)
   83444:	28000526 	beq	r5,zero,8345c <__swsetup_r+0x108>
   83448:	80801004 	addi	r2,r16,64
   8344c:	28800226 	beq	r5,r2,83458 <__swsetup_r+0x104>
   83450:	8809883a 	mov	r4,r17
   83454:	00852d80 	call	852d8 <_free_r>
   83458:	80000c15 	stw	zero,48(r16)
   8345c:	8080030b 	ldhu	r2,12(r16)
   83460:	81400417 	ldw	r5,16(r16)
   83464:	80000115 	stw	zero,4(r16)
   83468:	10bff6cc 	andi	r2,r2,65499
   8346c:	8080030d 	sth	r2,12(r16)
   83470:	81400015 	stw	r5,0(r16)
   83474:	8080030b 	ldhu	r2,12(r16)
   83478:	10800214 	ori	r2,r2,8
   8347c:	113fffcc 	andi	r4,r2,65535
   83480:	8080030d 	sth	r2,12(r16)
   83484:	003fc306 	br	83394 <__swsetup_r+0x40>
   83488:	81400417 	ldw	r5,16(r16)
   8348c:	003ff906 	br	83474 <__swsetup_r+0x120>

00083490 <quorem>:
   83490:	28c00417 	ldw	r3,16(r5)
   83494:	20800417 	ldw	r2,16(r4)
   83498:	defff104 	addi	sp,sp,-60
   8349c:	dfc00e15 	stw	ra,56(sp)
   834a0:	df000d15 	stw	fp,52(sp)
   834a4:	ddc00c15 	stw	r23,48(sp)
   834a8:	dd800b15 	stw	r22,44(sp)
   834ac:	dd400a15 	stw	r21,40(sp)
   834b0:	dd000915 	stw	r20,36(sp)
   834b4:	dcc00815 	stw	r19,32(sp)
   834b8:	dc800715 	stw	r18,28(sp)
   834bc:	dc400615 	stw	r17,24(sp)
   834c0:	dc000515 	stw	r16,20(sp)
   834c4:	d9000315 	stw	r4,12(sp)
   834c8:	d9400415 	stw	r5,16(sp)
   834cc:	10c07f16 	blt	r2,r3,836cc <quorem+0x23c>
   834d0:	1d3fffc4 	addi	r20,r3,-1
   834d4:	d8c00417 	ldw	r3,16(sp)
   834d8:	d9000317 	ldw	r4,12(sp)
   834dc:	a505883a 	add	r2,r20,r20
   834e0:	1085883a 	add	r2,r2,r2
   834e4:	1cc00504 	addi	r19,r3,20
   834e8:	25c00504 	addi	r23,r4,20
   834ec:	98ad883a 	add	r22,r19,r2
   834f0:	15c7883a 	add	r3,r2,r23
   834f4:	b1400017 	ldw	r5,0(r22)
   834f8:	19000017 	ldw	r4,0(r3)
   834fc:	d8c00015 	stw	r3,0(sp)
   83500:	29400044 	addi	r5,r5,1
   83504:	d9000215 	stw	r4,8(sp)
   83508:	008a9180 	call	8a918 <__udivsi3>
   8350c:	1039883a 	mov	fp,r2
   83510:	10003d1e 	bne	r2,zero,83608 <quorem+0x178>
   83514:	d9400417 	ldw	r5,16(sp)
   83518:	d9000317 	ldw	r4,12(sp)
   8351c:	00869f80 	call	869f8 <__mcmp>
   83520:	10002c16 	blt	r2,zero,835d4 <quorem+0x144>
   83524:	e7000044 	addi	fp,fp,1
   83528:	b80f883a 	mov	r7,r23
   8352c:	0011883a 	mov	r8,zero
   83530:	0009883a 	mov	r4,zero
   83534:	99400017 	ldw	r5,0(r19)
   83538:	38c00017 	ldw	r3,0(r7)
   8353c:	9cc00104 	addi	r19,r19,4
   83540:	28bfffcc 	andi	r2,r5,65535
   83544:	2085883a 	add	r2,r4,r2
   83548:	11bfffcc 	andi	r6,r2,65535
   8354c:	193fffcc 	andi	r4,r3,65535
   83550:	1004d43a 	srli	r2,r2,16
   83554:	280ad43a 	srli	r5,r5,16
   83558:	2189c83a 	sub	r4,r4,r6
   8355c:	2209883a 	add	r4,r4,r8
   83560:	1806d43a 	srli	r3,r3,16
   83564:	288b883a 	add	r5,r5,r2
   83568:	200dd43a 	srai	r6,r4,16
   8356c:	28bfffcc 	andi	r2,r5,65535
   83570:	1887c83a 	sub	r3,r3,r2
   83574:	1987883a 	add	r3,r3,r6
   83578:	3900000d 	sth	r4,0(r7)
   8357c:	38c0008d 	sth	r3,2(r7)
   83580:	2808d43a 	srli	r4,r5,16
   83584:	39c00104 	addi	r7,r7,4
   83588:	1811d43a 	srai	r8,r3,16
   8358c:	b4ffe92e 	bgeu	r22,r19,83534 <quorem+0xa4>
   83590:	a505883a 	add	r2,r20,r20
   83594:	1085883a 	add	r2,r2,r2
   83598:	b885883a 	add	r2,r23,r2
   8359c:	10c00017 	ldw	r3,0(r2)
   835a0:	18000c1e 	bne	r3,zero,835d4 <quorem+0x144>
   835a4:	113fff04 	addi	r4,r2,-4
   835a8:	b900082e 	bgeu	r23,r4,835cc <quorem+0x13c>
   835ac:	10bfff17 	ldw	r2,-4(r2)
   835b0:	10000326 	beq	r2,zero,835c0 <quorem+0x130>
   835b4:	00000506 	br	835cc <quorem+0x13c>
   835b8:	20800017 	ldw	r2,0(r4)
   835bc:	1000031e 	bne	r2,zero,835cc <quorem+0x13c>
   835c0:	213fff04 	addi	r4,r4,-4
   835c4:	a53fffc4 	addi	r20,r20,-1
   835c8:	b93ffb36 	bltu	r23,r4,835b8 <quorem+0x128>
   835cc:	d9000317 	ldw	r4,12(sp)
   835d0:	25000415 	stw	r20,16(r4)
   835d4:	e005883a 	mov	r2,fp
   835d8:	dfc00e17 	ldw	ra,56(sp)
   835dc:	df000d17 	ldw	fp,52(sp)
   835e0:	ddc00c17 	ldw	r23,48(sp)
   835e4:	dd800b17 	ldw	r22,44(sp)
   835e8:	dd400a17 	ldw	r21,40(sp)
   835ec:	dd000917 	ldw	r20,36(sp)
   835f0:	dcc00817 	ldw	r19,32(sp)
   835f4:	dc800717 	ldw	r18,28(sp)
   835f8:	dc400617 	ldw	r17,24(sp)
   835fc:	dc000517 	ldw	r16,20(sp)
   83600:	dec00f04 	addi	sp,sp,60
   83604:	f800283a 	ret
   83608:	b823883a 	mov	r17,r23
   8360c:	9825883a 	mov	r18,r19
   83610:	d8000115 	stw	zero,4(sp)
   83614:	002b883a 	mov	r21,zero
   83618:	94000017 	ldw	r16,0(r18)
   8361c:	e009883a 	mov	r4,fp
   83620:	94800104 	addi	r18,r18,4
   83624:	817fffcc 	andi	r5,r16,65535
   83628:	00812180 	call	81218 <__mulsi3>
   8362c:	800ad43a 	srli	r5,r16,16
   83630:	e009883a 	mov	r4,fp
   83634:	a8a1883a 	add	r16,r21,r2
   83638:	00812180 	call	81218 <__mulsi3>
   8363c:	89000017 	ldw	r4,0(r17)
   83640:	80ffffcc 	andi	r3,r16,65535
   83644:	8020d43a 	srli	r16,r16,16
   83648:	217fffcc 	andi	r5,r4,65535
   8364c:	28cbc83a 	sub	r5,r5,r3
   83650:	d8c00117 	ldw	r3,4(sp)
   83654:	2008d43a 	srli	r4,r4,16
   83658:	1405883a 	add	r2,r2,r16
   8365c:	28cb883a 	add	r5,r5,r3
   83660:	280dd43a 	srai	r6,r5,16
   83664:	10ffffcc 	andi	r3,r2,65535
   83668:	20c9c83a 	sub	r4,r4,r3
   8366c:	2189883a 	add	r4,r4,r6
   83670:	8900008d 	sth	r4,2(r17)
   83674:	2009d43a 	srai	r4,r4,16
   83678:	8940000d 	sth	r5,0(r17)
   8367c:	102ad43a 	srli	r21,r2,16
   83680:	8c400104 	addi	r17,r17,4
   83684:	d9000115 	stw	r4,4(sp)
   83688:	b4bfe32e 	bgeu	r22,r18,83618 <quorem+0x188>
   8368c:	d9000217 	ldw	r4,8(sp)
   83690:	203fa01e 	bne	r4,zero,83514 <quorem+0x84>
   83694:	d8800017 	ldw	r2,0(sp)
   83698:	10ffff04 	addi	r3,r2,-4
   8369c:	b8c0082e 	bgeu	r23,r3,836c0 <quorem+0x230>
   836a0:	10bfff17 	ldw	r2,-4(r2)
   836a4:	10000326 	beq	r2,zero,836b4 <quorem+0x224>
   836a8:	00000506 	br	836c0 <quorem+0x230>
   836ac:	18800017 	ldw	r2,0(r3)
   836b0:	1000031e 	bne	r2,zero,836c0 <quorem+0x230>
   836b4:	18ffff04 	addi	r3,r3,-4
   836b8:	a53fffc4 	addi	r20,r20,-1
   836bc:	b8fffb36 	bltu	r23,r3,836ac <quorem+0x21c>
   836c0:	d8c00317 	ldw	r3,12(sp)
   836c4:	1d000415 	stw	r20,16(r3)
   836c8:	003f9206 	br	83514 <quorem+0x84>
   836cc:	0005883a 	mov	r2,zero
   836d0:	003fc106 	br	835d8 <quorem+0x148>

000836d4 <_dtoa_r>:
   836d4:	22001017 	ldw	r8,64(r4)
   836d8:	deffda04 	addi	sp,sp,-152
   836dc:	dd402115 	stw	r21,132(sp)
   836e0:	dd002015 	stw	r20,128(sp)
   836e4:	dc801e15 	stw	r18,120(sp)
   836e8:	dc401d15 	stw	r17,116(sp)
   836ec:	dfc02515 	stw	ra,148(sp)
   836f0:	df002415 	stw	fp,144(sp)
   836f4:	ddc02315 	stw	r23,140(sp)
   836f8:	dd802215 	stw	r22,136(sp)
   836fc:	dcc01f15 	stw	r19,124(sp)
   83700:	dc001c15 	stw	r16,112(sp)
   83704:	d9001615 	stw	r4,88(sp)
   83708:	3023883a 	mov	r17,r6
   8370c:	2829883a 	mov	r20,r5
   83710:	d9c01715 	stw	r7,92(sp)
   83714:	dc802817 	ldw	r18,160(sp)
   83718:	302b883a 	mov	r21,r6
   8371c:	40000a26 	beq	r8,zero,83748 <_dtoa_r+0x74>
   83720:	20801117 	ldw	r2,68(r4)
   83724:	400b883a 	mov	r5,r8
   83728:	40800115 	stw	r2,4(r8)
   8372c:	20c01117 	ldw	r3,68(r4)
   83730:	00800044 	movi	r2,1
   83734:	10c4983a 	sll	r2,r2,r3
   83738:	40800215 	stw	r2,8(r8)
   8373c:	008689c0 	call	8689c <_Bfree>
   83740:	d8c01617 	ldw	r3,88(sp)
   83744:	18001015 	stw	zero,64(r3)
   83748:	8800a316 	blt	r17,zero,839d8 <_dtoa_r+0x304>
   8374c:	90000015 	stw	zero,0(r18)
   83750:	a8dffc2c 	andhi	r3,r21,32752
   83754:	009ffc34 	movhi	r2,32752
   83758:	18809126 	beq	r3,r2,839a0 <_dtoa_r+0x2cc>
   8375c:	000d883a 	mov	r6,zero
   83760:	000f883a 	mov	r7,zero
   83764:	a009883a 	mov	r4,r20
   83768:	a80b883a 	mov	r5,r21
   8376c:	dd001215 	stw	r20,72(sp)
   83770:	dd401315 	stw	r21,76(sp)
   83774:	008a2580 	call	8a258 <__nedf2>
   83778:	1000171e 	bne	r2,zero,837d8 <_dtoa_r+0x104>
   8377c:	d9802717 	ldw	r6,156(sp)
   83780:	00800044 	movi	r2,1
   83784:	30800015 	stw	r2,0(r6)
   83788:	d8802917 	ldw	r2,164(sp)
   8378c:	10029b26 	beq	r2,zero,841fc <_dtoa_r+0xb28>
   83790:	d9002917 	ldw	r4,164(sp)
   83794:	00800274 	movhi	r2,9
   83798:	10b73f44 	addi	r2,r2,-8963
   8379c:	10ffffc4 	addi	r3,r2,-1
   837a0:	20800015 	stw	r2,0(r4)
   837a4:	1805883a 	mov	r2,r3
   837a8:	dfc02517 	ldw	ra,148(sp)
   837ac:	df002417 	ldw	fp,144(sp)
   837b0:	ddc02317 	ldw	r23,140(sp)
   837b4:	dd802217 	ldw	r22,136(sp)
   837b8:	dd402117 	ldw	r21,132(sp)
   837bc:	dd002017 	ldw	r20,128(sp)
   837c0:	dcc01f17 	ldw	r19,124(sp)
   837c4:	dc801e17 	ldw	r18,120(sp)
   837c8:	dc401d17 	ldw	r17,116(sp)
   837cc:	dc001c17 	ldw	r16,112(sp)
   837d0:	dec02604 	addi	sp,sp,152
   837d4:	f800283a 	ret
   837d8:	d9001617 	ldw	r4,88(sp)
   837dc:	d9401217 	ldw	r5,72(sp)
   837e0:	d8800104 	addi	r2,sp,4
   837e4:	a80d883a 	mov	r6,r21
   837e8:	d9c00204 	addi	r7,sp,8
   837ec:	d8800015 	stw	r2,0(sp)
   837f0:	0086ed80 	call	86ed8 <__d2b>
   837f4:	d8800715 	stw	r2,28(sp)
   837f8:	a804d53a 	srli	r2,r21,20
   837fc:	1101ffcc 	andi	r4,r2,2047
   83800:	20008626 	beq	r4,zero,83a1c <_dtoa_r+0x348>
   83804:	d8c01217 	ldw	r3,72(sp)
   83808:	00800434 	movhi	r2,16
   8380c:	10bfffc4 	addi	r2,r2,-1
   83810:	ddc00117 	ldw	r23,4(sp)
   83814:	a884703a 	and	r2,r21,r2
   83818:	1811883a 	mov	r8,r3
   8381c:	124ffc34 	orhi	r9,r2,16368
   83820:	25bf0044 	addi	r22,r4,-1023
   83824:	d8000815 	stw	zero,32(sp)
   83828:	0005883a 	mov	r2,zero
   8382c:	00cffe34 	movhi	r3,16376
   83830:	480b883a 	mov	r5,r9
   83834:	4009883a 	mov	r4,r8
   83838:	180f883a 	mov	r7,r3
   8383c:	100d883a 	mov	r6,r2
   83840:	0089ac00 	call	89ac0 <__subdf3>
   83844:	0218dbf4 	movhi	r8,25455
   83848:	4210d844 	addi	r8,r8,17249
   8384c:	024ff4f4 	movhi	r9,16339
   83850:	4a61e9c4 	addi	r9,r9,-30809
   83854:	480f883a 	mov	r7,r9
   83858:	400d883a 	mov	r6,r8
   8385c:	180b883a 	mov	r5,r3
   83860:	1009883a 	mov	r4,r2
   83864:	0089bb40 	call	89bb4 <__muldf3>
   83868:	0222d874 	movhi	r8,35681
   8386c:	42322cc4 	addi	r8,r8,-14157
   83870:	024ff1f4 	movhi	r9,16327
   83874:	4a628a04 	addi	r9,r9,-30168
   83878:	480f883a 	mov	r7,r9
   8387c:	400d883a 	mov	r6,r8
   83880:	180b883a 	mov	r5,r3
   83884:	1009883a 	mov	r4,r2
   83888:	0089b400 	call	89b40 <__adddf3>
   8388c:	b009883a 	mov	r4,r22
   83890:	1021883a 	mov	r16,r2
   83894:	1823883a 	mov	r17,r3
   83898:	008a4780 	call	8a478 <__floatsidf>
   8389c:	021427f4 	movhi	r8,20639
   838a0:	421e7ec4 	addi	r8,r8,31227
   838a4:	024ff4f4 	movhi	r9,16339
   838a8:	4a5104c4 	addi	r9,r9,17427
   838ac:	480f883a 	mov	r7,r9
   838b0:	400d883a 	mov	r6,r8
   838b4:	180b883a 	mov	r5,r3
   838b8:	1009883a 	mov	r4,r2
   838bc:	0089bb40 	call	89bb4 <__muldf3>
   838c0:	180f883a 	mov	r7,r3
   838c4:	880b883a 	mov	r5,r17
   838c8:	100d883a 	mov	r6,r2
   838cc:	8009883a 	mov	r4,r16
   838d0:	0089b400 	call	89b40 <__adddf3>
   838d4:	1009883a 	mov	r4,r2
   838d8:	180b883a 	mov	r5,r3
   838dc:	1021883a 	mov	r16,r2
   838e0:	1823883a 	mov	r17,r3
   838e4:	008a5700 	call	8a570 <__fixdfsi>
   838e8:	000d883a 	mov	r6,zero
   838ec:	000f883a 	mov	r7,zero
   838f0:	8009883a 	mov	r4,r16
   838f4:	880b883a 	mov	r5,r17
   838f8:	d8800d15 	stw	r2,52(sp)
   838fc:	008a3f00 	call	8a3f0 <__ltdf2>
   83900:	10031716 	blt	r2,zero,84560 <_dtoa_r+0xe8c>
   83904:	d8c00d17 	ldw	r3,52(sp)
   83908:	00800584 	movi	r2,22
   8390c:	10c1482e 	bgeu	r2,r3,83e30 <_dtoa_r+0x75c>
   83910:	01000044 	movi	r4,1
   83914:	d9000c15 	stw	r4,48(sp)
   83918:	bd85c83a 	sub	r2,r23,r22
   8391c:	11bfffc4 	addi	r6,r2,-1
   83920:	30030b16 	blt	r6,zero,84550 <_dtoa_r+0xe7c>
   83924:	d9800a15 	stw	r6,40(sp)
   83928:	d8001115 	stw	zero,68(sp)
   8392c:	d8c00d17 	ldw	r3,52(sp)
   83930:	1802ff16 	blt	r3,zero,84530 <_dtoa_r+0xe5c>
   83934:	d9000a17 	ldw	r4,40(sp)
   83938:	d8c00915 	stw	r3,36(sp)
   8393c:	d8001015 	stw	zero,64(sp)
   83940:	20c9883a 	add	r4,r4,r3
   83944:	d9000a15 	stw	r4,40(sp)
   83948:	d9001717 	ldw	r4,92(sp)
   8394c:	00800244 	movi	r2,9
   83950:	11004636 	bltu	r2,r4,83a6c <_dtoa_r+0x398>
   83954:	00800144 	movi	r2,5
   83958:	11020416 	blt	r2,r4,8416c <_dtoa_r+0xa98>
   8395c:	04400044 	movi	r17,1
   83960:	d8c01717 	ldw	r3,92(sp)
   83964:	00800144 	movi	r2,5
   83968:	10c1ed36 	bltu	r2,r3,84120 <_dtoa_r+0xa4c>
   8396c:	18c5883a 	add	r2,r3,r3
   83970:	1085883a 	add	r2,r2,r2
   83974:	00c00234 	movhi	r3,8
   83978:	18ce6204 	addi	r3,r3,14728
   8397c:	10c5883a 	add	r2,r2,r3
   83980:	11000017 	ldw	r4,0(r2)
   83984:	2000683a 	jmp	r4
   83988:	00083a74 	movhi	zero,8425
   8398c:	00083a74 	movhi	zero,8425
   83990:	00084474 	movhi	zero,8465
   83994:	0008444c 	andi	zero,zero,8465
   83998:	00084490 	cmplti	zero,zero,8466
   8399c:	0008449c 	xori	zero,zero,8466
   839a0:	d9002717 	ldw	r4,156(sp)
   839a4:	0089c3c4 	movi	r2,9999
   839a8:	20800015 	stw	r2,0(r4)
   839ac:	a0001026 	beq	r20,zero,839f0 <_dtoa_r+0x31c>
   839b0:	00c00274 	movhi	r3,9
   839b4:	18f74b04 	addi	r3,r3,-8916
   839b8:	d9802917 	ldw	r6,164(sp)
   839bc:	303f7926 	beq	r6,zero,837a4 <_dtoa_r+0xd0>
   839c0:	188000c7 	ldb	r2,3(r3)
   839c4:	190000c4 	addi	r4,r3,3
   839c8:	1000101e 	bne	r2,zero,83a0c <_dtoa_r+0x338>
   839cc:	d8802917 	ldw	r2,164(sp)
   839d0:	11000015 	stw	r4,0(r2)
   839d4:	003f7306 	br	837a4 <_dtoa_r+0xd0>
   839d8:	00a00034 	movhi	r2,32768
   839dc:	10bfffc4 	addi	r2,r2,-1
   839e0:	00c00044 	movi	r3,1
   839e4:	88aa703a 	and	r21,r17,r2
   839e8:	90c00015 	stw	r3,0(r18)
   839ec:	003f5806 	br	83750 <_dtoa_r+0x7c>
   839f0:	00800434 	movhi	r2,16
   839f4:	10bfffc4 	addi	r2,r2,-1
   839f8:	a884703a 	and	r2,r21,r2
   839fc:	103fec1e 	bne	r2,zero,839b0 <_dtoa_r+0x2dc>
   83a00:	00c00274 	movhi	r3,9
   83a04:	18f74804 	addi	r3,r3,-8928
   83a08:	003feb06 	br	839b8 <_dtoa_r+0x2e4>
   83a0c:	d8802917 	ldw	r2,164(sp)
   83a10:	19000204 	addi	r4,r3,8
   83a14:	11000015 	stw	r4,0(r2)
   83a18:	003f6206 	br	837a4 <_dtoa_r+0xd0>
   83a1c:	ddc00117 	ldw	r23,4(sp)
   83a20:	d8800217 	ldw	r2,8(sp)
   83a24:	01000804 	movi	r4,32
   83a28:	b8c10c84 	addi	r3,r23,1074
   83a2c:	18a3883a 	add	r17,r3,r2
   83a30:	2441b80e 	bge	r4,r17,84114 <_dtoa_r+0xa40>
   83a34:	00c01004 	movi	r3,64
   83a38:	1c47c83a 	sub	r3,r3,r17
   83a3c:	88bff804 	addi	r2,r17,-32
   83a40:	a8c6983a 	sll	r3,r21,r3
   83a44:	a084d83a 	srl	r2,r20,r2
   83a48:	1888b03a 	or	r4,r3,r2
   83a4c:	008a6480 	call	8a648 <__floatunsidf>
   83a50:	1011883a 	mov	r8,r2
   83a54:	00bf8434 	movhi	r2,65040
   83a58:	01000044 	movi	r4,1
   83a5c:	10d3883a 	add	r9,r2,r3
   83a60:	8dbef344 	addi	r22,r17,-1075
   83a64:	d9000815 	stw	r4,32(sp)
   83a68:	003f6f06 	br	83828 <_dtoa_r+0x154>
   83a6c:	d8001715 	stw	zero,92(sp)
   83a70:	04400044 	movi	r17,1
   83a74:	00bfffc4 	movi	r2,-1
   83a78:	00c00044 	movi	r3,1
   83a7c:	d8800e15 	stw	r2,56(sp)
   83a80:	d8002615 	stw	zero,152(sp)
   83a84:	d8800f15 	stw	r2,60(sp)
   83a88:	d8c00b15 	stw	r3,44(sp)
   83a8c:	1021883a 	mov	r16,r2
   83a90:	d8801617 	ldw	r2,88(sp)
   83a94:	10001115 	stw	zero,68(r2)
   83a98:	d8801617 	ldw	r2,88(sp)
   83a9c:	11401117 	ldw	r5,68(r2)
   83aa0:	1009883a 	mov	r4,r2
   83aa4:	0086e1c0 	call	86e1c <_Balloc>
   83aa8:	d8c01617 	ldw	r3,88(sp)
   83aac:	d8800515 	stw	r2,20(sp)
   83ab0:	18801015 	stw	r2,64(r3)
   83ab4:	00800384 	movi	r2,14
   83ab8:	14006836 	bltu	r2,r16,83c5c <_dtoa_r+0x588>
   83abc:	8805003a 	cmpeq	r2,r17,zero
   83ac0:	1000661e 	bne	r2,zero,83c5c <_dtoa_r+0x588>
   83ac4:	d9000d17 	ldw	r4,52(sp)
   83ac8:	0102300e 	bge	zero,r4,8438c <_dtoa_r+0xcb8>
   83acc:	208003cc 	andi	r2,r4,15
   83ad0:	100490fa 	slli	r2,r2,3
   83ad4:	2025d13a 	srai	r18,r4,4
   83ad8:	00c00274 	movhi	r3,9
   83adc:	18f75d04 	addi	r3,r3,-8844
   83ae0:	10c5883a 	add	r2,r2,r3
   83ae4:	90c0040c 	andi	r3,r18,16
   83ae8:	14000017 	ldw	r16,0(r2)
   83aec:	14400117 	ldw	r17,4(r2)
   83af0:	18036a1e 	bne	r3,zero,8489c <_dtoa_r+0x11c8>
   83af4:	05800084 	movi	r22,2
   83af8:	90001026 	beq	r18,zero,83b3c <_dtoa_r+0x468>
   83afc:	04c00274 	movhi	r19,9
   83b00:	9cf78f04 	addi	r19,r19,-8644
   83b04:	9080004c 	andi	r2,r18,1
   83b08:	1005003a 	cmpeq	r2,r2,zero
   83b0c:	1000081e 	bne	r2,zero,83b30 <_dtoa_r+0x45c>
   83b10:	99800017 	ldw	r6,0(r19)
   83b14:	99c00117 	ldw	r7,4(r19)
   83b18:	880b883a 	mov	r5,r17
   83b1c:	8009883a 	mov	r4,r16
   83b20:	0089bb40 	call	89bb4 <__muldf3>
   83b24:	1021883a 	mov	r16,r2
   83b28:	b5800044 	addi	r22,r22,1
   83b2c:	1823883a 	mov	r17,r3
   83b30:	9025d07a 	srai	r18,r18,1
   83b34:	9cc00204 	addi	r19,r19,8
   83b38:	903ff21e 	bne	r18,zero,83b04 <_dtoa_r+0x430>
   83b3c:	a80b883a 	mov	r5,r21
   83b40:	a009883a 	mov	r4,r20
   83b44:	880f883a 	mov	r7,r17
   83b48:	800d883a 	mov	r6,r16
   83b4c:	0089f780 	call	89f78 <__divdf3>
   83b50:	1029883a 	mov	r20,r2
   83b54:	182b883a 	mov	r21,r3
   83b58:	d8c00c17 	ldw	r3,48(sp)
   83b5c:	1805003a 	cmpeq	r2,r3,zero
   83b60:	1000081e 	bne	r2,zero,83b84 <_dtoa_r+0x4b0>
   83b64:	0005883a 	mov	r2,zero
   83b68:	00cffc34 	movhi	r3,16368
   83b6c:	180f883a 	mov	r7,r3
   83b70:	a009883a 	mov	r4,r20
   83b74:	a80b883a 	mov	r5,r21
   83b78:	100d883a 	mov	r6,r2
   83b7c:	008a3f00 	call	8a3f0 <__ltdf2>
   83b80:	1003fe16 	blt	r2,zero,84b7c <_dtoa_r+0x14a8>
   83b84:	b009883a 	mov	r4,r22
   83b88:	008a4780 	call	8a478 <__floatsidf>
   83b8c:	180b883a 	mov	r5,r3
   83b90:	1009883a 	mov	r4,r2
   83b94:	a00d883a 	mov	r6,r20
   83b98:	a80f883a 	mov	r7,r21
   83b9c:	0089bb40 	call	89bb4 <__muldf3>
   83ba0:	0011883a 	mov	r8,zero
   83ba4:	02500734 	movhi	r9,16412
   83ba8:	1009883a 	mov	r4,r2
   83bac:	180b883a 	mov	r5,r3
   83bb0:	480f883a 	mov	r7,r9
   83bb4:	400d883a 	mov	r6,r8
   83bb8:	0089b400 	call	89b40 <__adddf3>
   83bbc:	d9000f17 	ldw	r4,60(sp)
   83bc0:	102d883a 	mov	r22,r2
   83bc4:	00bf3034 	movhi	r2,64704
   83bc8:	18b9883a 	add	fp,r3,r2
   83bcc:	e02f883a 	mov	r23,fp
   83bd0:	20028f1e 	bne	r4,zero,84610 <_dtoa_r+0xf3c>
   83bd4:	0005883a 	mov	r2,zero
   83bd8:	00d00534 	movhi	r3,16404
   83bdc:	a009883a 	mov	r4,r20
   83be0:	a80b883a 	mov	r5,r21
   83be4:	180f883a 	mov	r7,r3
   83be8:	100d883a 	mov	r6,r2
   83bec:	0089ac00 	call	89ac0 <__subdf3>
   83bf0:	1009883a 	mov	r4,r2
   83bf4:	e00f883a 	mov	r7,fp
   83bf8:	180b883a 	mov	r5,r3
   83bfc:	b00d883a 	mov	r6,r22
   83c00:	1025883a 	mov	r18,r2
   83c04:	1827883a 	mov	r19,r3
   83c08:	008a2e00 	call	8a2e0 <__gtdf2>
   83c0c:	00834f16 	blt	zero,r2,8494c <_dtoa_r+0x1278>
   83c10:	e0e0003c 	xorhi	r3,fp,32768
   83c14:	9009883a 	mov	r4,r18
   83c18:	980b883a 	mov	r5,r19
   83c1c:	180f883a 	mov	r7,r3
   83c20:	b00d883a 	mov	r6,r22
   83c24:	008a3f00 	call	8a3f0 <__ltdf2>
   83c28:	1000080e 	bge	r2,zero,83c4c <_dtoa_r+0x578>
   83c2c:	0027883a 	mov	r19,zero
   83c30:	0025883a 	mov	r18,zero
   83c34:	d8802617 	ldw	r2,152(sp)
   83c38:	df000517 	ldw	fp,20(sp)
   83c3c:	d8000615 	stw	zero,24(sp)
   83c40:	0084303a 	nor	r2,zero,r2
   83c44:	d8800d15 	stw	r2,52(sp)
   83c48:	00019b06 	br	842b8 <_dtoa_r+0xbe4>
   83c4c:	d9801217 	ldw	r6,72(sp)
   83c50:	d8801317 	ldw	r2,76(sp)
   83c54:	3029883a 	mov	r20,r6
   83c58:	102b883a 	mov	r21,r2
   83c5c:	d8c00217 	ldw	r3,8(sp)
   83c60:	18008516 	blt	r3,zero,83e78 <_dtoa_r+0x7a4>
   83c64:	d9000d17 	ldw	r4,52(sp)
   83c68:	00800384 	movi	r2,14
   83c6c:	11008216 	blt	r2,r4,83e78 <_dtoa_r+0x7a4>
   83c70:	200490fa 	slli	r2,r4,3
   83c74:	d9802617 	ldw	r6,152(sp)
   83c78:	00c00274 	movhi	r3,9
   83c7c:	18f75d04 	addi	r3,r3,-8844
   83c80:	10c5883a 	add	r2,r2,r3
   83c84:	14800017 	ldw	r18,0(r2)
   83c88:	14c00117 	ldw	r19,4(r2)
   83c8c:	30031e16 	blt	r6,zero,84908 <_dtoa_r+0x1234>
   83c90:	d9000517 	ldw	r4,20(sp)
   83c94:	d8c00f17 	ldw	r3,60(sp)
   83c98:	a823883a 	mov	r17,r21
   83c9c:	a021883a 	mov	r16,r20
   83ca0:	192b883a 	add	r21,r3,r4
   83ca4:	2039883a 	mov	fp,r4
   83ca8:	00000f06 	br	83ce8 <_dtoa_r+0x614>
   83cac:	0005883a 	mov	r2,zero
   83cb0:	00d00934 	movhi	r3,16420
   83cb4:	5009883a 	mov	r4,r10
   83cb8:	580b883a 	mov	r5,r11
   83cbc:	180f883a 	mov	r7,r3
   83cc0:	100d883a 	mov	r6,r2
   83cc4:	0089bb40 	call	89bb4 <__muldf3>
   83cc8:	180b883a 	mov	r5,r3
   83ccc:	000d883a 	mov	r6,zero
   83cd0:	000f883a 	mov	r7,zero
   83cd4:	1009883a 	mov	r4,r2
   83cd8:	1021883a 	mov	r16,r2
   83cdc:	1823883a 	mov	r17,r3
   83ce0:	008a2580 	call	8a258 <__nedf2>
   83ce4:	10004526 	beq	r2,zero,83dfc <_dtoa_r+0x728>
   83ce8:	900d883a 	mov	r6,r18
   83cec:	980f883a 	mov	r7,r19
   83cf0:	8009883a 	mov	r4,r16
   83cf4:	880b883a 	mov	r5,r17
   83cf8:	0089f780 	call	89f78 <__divdf3>
   83cfc:	180b883a 	mov	r5,r3
   83d00:	1009883a 	mov	r4,r2
   83d04:	008a5700 	call	8a570 <__fixdfsi>
   83d08:	1009883a 	mov	r4,r2
   83d0c:	1029883a 	mov	r20,r2
   83d10:	008a4780 	call	8a478 <__floatsidf>
   83d14:	180f883a 	mov	r7,r3
   83d18:	9009883a 	mov	r4,r18
   83d1c:	980b883a 	mov	r5,r19
   83d20:	100d883a 	mov	r6,r2
   83d24:	0089bb40 	call	89bb4 <__muldf3>
   83d28:	180f883a 	mov	r7,r3
   83d2c:	880b883a 	mov	r5,r17
   83d30:	8009883a 	mov	r4,r16
   83d34:	100d883a 	mov	r6,r2
   83d38:	0089ac00 	call	89ac0 <__subdf3>
   83d3c:	1015883a 	mov	r10,r2
   83d40:	a0800c04 	addi	r2,r20,48
   83d44:	e0800005 	stb	r2,0(fp)
   83d48:	e7000044 	addi	fp,fp,1
   83d4c:	1817883a 	mov	r11,r3
   83d50:	e57fd61e 	bne	fp,r21,83cac <_dtoa_r+0x5d8>
   83d54:	500d883a 	mov	r6,r10
   83d58:	180f883a 	mov	r7,r3
   83d5c:	5009883a 	mov	r4,r10
   83d60:	180b883a 	mov	r5,r3
   83d64:	0089b400 	call	89b40 <__adddf3>
   83d68:	100d883a 	mov	r6,r2
   83d6c:	9009883a 	mov	r4,r18
   83d70:	980b883a 	mov	r5,r19
   83d74:	180f883a 	mov	r7,r3
   83d78:	1021883a 	mov	r16,r2
   83d7c:	1823883a 	mov	r17,r3
   83d80:	008a3f00 	call	8a3f0 <__ltdf2>
   83d84:	10000816 	blt	r2,zero,83da8 <_dtoa_r+0x6d4>
   83d88:	980b883a 	mov	r5,r19
   83d8c:	800d883a 	mov	r6,r16
   83d90:	880f883a 	mov	r7,r17
   83d94:	9009883a 	mov	r4,r18
   83d98:	008a1d00 	call	8a1d0 <__eqdf2>
   83d9c:	1000171e 	bne	r2,zero,83dfc <_dtoa_r+0x728>
   83da0:	a080004c 	andi	r2,r20,1
   83da4:	10001526 	beq	r2,zero,83dfc <_dtoa_r+0x728>
   83da8:	d8800d17 	ldw	r2,52(sp)
   83dac:	d8800415 	stw	r2,16(sp)
   83db0:	e009883a 	mov	r4,fp
   83db4:	213fffc4 	addi	r4,r4,-1
   83db8:	20c00007 	ldb	r3,0(r4)
   83dbc:	00800e44 	movi	r2,57
   83dc0:	1880081e 	bne	r3,r2,83de4 <_dtoa_r+0x710>
   83dc4:	d8800517 	ldw	r2,20(sp)
   83dc8:	113ffa1e 	bne	r2,r4,83db4 <_dtoa_r+0x6e0>
   83dcc:	d8c00417 	ldw	r3,16(sp)
   83dd0:	d9800517 	ldw	r6,20(sp)
   83dd4:	00800c04 	movi	r2,48
   83dd8:	18c00044 	addi	r3,r3,1
   83ddc:	d8c00415 	stw	r3,16(sp)
   83de0:	30800005 	stb	r2,0(r6)
   83de4:	20800003 	ldbu	r2,0(r4)
   83de8:	d8c00417 	ldw	r3,16(sp)
   83dec:	27000044 	addi	fp,r4,1
   83df0:	10800044 	addi	r2,r2,1
   83df4:	d8c00d15 	stw	r3,52(sp)
   83df8:	20800005 	stb	r2,0(r4)
   83dfc:	d9001617 	ldw	r4,88(sp)
   83e00:	d9400717 	ldw	r5,28(sp)
   83e04:	008689c0 	call	8689c <_Bfree>
   83e08:	e0000005 	stb	zero,0(fp)
   83e0c:	d9800d17 	ldw	r6,52(sp)
   83e10:	d8c02717 	ldw	r3,156(sp)
   83e14:	d9002917 	ldw	r4,164(sp)
   83e18:	30800044 	addi	r2,r6,1
   83e1c:	18800015 	stw	r2,0(r3)
   83e20:	20029c26 	beq	r4,zero,84894 <_dtoa_r+0x11c0>
   83e24:	d8c00517 	ldw	r3,20(sp)
   83e28:	27000015 	stw	fp,0(r4)
   83e2c:	003e5d06 	br	837a4 <_dtoa_r+0xd0>
   83e30:	d9800d17 	ldw	r6,52(sp)
   83e34:	00c00274 	movhi	r3,9
   83e38:	18f75d04 	addi	r3,r3,-8844
   83e3c:	d9001217 	ldw	r4,72(sp)
   83e40:	300490fa 	slli	r2,r6,3
   83e44:	d9401317 	ldw	r5,76(sp)
   83e48:	10c5883a 	add	r2,r2,r3
   83e4c:	12000017 	ldw	r8,0(r2)
   83e50:	12400117 	ldw	r9,4(r2)
   83e54:	400d883a 	mov	r6,r8
   83e58:	480f883a 	mov	r7,r9
   83e5c:	008a3f00 	call	8a3f0 <__ltdf2>
   83e60:	1000030e 	bge	r2,zero,83e70 <_dtoa_r+0x79c>
   83e64:	d8800d17 	ldw	r2,52(sp)
   83e68:	10bfffc4 	addi	r2,r2,-1
   83e6c:	d8800d15 	stw	r2,52(sp)
   83e70:	d8000c15 	stw	zero,48(sp)
   83e74:	003ea806 	br	83918 <_dtoa_r+0x244>
   83e78:	d9000b17 	ldw	r4,44(sp)
   83e7c:	202cc03a 	cmpne	r22,r4,zero
   83e80:	b000c71e 	bne	r22,zero,841a0 <_dtoa_r+0xacc>
   83e84:	dc001117 	ldw	r16,68(sp)
   83e88:	dc801017 	ldw	r18,64(sp)
   83e8c:	0027883a 	mov	r19,zero
   83e90:	04000b0e 	bge	zero,r16,83ec0 <_dtoa_r+0x7ec>
   83e94:	d8c00a17 	ldw	r3,40(sp)
   83e98:	00c0090e 	bge	zero,r3,83ec0 <_dtoa_r+0x7ec>
   83e9c:	8005883a 	mov	r2,r16
   83ea0:	1c011316 	blt	r3,r16,842f0 <_dtoa_r+0xc1c>
   83ea4:	d9000a17 	ldw	r4,40(sp)
   83ea8:	d9801117 	ldw	r6,68(sp)
   83eac:	80a1c83a 	sub	r16,r16,r2
   83eb0:	2089c83a 	sub	r4,r4,r2
   83eb4:	308dc83a 	sub	r6,r6,r2
   83eb8:	d9000a15 	stw	r4,40(sp)
   83ebc:	d9801115 	stw	r6,68(sp)
   83ec0:	d8801017 	ldw	r2,64(sp)
   83ec4:	0080150e 	bge	zero,r2,83f1c <_dtoa_r+0x848>
   83ec8:	d8c00b17 	ldw	r3,44(sp)
   83ecc:	1805003a 	cmpeq	r2,r3,zero
   83ed0:	1001c91e 	bne	r2,zero,845f8 <_dtoa_r+0xf24>
   83ed4:	04800e0e 	bge	zero,r18,83f10 <_dtoa_r+0x83c>
   83ed8:	d9001617 	ldw	r4,88(sp)
   83edc:	980b883a 	mov	r5,r19
   83ee0:	900d883a 	mov	r6,r18
   83ee4:	00876e80 	call	876e8 <__pow5mult>
   83ee8:	d9001617 	ldw	r4,88(sp)
   83eec:	d9800717 	ldw	r6,28(sp)
   83ef0:	100b883a 	mov	r5,r2
   83ef4:	1027883a 	mov	r19,r2
   83ef8:	008732c0 	call	8732c <__multiply>
   83efc:	d9001617 	ldw	r4,88(sp)
   83f00:	d9400717 	ldw	r5,28(sp)
   83f04:	1023883a 	mov	r17,r2
   83f08:	008689c0 	call	8689c <_Bfree>
   83f0c:	dc400715 	stw	r17,28(sp)
   83f10:	d9001017 	ldw	r4,64(sp)
   83f14:	248dc83a 	sub	r6,r4,r18
   83f18:	30010e1e 	bne	r6,zero,84354 <_dtoa_r+0xc80>
   83f1c:	d9001617 	ldw	r4,88(sp)
   83f20:	04400044 	movi	r17,1
   83f24:	880b883a 	mov	r5,r17
   83f28:	00875800 	call	87580 <__i2b>
   83f2c:	d9800917 	ldw	r6,36(sp)
   83f30:	1025883a 	mov	r18,r2
   83f34:	0180040e 	bge	zero,r6,83f48 <_dtoa_r+0x874>
   83f38:	d9001617 	ldw	r4,88(sp)
   83f3c:	100b883a 	mov	r5,r2
   83f40:	00876e80 	call	876e8 <__pow5mult>
   83f44:	1025883a 	mov	r18,r2
   83f48:	d8801717 	ldw	r2,92(sp)
   83f4c:	8880f30e 	bge	r17,r2,8431c <_dtoa_r+0xc48>
   83f50:	0023883a 	mov	r17,zero
   83f54:	d9800917 	ldw	r6,36(sp)
   83f58:	30019e1e 	bne	r6,zero,845d4 <_dtoa_r+0xf00>
   83f5c:	00c00044 	movi	r3,1
   83f60:	d9000a17 	ldw	r4,40(sp)
   83f64:	20c5883a 	add	r2,r4,r3
   83f68:	10c007cc 	andi	r3,r2,31
   83f6c:	1800841e 	bne	r3,zero,84180 <_dtoa_r+0xaac>
   83f70:	00800704 	movi	r2,28
   83f74:	d9000a17 	ldw	r4,40(sp)
   83f78:	d9801117 	ldw	r6,68(sp)
   83f7c:	80a1883a 	add	r16,r16,r2
   83f80:	2089883a 	add	r4,r4,r2
   83f84:	308d883a 	add	r6,r6,r2
   83f88:	d9000a15 	stw	r4,40(sp)
   83f8c:	d9801115 	stw	r6,68(sp)
   83f90:	d8801117 	ldw	r2,68(sp)
   83f94:	0080050e 	bge	zero,r2,83fac <_dtoa_r+0x8d8>
   83f98:	d9400717 	ldw	r5,28(sp)
   83f9c:	d9001617 	ldw	r4,88(sp)
   83fa0:	100d883a 	mov	r6,r2
   83fa4:	00871e00 	call	871e0 <__lshift>
   83fa8:	d8800715 	stw	r2,28(sp)
   83fac:	d8c00a17 	ldw	r3,40(sp)
   83fb0:	00c0050e 	bge	zero,r3,83fc8 <_dtoa_r+0x8f4>
   83fb4:	d9001617 	ldw	r4,88(sp)
   83fb8:	900b883a 	mov	r5,r18
   83fbc:	180d883a 	mov	r6,r3
   83fc0:	00871e00 	call	871e0 <__lshift>
   83fc4:	1025883a 	mov	r18,r2
   83fc8:	d9000c17 	ldw	r4,48(sp)
   83fcc:	2005003a 	cmpeq	r2,r4,zero
   83fd0:	10016f26 	beq	r2,zero,84590 <_dtoa_r+0xebc>
   83fd4:	d9000f17 	ldw	r4,60(sp)
   83fd8:	0102170e 	bge	zero,r4,84838 <_dtoa_r+0x1164>
   83fdc:	d9800b17 	ldw	r6,44(sp)
   83fe0:	3005003a 	cmpeq	r2,r6,zero
   83fe4:	1000881e 	bne	r2,zero,84208 <_dtoa_r+0xb34>
   83fe8:	0400050e 	bge	zero,r16,84000 <_dtoa_r+0x92c>
   83fec:	d9001617 	ldw	r4,88(sp)
   83ff0:	980b883a 	mov	r5,r19
   83ff4:	800d883a 	mov	r6,r16
   83ff8:	00871e00 	call	871e0 <__lshift>
   83ffc:	1027883a 	mov	r19,r2
   84000:	8804c03a 	cmpne	r2,r17,zero
   84004:	1002541e 	bne	r2,zero,84958 <_dtoa_r+0x1284>
   84008:	980b883a 	mov	r5,r19
   8400c:	dd800517 	ldw	r22,20(sp)
   84010:	dcc00615 	stw	r19,24(sp)
   84014:	a700004c 	andi	fp,r20,1
   84018:	2827883a 	mov	r19,r5
   8401c:	d9000717 	ldw	r4,28(sp)
   84020:	900b883a 	mov	r5,r18
   84024:	00834900 	call	83490 <quorem>
   84028:	d9000717 	ldw	r4,28(sp)
   8402c:	d9400617 	ldw	r5,24(sp)
   84030:	1023883a 	mov	r17,r2
   84034:	8dc00c04 	addi	r23,r17,48
   84038:	00869f80 	call	869f8 <__mcmp>
   8403c:	d9001617 	ldw	r4,88(sp)
   84040:	900b883a 	mov	r5,r18
   84044:	980d883a 	mov	r6,r19
   84048:	1029883a 	mov	r20,r2
   8404c:	00870540 	call	87054 <__mdiff>
   84050:	102b883a 	mov	r21,r2
   84054:	10800317 	ldw	r2,12(r2)
   84058:	1001281e 	bne	r2,zero,844fc <_dtoa_r+0xe28>
   8405c:	d9000717 	ldw	r4,28(sp)
   84060:	a80b883a 	mov	r5,r21
   84064:	00869f80 	call	869f8 <__mcmp>
   84068:	d9001617 	ldw	r4,88(sp)
   8406c:	1021883a 	mov	r16,r2
   84070:	a80b883a 	mov	r5,r21
   84074:	008689c0 	call	8689c <_Bfree>
   84078:	8000041e 	bne	r16,zero,8408c <_dtoa_r+0x9b8>
   8407c:	d8801717 	ldw	r2,92(sp)
   84080:	1000021e 	bne	r2,zero,8408c <_dtoa_r+0x9b8>
   84084:	e004c03a 	cmpne	r2,fp,zero
   84088:	10011726 	beq	r2,zero,844e8 <_dtoa_r+0xe14>
   8408c:	a0010616 	blt	r20,zero,844a8 <_dtoa_r+0xdd4>
   84090:	a000041e 	bne	r20,zero,840a4 <_dtoa_r+0x9d0>
   84094:	d8c01717 	ldw	r3,92(sp)
   84098:	1800021e 	bne	r3,zero,840a4 <_dtoa_r+0x9d0>
   8409c:	e004c03a 	cmpne	r2,fp,zero
   840a0:	10010126 	beq	r2,zero,844a8 <_dtoa_r+0xdd4>
   840a4:	04023d16 	blt	zero,r16,8499c <_dtoa_r+0x12c8>
   840a8:	b5c00005 	stb	r23,0(r22)
   840ac:	d9800517 	ldw	r6,20(sp)
   840b0:	d9000f17 	ldw	r4,60(sp)
   840b4:	b5800044 	addi	r22,r22,1
   840b8:	3105883a 	add	r2,r6,r4
   840bc:	b0806526 	beq	r22,r2,84254 <_dtoa_r+0xb80>
   840c0:	d9400717 	ldw	r5,28(sp)
   840c4:	d9001617 	ldw	r4,88(sp)
   840c8:	01800284 	movi	r6,10
   840cc:	000f883a 	mov	r7,zero
   840d0:	00875bc0 	call	875bc <__multadd>
   840d4:	d8800715 	stw	r2,28(sp)
   840d8:	d8800617 	ldw	r2,24(sp)
   840dc:	14c10c26 	beq	r2,r19,84510 <_dtoa_r+0xe3c>
   840e0:	d9400617 	ldw	r5,24(sp)
   840e4:	d9001617 	ldw	r4,88(sp)
   840e8:	01800284 	movi	r6,10
   840ec:	000f883a 	mov	r7,zero
   840f0:	00875bc0 	call	875bc <__multadd>
   840f4:	d9001617 	ldw	r4,88(sp)
   840f8:	980b883a 	mov	r5,r19
   840fc:	01800284 	movi	r6,10
   84100:	000f883a 	mov	r7,zero
   84104:	d8800615 	stw	r2,24(sp)
   84108:	00875bc0 	call	875bc <__multadd>
   8410c:	1027883a 	mov	r19,r2
   84110:	003fc206 	br	8401c <_dtoa_r+0x948>
   84114:	2445c83a 	sub	r2,r4,r17
   84118:	a088983a 	sll	r4,r20,r2
   8411c:	003e4b06 	br	83a4c <_dtoa_r+0x378>
   84120:	01bfffc4 	movi	r6,-1
   84124:	00800044 	movi	r2,1
   84128:	d9800e15 	stw	r6,56(sp)
   8412c:	d9800f15 	stw	r6,60(sp)
   84130:	d8800b15 	stw	r2,44(sp)
   84134:	d8c01617 	ldw	r3,88(sp)
   84138:	008005c4 	movi	r2,23
   8413c:	18001115 	stw	zero,68(r3)
   84140:	1580082e 	bgeu	r2,r22,84164 <_dtoa_r+0xa90>
   84144:	00c00104 	movi	r3,4
   84148:	0009883a 	mov	r4,zero
   8414c:	18c7883a 	add	r3,r3,r3
   84150:	18800504 	addi	r2,r3,20
   84154:	21000044 	addi	r4,r4,1
   84158:	b0bffc2e 	bgeu	r22,r2,8414c <_dtoa_r+0xa78>
   8415c:	d9801617 	ldw	r6,88(sp)
   84160:	31001115 	stw	r4,68(r6)
   84164:	dc000f17 	ldw	r16,60(sp)
   84168:	003e4b06 	br	83a98 <_dtoa_r+0x3c4>
   8416c:	d9801717 	ldw	r6,92(sp)
   84170:	0023883a 	mov	r17,zero
   84174:	31bfff04 	addi	r6,r6,-4
   84178:	d9801715 	stw	r6,92(sp)
   8417c:	003df806 	br	83960 <_dtoa_r+0x28c>
   84180:	00800804 	movi	r2,32
   84184:	10c9c83a 	sub	r4,r2,r3
   84188:	00c00104 	movi	r3,4
   8418c:	19005a16 	blt	r3,r4,842f8 <_dtoa_r+0xc24>
   84190:	008000c4 	movi	r2,3
   84194:	113f7e16 	blt	r2,r4,83f90 <_dtoa_r+0x8bc>
   84198:	20800704 	addi	r2,r4,28
   8419c:	003f7506 	br	83f74 <_dtoa_r+0x8a0>
   841a0:	d9801717 	ldw	r6,92(sp)
   841a4:	00800044 	movi	r2,1
   841a8:	1180a10e 	bge	r2,r6,84430 <_dtoa_r+0xd5c>
   841ac:	d9800f17 	ldw	r6,60(sp)
   841b0:	d8c01017 	ldw	r3,64(sp)
   841b4:	30bfffc4 	addi	r2,r6,-1
   841b8:	1881c616 	blt	r3,r2,848d4 <_dtoa_r+0x1200>
   841bc:	18a5c83a 	sub	r18,r3,r2
   841c0:	d8800f17 	ldw	r2,60(sp)
   841c4:	10026216 	blt	r2,zero,84b50 <_dtoa_r+0x147c>
   841c8:	dc001117 	ldw	r16,68(sp)
   841cc:	1007883a 	mov	r3,r2
   841d0:	d9800a17 	ldw	r6,40(sp)
   841d4:	d8801117 	ldw	r2,68(sp)
   841d8:	d9001617 	ldw	r4,88(sp)
   841dc:	30cd883a 	add	r6,r6,r3
   841e0:	10c5883a 	add	r2,r2,r3
   841e4:	01400044 	movi	r5,1
   841e8:	d9800a15 	stw	r6,40(sp)
   841ec:	d8801115 	stw	r2,68(sp)
   841f0:	00875800 	call	87580 <__i2b>
   841f4:	1027883a 	mov	r19,r2
   841f8:	003f2506 	br	83e90 <_dtoa_r+0x7bc>
   841fc:	00c00274 	movhi	r3,9
   84200:	18f73f04 	addi	r3,r3,-8964
   84204:	003d6706 	br	837a4 <_dtoa_r+0xd0>
   84208:	dd800517 	ldw	r22,20(sp)
   8420c:	04000044 	movi	r16,1
   84210:	00000706 	br	84230 <_dtoa_r+0xb5c>
   84214:	d9400717 	ldw	r5,28(sp)
   84218:	d9001617 	ldw	r4,88(sp)
   8421c:	01800284 	movi	r6,10
   84220:	000f883a 	mov	r7,zero
   84224:	00875bc0 	call	875bc <__multadd>
   84228:	d8800715 	stw	r2,28(sp)
   8422c:	84000044 	addi	r16,r16,1
   84230:	d9000717 	ldw	r4,28(sp)
   84234:	900b883a 	mov	r5,r18
   84238:	00834900 	call	83490 <quorem>
   8423c:	15c00c04 	addi	r23,r2,48
   84240:	b5c00005 	stb	r23,0(r22)
   84244:	d8c00f17 	ldw	r3,60(sp)
   84248:	b5800044 	addi	r22,r22,1
   8424c:	80fff116 	blt	r16,r3,84214 <_dtoa_r+0xb40>
   84250:	d8000615 	stw	zero,24(sp)
   84254:	d9400717 	ldw	r5,28(sp)
   84258:	d9001617 	ldw	r4,88(sp)
   8425c:	01800044 	movi	r6,1
   84260:	00871e00 	call	871e0 <__lshift>
   84264:	1009883a 	mov	r4,r2
   84268:	900b883a 	mov	r5,r18
   8426c:	d8800715 	stw	r2,28(sp)
   84270:	00869f80 	call	869f8 <__mcmp>
   84274:	00803c0e 	bge	zero,r2,84368 <_dtoa_r+0xc94>
   84278:	b009883a 	mov	r4,r22
   8427c:	213fffc4 	addi	r4,r4,-1
   84280:	21400003 	ldbu	r5,0(r4)
   84284:	00800e44 	movi	r2,57
   84288:	28c03fcc 	andi	r3,r5,255
   8428c:	18c0201c 	xori	r3,r3,128
   84290:	18ffe004 	addi	r3,r3,-128
   84294:	1881981e 	bne	r3,r2,848f8 <_dtoa_r+0x1224>
   84298:	d9800517 	ldw	r6,20(sp)
   8429c:	21bff71e 	bne	r4,r6,8427c <_dtoa_r+0xba8>
   842a0:	d8800d17 	ldw	r2,52(sp)
   842a4:	37000044 	addi	fp,r6,1
   842a8:	10800044 	addi	r2,r2,1
   842ac:	d8800d15 	stw	r2,52(sp)
   842b0:	00800c44 	movi	r2,49
   842b4:	30800005 	stb	r2,0(r6)
   842b8:	d9001617 	ldw	r4,88(sp)
   842bc:	900b883a 	mov	r5,r18
   842c0:	008689c0 	call	8689c <_Bfree>
   842c4:	983ecd26 	beq	r19,zero,83dfc <_dtoa_r+0x728>
   842c8:	d8c00617 	ldw	r3,24(sp)
   842cc:	18000426 	beq	r3,zero,842e0 <_dtoa_r+0xc0c>
   842d0:	1cc00326 	beq	r3,r19,842e0 <_dtoa_r+0xc0c>
   842d4:	d9001617 	ldw	r4,88(sp)
   842d8:	180b883a 	mov	r5,r3
   842dc:	008689c0 	call	8689c <_Bfree>
   842e0:	d9001617 	ldw	r4,88(sp)
   842e4:	980b883a 	mov	r5,r19
   842e8:	008689c0 	call	8689c <_Bfree>
   842ec:	003ec306 	br	83dfc <_dtoa_r+0x728>
   842f0:	1805883a 	mov	r2,r3
   842f4:	003eeb06 	br	83ea4 <_dtoa_r+0x7d0>
   842f8:	d9800a17 	ldw	r6,40(sp)
   842fc:	d8c01117 	ldw	r3,68(sp)
   84300:	20bfff04 	addi	r2,r4,-4
   84304:	308d883a 	add	r6,r6,r2
   84308:	1887883a 	add	r3,r3,r2
   8430c:	80a1883a 	add	r16,r16,r2
   84310:	d9800a15 	stw	r6,40(sp)
   84314:	d8c01115 	stw	r3,68(sp)
   84318:	003f1d06 	br	83f90 <_dtoa_r+0x8bc>
   8431c:	a03f0c1e 	bne	r20,zero,83f50 <_dtoa_r+0x87c>
   84320:	00800434 	movhi	r2,16
   84324:	10bfffc4 	addi	r2,r2,-1
   84328:	a884703a 	and	r2,r21,r2
   8432c:	103f081e 	bne	r2,zero,83f50 <_dtoa_r+0x87c>
   84330:	a89ffc2c 	andhi	r2,r21,32752
   84334:	103f0626 	beq	r2,zero,83f50 <_dtoa_r+0x87c>
   84338:	d8c01117 	ldw	r3,68(sp)
   8433c:	d9000a17 	ldw	r4,40(sp)
   84340:	18c00044 	addi	r3,r3,1
   84344:	21000044 	addi	r4,r4,1
   84348:	d8c01115 	stw	r3,68(sp)
   8434c:	d9000a15 	stw	r4,40(sp)
   84350:	003f0006 	br	83f54 <_dtoa_r+0x880>
   84354:	d9400717 	ldw	r5,28(sp)
   84358:	d9001617 	ldw	r4,88(sp)
   8435c:	00876e80 	call	876e8 <__pow5mult>
   84360:	d8800715 	stw	r2,28(sp)
   84364:	003eed06 	br	83f1c <_dtoa_r+0x848>
   84368:	1000021e 	bne	r2,zero,84374 <_dtoa_r+0xca0>
   8436c:	b880004c 	andi	r2,r23,1
   84370:	103fc11e 	bne	r2,zero,84278 <_dtoa_r+0xba4>
   84374:	b5bfffc4 	addi	r22,r22,-1
   84378:	b0c00007 	ldb	r3,0(r22)
   8437c:	00800c04 	movi	r2,48
   84380:	18bffc26 	beq	r3,r2,84374 <_dtoa_r+0xca0>
   84384:	b7000044 	addi	fp,r22,1
   84388:	003fcb06 	br	842b8 <_dtoa_r+0xbe4>
   8438c:	d9800d17 	ldw	r6,52(sp)
   84390:	018fc83a 	sub	r7,zero,r6
   84394:	3801f726 	beq	r7,zero,84b74 <_dtoa_r+0x14a0>
   84398:	398003cc 	andi	r6,r7,15
   8439c:	300c90fa 	slli	r6,r6,3
   843a0:	01400274 	movhi	r5,9
   843a4:	29775d04 	addi	r5,r5,-8844
   843a8:	d9001217 	ldw	r4,72(sp)
   843ac:	314d883a 	add	r6,r6,r5
   843b0:	30c00117 	ldw	r3,4(r6)
   843b4:	30800017 	ldw	r2,0(r6)
   843b8:	d9401317 	ldw	r5,76(sp)
   843bc:	3821d13a 	srai	r16,r7,4
   843c0:	100d883a 	mov	r6,r2
   843c4:	180f883a 	mov	r7,r3
   843c8:	0089bb40 	call	89bb4 <__muldf3>
   843cc:	1011883a 	mov	r8,r2
   843d0:	1813883a 	mov	r9,r3
   843d4:	1029883a 	mov	r20,r2
   843d8:	182b883a 	mov	r21,r3
   843dc:	8001e526 	beq	r16,zero,84b74 <_dtoa_r+0x14a0>
   843e0:	05800084 	movi	r22,2
   843e4:	04400274 	movhi	r17,9
   843e8:	8c778f04 	addi	r17,r17,-8644
   843ec:	8080004c 	andi	r2,r16,1
   843f0:	1005003a 	cmpeq	r2,r2,zero
   843f4:	1000081e 	bne	r2,zero,84418 <_dtoa_r+0xd44>
   843f8:	89800017 	ldw	r6,0(r17)
   843fc:	89c00117 	ldw	r7,4(r17)
   84400:	480b883a 	mov	r5,r9
   84404:	4009883a 	mov	r4,r8
   84408:	0089bb40 	call	89bb4 <__muldf3>
   8440c:	1011883a 	mov	r8,r2
   84410:	b5800044 	addi	r22,r22,1
   84414:	1813883a 	mov	r9,r3
   84418:	8021d07a 	srai	r16,r16,1
   8441c:	8c400204 	addi	r17,r17,8
   84420:	803ff21e 	bne	r16,zero,843ec <_dtoa_r+0xd18>
   84424:	4029883a 	mov	r20,r8
   84428:	482b883a 	mov	r21,r9
   8442c:	003dca06 	br	83b58 <_dtoa_r+0x484>
   84430:	d9000817 	ldw	r4,32(sp)
   84434:	2005003a 	cmpeq	r2,r4,zero
   84438:	1001f61e 	bne	r2,zero,84c14 <_dtoa_r+0x1540>
   8443c:	dc001117 	ldw	r16,68(sp)
   84440:	dc801017 	ldw	r18,64(sp)
   84444:	18c10cc4 	addi	r3,r3,1075
   84448:	003f6106 	br	841d0 <_dtoa_r+0xafc>
   8444c:	d8000b15 	stw	zero,44(sp)
   84450:	d9802617 	ldw	r6,152(sp)
   84454:	d8c00d17 	ldw	r3,52(sp)
   84458:	30800044 	addi	r2,r6,1
   8445c:	18ad883a 	add	r22,r3,r2
   84460:	b13fffc4 	addi	r4,r22,-1
   84464:	d9000e15 	stw	r4,56(sp)
   84468:	0581f60e 	bge	zero,r22,84c44 <_dtoa_r+0x1570>
   8446c:	dd800f15 	stw	r22,60(sp)
   84470:	003f3006 	br	84134 <_dtoa_r+0xa60>
   84474:	d8000b15 	stw	zero,44(sp)
   84478:	d9002617 	ldw	r4,152(sp)
   8447c:	0101eb0e 	bge	zero,r4,84c2c <_dtoa_r+0x1558>
   84480:	202d883a 	mov	r22,r4
   84484:	d9000e15 	stw	r4,56(sp)
   84488:	d9000f15 	stw	r4,60(sp)
   8448c:	003f2906 	br	84134 <_dtoa_r+0xa60>
   84490:	01800044 	movi	r6,1
   84494:	d9800b15 	stw	r6,44(sp)
   84498:	003ff706 	br	84478 <_dtoa_r+0xda4>
   8449c:	01000044 	movi	r4,1
   844a0:	d9000b15 	stw	r4,44(sp)
   844a4:	003fea06 	br	84450 <_dtoa_r+0xd7c>
   844a8:	04000c0e 	bge	zero,r16,844dc <_dtoa_r+0xe08>
   844ac:	d9400717 	ldw	r5,28(sp)
   844b0:	d9001617 	ldw	r4,88(sp)
   844b4:	01800044 	movi	r6,1
   844b8:	00871e00 	call	871e0 <__lshift>
   844bc:	1009883a 	mov	r4,r2
   844c0:	900b883a 	mov	r5,r18
   844c4:	d8800715 	stw	r2,28(sp)
   844c8:	00869f80 	call	869f8 <__mcmp>
   844cc:	0081e00e 	bge	zero,r2,84c50 <_dtoa_r+0x157c>
   844d0:	bdc00044 	addi	r23,r23,1
   844d4:	00800e84 	movi	r2,58
   844d8:	b881a226 	beq	r23,r2,84b64 <_dtoa_r+0x1490>
   844dc:	b7000044 	addi	fp,r22,1
   844e0:	b5c00005 	stb	r23,0(r22)
   844e4:	003f7406 	br	842b8 <_dtoa_r+0xbe4>
   844e8:	00800e44 	movi	r2,57
   844ec:	b8819d26 	beq	r23,r2,84b64 <_dtoa_r+0x1490>
   844f0:	053ffa0e 	bge	zero,r20,844dc <_dtoa_r+0xe08>
   844f4:	8dc00c44 	addi	r23,r17,49
   844f8:	003ff806 	br	844dc <_dtoa_r+0xe08>
   844fc:	d9001617 	ldw	r4,88(sp)
   84500:	a80b883a 	mov	r5,r21
   84504:	04000044 	movi	r16,1
   84508:	008689c0 	call	8689c <_Bfree>
   8450c:	003edf06 	br	8408c <_dtoa_r+0x9b8>
   84510:	d9001617 	ldw	r4,88(sp)
   84514:	980b883a 	mov	r5,r19
   84518:	01800284 	movi	r6,10
   8451c:	000f883a 	mov	r7,zero
   84520:	00875bc0 	call	875bc <__multadd>
   84524:	1027883a 	mov	r19,r2
   84528:	d8800615 	stw	r2,24(sp)
   8452c:	003ebb06 	br	8401c <_dtoa_r+0x948>
   84530:	d9801117 	ldw	r6,68(sp)
   84534:	d8800d17 	ldw	r2,52(sp)
   84538:	d8000915 	stw	zero,36(sp)
   8453c:	308dc83a 	sub	r6,r6,r2
   84540:	0087c83a 	sub	r3,zero,r2
   84544:	d9801115 	stw	r6,68(sp)
   84548:	d8c01015 	stw	r3,64(sp)
   8454c:	003cfe06 	br	83948 <_dtoa_r+0x274>
   84550:	018dc83a 	sub	r6,zero,r6
   84554:	d9801115 	stw	r6,68(sp)
   84558:	d8000a15 	stw	zero,40(sp)
   8455c:	003cf306 	br	8392c <_dtoa_r+0x258>
   84560:	d9000d17 	ldw	r4,52(sp)
   84564:	008a4780 	call	8a478 <__floatsidf>
   84568:	880b883a 	mov	r5,r17
   8456c:	8009883a 	mov	r4,r16
   84570:	180f883a 	mov	r7,r3
   84574:	100d883a 	mov	r6,r2
   84578:	008a2580 	call	8a258 <__nedf2>
   8457c:	103ce126 	beq	r2,zero,83904 <_dtoa_r+0x230>
   84580:	d9800d17 	ldw	r6,52(sp)
   84584:	31bfffc4 	addi	r6,r6,-1
   84588:	d9800d15 	stw	r6,52(sp)
   8458c:	003cdd06 	br	83904 <_dtoa_r+0x230>
   84590:	d9000717 	ldw	r4,28(sp)
   84594:	900b883a 	mov	r5,r18
   84598:	00869f80 	call	869f8 <__mcmp>
   8459c:	103e8d0e 	bge	r2,zero,83fd4 <_dtoa_r+0x900>
   845a0:	d9400717 	ldw	r5,28(sp)
   845a4:	d9001617 	ldw	r4,88(sp)
   845a8:	01800284 	movi	r6,10
   845ac:	000f883a 	mov	r7,zero
   845b0:	00875bc0 	call	875bc <__multadd>
   845b4:	d9800d17 	ldw	r6,52(sp)
   845b8:	d8800715 	stw	r2,28(sp)
   845bc:	31bfffc4 	addi	r6,r6,-1
   845c0:	d9800d15 	stw	r6,52(sp)
   845c4:	b001a71e 	bne	r22,zero,84c64 <_dtoa_r+0x1590>
   845c8:	d8800e17 	ldw	r2,56(sp)
   845cc:	d8800f15 	stw	r2,60(sp)
   845d0:	003e8006 	br	83fd4 <_dtoa_r+0x900>
   845d4:	90800417 	ldw	r2,16(r18)
   845d8:	1085883a 	add	r2,r2,r2
   845dc:	1085883a 	add	r2,r2,r2
   845e0:	1485883a 	add	r2,r2,r18
   845e4:	11000417 	ldw	r4,16(r2)
   845e8:	00868c40 	call	868c4 <__hi0bits>
   845ec:	00c00804 	movi	r3,32
   845f0:	1887c83a 	sub	r3,r3,r2
   845f4:	003e5a06 	br	83f60 <_dtoa_r+0x88c>
   845f8:	d9400717 	ldw	r5,28(sp)
   845fc:	d9801017 	ldw	r6,64(sp)
   84600:	d9001617 	ldw	r4,88(sp)
   84604:	00876e80 	call	876e8 <__pow5mult>
   84608:	d8800715 	stw	r2,28(sp)
   8460c:	003e4306 	br	83f1c <_dtoa_r+0x848>
   84610:	d9800f17 	ldw	r6,60(sp)
   84614:	d8800d17 	ldw	r2,52(sp)
   84618:	d9800315 	stw	r6,12(sp)
   8461c:	d8800415 	stw	r2,16(sp)
   84620:	d8c00b17 	ldw	r3,44(sp)
   84624:	1805003a 	cmpeq	r2,r3,zero
   84628:	1000e21e 	bne	r2,zero,849b4 <_dtoa_r+0x12e0>
   8462c:	d9000317 	ldw	r4,12(sp)
   84630:	0005883a 	mov	r2,zero
   84634:	00cff834 	movhi	r3,16352
   84638:	200c90fa 	slli	r6,r4,3
   8463c:	01000274 	movhi	r4,9
   84640:	21375d04 	addi	r4,r4,-8844
   84644:	180b883a 	mov	r5,r3
   84648:	310d883a 	add	r6,r6,r4
   8464c:	327fff17 	ldw	r9,-4(r6)
   84650:	323ffe17 	ldw	r8,-8(r6)
   84654:	1009883a 	mov	r4,r2
   84658:	480f883a 	mov	r7,r9
   8465c:	400d883a 	mov	r6,r8
   84660:	0089f780 	call	89f78 <__divdf3>
   84664:	180b883a 	mov	r5,r3
   84668:	b00d883a 	mov	r6,r22
   8466c:	b80f883a 	mov	r7,r23
   84670:	1009883a 	mov	r4,r2
   84674:	0089ac00 	call	89ac0 <__subdf3>
   84678:	a80b883a 	mov	r5,r21
   8467c:	a009883a 	mov	r4,r20
   84680:	d8c01915 	stw	r3,100(sp)
   84684:	d8801815 	stw	r2,96(sp)
   84688:	008a5700 	call	8a570 <__fixdfsi>
   8468c:	1009883a 	mov	r4,r2
   84690:	1027883a 	mov	r19,r2
   84694:	008a4780 	call	8a478 <__floatsidf>
   84698:	a80b883a 	mov	r5,r21
   8469c:	a009883a 	mov	r4,r20
   846a0:	180f883a 	mov	r7,r3
   846a4:	100d883a 	mov	r6,r2
   846a8:	0089ac00 	call	89ac0 <__subdf3>
   846ac:	d9801817 	ldw	r6,96(sp)
   846b0:	1823883a 	mov	r17,r3
   846b4:	d8801415 	stw	r2,80(sp)
   846b8:	302d883a 	mov	r22,r6
   846bc:	d9800517 	ldw	r6,20(sp)
   846c0:	9cc00c04 	addi	r19,r19,48
   846c4:	dc401515 	stw	r17,84(sp)
   846c8:	d8c01917 	ldw	r3,100(sp)
   846cc:	34c00005 	stb	r19,0(r6)
   846d0:	d8800517 	ldw	r2,20(sp)
   846d4:	d9401917 	ldw	r5,100(sp)
   846d8:	d9801417 	ldw	r6,80(sp)
   846dc:	b009883a 	mov	r4,r22
   846e0:	880f883a 	mov	r7,r17
   846e4:	182f883a 	mov	r23,r3
   846e8:	17000044 	addi	fp,r2,1
   846ec:	008a2e00 	call	8a2e0 <__gtdf2>
   846f0:	00804e16 	blt	zero,r2,8482c <_dtoa_r+0x1158>
   846f4:	d9801417 	ldw	r6,80(sp)
   846f8:	0005883a 	mov	r2,zero
   846fc:	00cffc34 	movhi	r3,16368
   84700:	180b883a 	mov	r5,r3
   84704:	880f883a 	mov	r7,r17
   84708:	1009883a 	mov	r4,r2
   8470c:	0089ac00 	call	89ac0 <__subdf3>
   84710:	d9401917 	ldw	r5,100(sp)
   84714:	180f883a 	mov	r7,r3
   84718:	b009883a 	mov	r4,r22
   8471c:	100d883a 	mov	r6,r2
   84720:	008a2e00 	call	8a2e0 <__gtdf2>
   84724:	00bda216 	blt	zero,r2,83db0 <_dtoa_r+0x6dc>
   84728:	d8c00317 	ldw	r3,12(sp)
   8472c:	00800044 	movi	r2,1
   84730:	10c01216 	blt	r2,r3,8477c <_dtoa_r+0x10a8>
   84734:	003d4506 	br	83c4c <_dtoa_r+0x578>
   84738:	d9801417 	ldw	r6,80(sp)
   8473c:	0005883a 	mov	r2,zero
   84740:	00cffc34 	movhi	r3,16368
   84744:	180b883a 	mov	r5,r3
   84748:	880f883a 	mov	r7,r17
   8474c:	1009883a 	mov	r4,r2
   84750:	0089ac00 	call	89ac0 <__subdf3>
   84754:	d9c01b17 	ldw	r7,108(sp)
   84758:	180b883a 	mov	r5,r3
   8475c:	1009883a 	mov	r4,r2
   84760:	b00d883a 	mov	r6,r22
   84764:	008a3f00 	call	8a3f0 <__ltdf2>
   84768:	103d9116 	blt	r2,zero,83db0 <_dtoa_r+0x6dc>
   8476c:	d9800517 	ldw	r6,20(sp)
   84770:	d9000317 	ldw	r4,12(sp)
   84774:	3105883a 	add	r2,r6,r4
   84778:	e0bd3426 	beq	fp,r2,83c4c <_dtoa_r+0x578>
   8477c:	04500934 	movhi	r17,16420
   84780:	0021883a 	mov	r16,zero
   84784:	b80b883a 	mov	r5,r23
   84788:	b009883a 	mov	r4,r22
   8478c:	800d883a 	mov	r6,r16
   84790:	880f883a 	mov	r7,r17
   84794:	0089bb40 	call	89bb4 <__muldf3>
   84798:	d9401517 	ldw	r5,84(sp)
   8479c:	d9001417 	ldw	r4,80(sp)
   847a0:	880f883a 	mov	r7,r17
   847a4:	000d883a 	mov	r6,zero
   847a8:	d8801a15 	stw	r2,104(sp)
   847ac:	d8c01b15 	stw	r3,108(sp)
   847b0:	0089bb40 	call	89bb4 <__muldf3>
   847b4:	180b883a 	mov	r5,r3
   847b8:	1009883a 	mov	r4,r2
   847bc:	1823883a 	mov	r17,r3
   847c0:	1021883a 	mov	r16,r2
   847c4:	008a5700 	call	8a570 <__fixdfsi>
   847c8:	1009883a 	mov	r4,r2
   847cc:	102b883a 	mov	r21,r2
   847d0:	008a4780 	call	8a478 <__floatsidf>
   847d4:	880b883a 	mov	r5,r17
   847d8:	8009883a 	mov	r4,r16
   847dc:	180f883a 	mov	r7,r3
   847e0:	100d883a 	mov	r6,r2
   847e4:	0089ac00 	call	89ac0 <__subdf3>
   847e8:	1021883a 	mov	r16,r2
   847ec:	d9001b17 	ldw	r4,108(sp)
   847f0:	1823883a 	mov	r17,r3
   847f4:	dc001415 	stw	r16,80(sp)
   847f8:	ad400c04 	addi	r21,r21,48
   847fc:	dc401515 	stw	r17,84(sp)
   84800:	d8801a17 	ldw	r2,104(sp)
   84804:	e5400005 	stb	r21,0(fp)
   84808:	202f883a 	mov	r23,r4
   8480c:	d9c01b17 	ldw	r7,108(sp)
   84810:	d9001417 	ldw	r4,80(sp)
   84814:	880b883a 	mov	r5,r17
   84818:	100d883a 	mov	r6,r2
   8481c:	102d883a 	mov	r22,r2
   84820:	e7000044 	addi	fp,fp,1
   84824:	008a3f00 	call	8a3f0 <__ltdf2>
   84828:	103fc30e 	bge	r2,zero,84738 <_dtoa_r+0x1064>
   8482c:	d9000417 	ldw	r4,16(sp)
   84830:	d9000d15 	stw	r4,52(sp)
   84834:	003d7106 	br	83dfc <_dtoa_r+0x728>
   84838:	d9801717 	ldw	r6,92(sp)
   8483c:	00800084 	movi	r2,2
   84840:	11bde60e 	bge	r2,r6,83fdc <_dtoa_r+0x908>
   84844:	203cfb1e 	bne	r4,zero,83c34 <_dtoa_r+0x560>
   84848:	d9001617 	ldw	r4,88(sp)
   8484c:	900b883a 	mov	r5,r18
   84850:	01800144 	movi	r6,5
   84854:	000f883a 	mov	r7,zero
   84858:	00875bc0 	call	875bc <__multadd>
   8485c:	d9000717 	ldw	r4,28(sp)
   84860:	100b883a 	mov	r5,r2
   84864:	1025883a 	mov	r18,r2
   84868:	00869f80 	call	869f8 <__mcmp>
   8486c:	00bcf10e 	bge	zero,r2,83c34 <_dtoa_r+0x560>
   84870:	d8c00d17 	ldw	r3,52(sp)
   84874:	d9000517 	ldw	r4,20(sp)
   84878:	d8000615 	stw	zero,24(sp)
   8487c:	18c00044 	addi	r3,r3,1
   84880:	d8c00d15 	stw	r3,52(sp)
   84884:	00800c44 	movi	r2,49
   84888:	27000044 	addi	fp,r4,1
   8488c:	20800005 	stb	r2,0(r4)
   84890:	003e8906 	br	842b8 <_dtoa_r+0xbe4>
   84894:	d8c00517 	ldw	r3,20(sp)
   84898:	003bc206 	br	837a4 <_dtoa_r+0xd0>
   8489c:	01800274 	movhi	r6,9
   848a0:	31b78f04 	addi	r6,r6,-8644
   848a4:	30c00917 	ldw	r3,36(r6)
   848a8:	30800817 	ldw	r2,32(r6)
   848ac:	d9001217 	ldw	r4,72(sp)
   848b0:	d9401317 	ldw	r5,76(sp)
   848b4:	180f883a 	mov	r7,r3
   848b8:	100d883a 	mov	r6,r2
   848bc:	0089f780 	call	89f78 <__divdf3>
   848c0:	948003cc 	andi	r18,r18,15
   848c4:	058000c4 	movi	r22,3
   848c8:	1029883a 	mov	r20,r2
   848cc:	182b883a 	mov	r21,r3
   848d0:	003c8906 	br	83af8 <_dtoa_r+0x424>
   848d4:	d9001017 	ldw	r4,64(sp)
   848d8:	d9800917 	ldw	r6,36(sp)
   848dc:	0025883a 	mov	r18,zero
   848e0:	1105c83a 	sub	r2,r2,r4
   848e4:	2089883a 	add	r4,r4,r2
   848e8:	308d883a 	add	r6,r6,r2
   848ec:	d9001015 	stw	r4,64(sp)
   848f0:	d9800915 	stw	r6,36(sp)
   848f4:	003e3206 	br	841c0 <_dtoa_r+0xaec>
   848f8:	28800044 	addi	r2,r5,1
   848fc:	27000044 	addi	fp,r4,1
   84900:	20800005 	stb	r2,0(r4)
   84904:	003e6c06 	br	842b8 <_dtoa_r+0xbe4>
   84908:	d8800f17 	ldw	r2,60(sp)
   8490c:	00bce016 	blt	zero,r2,83c90 <_dtoa_r+0x5bc>
   84910:	d9800f17 	ldw	r6,60(sp)
   84914:	303cc51e 	bne	r6,zero,83c2c <_dtoa_r+0x558>
   84918:	0005883a 	mov	r2,zero
   8491c:	00d00534 	movhi	r3,16404
   84920:	980b883a 	mov	r5,r19
   84924:	180f883a 	mov	r7,r3
   84928:	9009883a 	mov	r4,r18
   8492c:	100d883a 	mov	r6,r2
   84930:	0089bb40 	call	89bb4 <__muldf3>
   84934:	180b883a 	mov	r5,r3
   84938:	a80f883a 	mov	r7,r21
   8493c:	1009883a 	mov	r4,r2
   84940:	a00d883a 	mov	r6,r20
   84944:	008a3680 	call	8a368 <__gedf2>
   84948:	103cb80e 	bge	r2,zero,83c2c <_dtoa_r+0x558>
   8494c:	0027883a 	mov	r19,zero
   84950:	0025883a 	mov	r18,zero
   84954:	003fc606 	br	84870 <_dtoa_r+0x119c>
   84958:	99400117 	ldw	r5,4(r19)
   8495c:	d9001617 	ldw	r4,88(sp)
   84960:	0086e1c0 	call	86e1c <_Balloc>
   84964:	99800417 	ldw	r6,16(r19)
   84968:	11000304 	addi	r4,r2,12
   8496c:	99400304 	addi	r5,r19,12
   84970:	318d883a 	add	r6,r6,r6
   84974:	318d883a 	add	r6,r6,r6
   84978:	31800204 	addi	r6,r6,8
   8497c:	1023883a 	mov	r17,r2
   84980:	00866840 	call	86684 <memcpy>
   84984:	d9001617 	ldw	r4,88(sp)
   84988:	880b883a 	mov	r5,r17
   8498c:	01800044 	movi	r6,1
   84990:	00871e00 	call	871e0 <__lshift>
   84994:	100b883a 	mov	r5,r2
   84998:	003d9c06 	br	8400c <_dtoa_r+0x938>
   8499c:	00800e44 	movi	r2,57
   849a0:	b8807026 	beq	r23,r2,84b64 <_dtoa_r+0x1490>
   849a4:	b8800044 	addi	r2,r23,1
   849a8:	b7000044 	addi	fp,r22,1
   849ac:	b0800005 	stb	r2,0(r22)
   849b0:	003e4106 	br	842b8 <_dtoa_r+0xbe4>
   849b4:	d8800317 	ldw	r2,12(sp)
   849b8:	01800274 	movhi	r6,9
   849bc:	31b75d04 	addi	r6,r6,-8844
   849c0:	b009883a 	mov	r4,r22
   849c4:	100e90fa 	slli	r7,r2,3
   849c8:	b80b883a 	mov	r5,r23
   849cc:	398f883a 	add	r7,r7,r6
   849d0:	38bffe17 	ldw	r2,-8(r7)
   849d4:	d9800517 	ldw	r6,20(sp)
   849d8:	38ffff17 	ldw	r3,-4(r7)
   849dc:	37000044 	addi	fp,r6,1
   849e0:	180f883a 	mov	r7,r3
   849e4:	100d883a 	mov	r6,r2
   849e8:	0089bb40 	call	89bb4 <__muldf3>
   849ec:	a80b883a 	mov	r5,r21
   849f0:	a009883a 	mov	r4,r20
   849f4:	182f883a 	mov	r23,r3
   849f8:	102d883a 	mov	r22,r2
   849fc:	008a5700 	call	8a570 <__fixdfsi>
   84a00:	1009883a 	mov	r4,r2
   84a04:	1027883a 	mov	r19,r2
   84a08:	008a4780 	call	8a478 <__floatsidf>
   84a0c:	a80b883a 	mov	r5,r21
   84a10:	a009883a 	mov	r4,r20
   84a14:	180f883a 	mov	r7,r3
   84a18:	100d883a 	mov	r6,r2
   84a1c:	0089ac00 	call	89ac0 <__subdf3>
   84a20:	180b883a 	mov	r5,r3
   84a24:	d8c00517 	ldw	r3,20(sp)
   84a28:	9cc00c04 	addi	r19,r19,48
   84a2c:	1009883a 	mov	r4,r2
   84a30:	1cc00005 	stb	r19,0(r3)
   84a34:	2021883a 	mov	r16,r4
   84a38:	d9000317 	ldw	r4,12(sp)
   84a3c:	00800044 	movi	r2,1
   84a40:	2823883a 	mov	r17,r5
   84a44:	20802226 	beq	r4,r2,84ad0 <_dtoa_r+0x13fc>
   84a48:	1029883a 	mov	r20,r2
   84a4c:	0005883a 	mov	r2,zero
   84a50:	00d00934 	movhi	r3,16420
   84a54:	180f883a 	mov	r7,r3
   84a58:	100d883a 	mov	r6,r2
   84a5c:	880b883a 	mov	r5,r17
   84a60:	8009883a 	mov	r4,r16
   84a64:	0089bb40 	call	89bb4 <__muldf3>
   84a68:	180b883a 	mov	r5,r3
   84a6c:	1009883a 	mov	r4,r2
   84a70:	1823883a 	mov	r17,r3
   84a74:	1021883a 	mov	r16,r2
   84a78:	008a5700 	call	8a570 <__fixdfsi>
   84a7c:	1009883a 	mov	r4,r2
   84a80:	102b883a 	mov	r21,r2
   84a84:	008a4780 	call	8a478 <__floatsidf>
   84a88:	880b883a 	mov	r5,r17
   84a8c:	8009883a 	mov	r4,r16
   84a90:	180f883a 	mov	r7,r3
   84a94:	100d883a 	mov	r6,r2
   84a98:	0089ac00 	call	89ac0 <__subdf3>
   84a9c:	180b883a 	mov	r5,r3
   84aa0:	d8c00517 	ldw	r3,20(sp)
   84aa4:	1009883a 	mov	r4,r2
   84aa8:	ad400c04 	addi	r21,r21,48
   84aac:	1d05883a 	add	r2,r3,r20
   84ab0:	15400005 	stb	r21,0(r2)
   84ab4:	2021883a 	mov	r16,r4
   84ab8:	d9000317 	ldw	r4,12(sp)
   84abc:	a5000044 	addi	r20,r20,1
   84ac0:	2823883a 	mov	r17,r5
   84ac4:	a13fe11e 	bne	r20,r4,84a4c <_dtoa_r+0x1378>
   84ac8:	e505883a 	add	r2,fp,r20
   84acc:	173fffc4 	addi	fp,r2,-1
   84ad0:	0025883a 	mov	r18,zero
   84ad4:	04cff834 	movhi	r19,16352
   84ad8:	b009883a 	mov	r4,r22
   84adc:	b80b883a 	mov	r5,r23
   84ae0:	900d883a 	mov	r6,r18
   84ae4:	980f883a 	mov	r7,r19
   84ae8:	0089b400 	call	89b40 <__adddf3>
   84aec:	180b883a 	mov	r5,r3
   84af0:	1009883a 	mov	r4,r2
   84af4:	800d883a 	mov	r6,r16
   84af8:	880f883a 	mov	r7,r17
   84afc:	008a3f00 	call	8a3f0 <__ltdf2>
   84b00:	103cab16 	blt	r2,zero,83db0 <_dtoa_r+0x6dc>
   84b04:	0009883a 	mov	r4,zero
   84b08:	980b883a 	mov	r5,r19
   84b0c:	b80f883a 	mov	r7,r23
   84b10:	b00d883a 	mov	r6,r22
   84b14:	0089ac00 	call	89ac0 <__subdf3>
   84b18:	180b883a 	mov	r5,r3
   84b1c:	880f883a 	mov	r7,r17
   84b20:	1009883a 	mov	r4,r2
   84b24:	800d883a 	mov	r6,r16
   84b28:	008a2e00 	call	8a2e0 <__gtdf2>
   84b2c:	00bc470e 	bge	zero,r2,83c4c <_dtoa_r+0x578>
   84b30:	00c00c04 	movi	r3,48
   84b34:	e73fffc4 	addi	fp,fp,-1
   84b38:	e0800007 	ldb	r2,0(fp)
   84b3c:	10fffd26 	beq	r2,r3,84b34 <_dtoa_r+0x1460>
   84b40:	d9800417 	ldw	r6,16(sp)
   84b44:	e7000044 	addi	fp,fp,1
   84b48:	d9800d15 	stw	r6,52(sp)
   84b4c:	003cab06 	br	83dfc <_dtoa_r+0x728>
   84b50:	d8c00f17 	ldw	r3,60(sp)
   84b54:	d9001117 	ldw	r4,68(sp)
   84b58:	20e1c83a 	sub	r16,r4,r3
   84b5c:	0007883a 	mov	r3,zero
   84b60:	003d9b06 	br	841d0 <_dtoa_r+0xafc>
   84b64:	00800e44 	movi	r2,57
   84b68:	b0800005 	stb	r2,0(r22)
   84b6c:	b5800044 	addi	r22,r22,1
   84b70:	003dc106 	br	84278 <_dtoa_r+0xba4>
   84b74:	05800084 	movi	r22,2
   84b78:	003bf706 	br	83b58 <_dtoa_r+0x484>
   84b7c:	d9000f17 	ldw	r4,60(sp)
   84b80:	013c000e 	bge	zero,r4,83b84 <_dtoa_r+0x4b0>
   84b84:	d9800e17 	ldw	r6,56(sp)
   84b88:	01bc300e 	bge	zero,r6,83c4c <_dtoa_r+0x578>
   84b8c:	0005883a 	mov	r2,zero
   84b90:	00d00934 	movhi	r3,16420
   84b94:	a80b883a 	mov	r5,r21
   84b98:	180f883a 	mov	r7,r3
   84b9c:	a009883a 	mov	r4,r20
   84ba0:	100d883a 	mov	r6,r2
   84ba4:	0089bb40 	call	89bb4 <__muldf3>
   84ba8:	b1000044 	addi	r4,r22,1
   84bac:	1021883a 	mov	r16,r2
   84bb0:	1823883a 	mov	r17,r3
   84bb4:	008a4780 	call	8a478 <__floatsidf>
   84bb8:	880b883a 	mov	r5,r17
   84bbc:	8009883a 	mov	r4,r16
   84bc0:	180f883a 	mov	r7,r3
   84bc4:	100d883a 	mov	r6,r2
   84bc8:	0089bb40 	call	89bb4 <__muldf3>
   84bcc:	0011883a 	mov	r8,zero
   84bd0:	02500734 	movhi	r9,16412
   84bd4:	180b883a 	mov	r5,r3
   84bd8:	480f883a 	mov	r7,r9
   84bdc:	1009883a 	mov	r4,r2
   84be0:	400d883a 	mov	r6,r8
   84be4:	0089b400 	call	89b40 <__adddf3>
   84be8:	102d883a 	mov	r22,r2
   84bec:	00bf3034 	movhi	r2,64704
   84bf0:	10ef883a 	add	r23,r2,r3
   84bf4:	d8800d17 	ldw	r2,52(sp)
   84bf8:	d8c00e17 	ldw	r3,56(sp)
   84bfc:	8029883a 	mov	r20,r16
   84c00:	10bfffc4 	addi	r2,r2,-1
   84c04:	882b883a 	mov	r21,r17
   84c08:	d8800415 	stw	r2,16(sp)
   84c0c:	d8c00315 	stw	r3,12(sp)
   84c10:	003e8306 	br	84620 <_dtoa_r+0xf4c>
   84c14:	d8800117 	ldw	r2,4(sp)
   84c18:	dc001117 	ldw	r16,68(sp)
   84c1c:	dc801017 	ldw	r18,64(sp)
   84c20:	00c00d84 	movi	r3,54
   84c24:	1887c83a 	sub	r3,r3,r2
   84c28:	003d6906 	br	841d0 <_dtoa_r+0xafc>
   84c2c:	01800044 	movi	r6,1
   84c30:	3021883a 	mov	r16,r6
   84c34:	d9800f15 	stw	r6,60(sp)
   84c38:	d9802615 	stw	r6,152(sp)
   84c3c:	d9800e15 	stw	r6,56(sp)
   84c40:	003b9306 	br	83a90 <_dtoa_r+0x3bc>
   84c44:	b021883a 	mov	r16,r22
   84c48:	dd800f15 	stw	r22,60(sp)
   84c4c:	003b9006 	br	83a90 <_dtoa_r+0x3bc>
   84c50:	103e221e 	bne	r2,zero,844dc <_dtoa_r+0xe08>
   84c54:	b880004c 	andi	r2,r23,1
   84c58:	1005003a 	cmpeq	r2,r2,zero
   84c5c:	103e1f1e 	bne	r2,zero,844dc <_dtoa_r+0xe08>
   84c60:	003e1b06 	br	844d0 <_dtoa_r+0xdfc>
   84c64:	d9001617 	ldw	r4,88(sp)
   84c68:	980b883a 	mov	r5,r19
   84c6c:	01800284 	movi	r6,10
   84c70:	000f883a 	mov	r7,zero
   84c74:	00875bc0 	call	875bc <__multadd>
   84c78:	d8c00e17 	ldw	r3,56(sp)
   84c7c:	1027883a 	mov	r19,r2
   84c80:	d8c00f15 	stw	r3,60(sp)
   84c84:	003cd306 	br	83fd4 <_dtoa_r+0x900>

00084c88 <_fflush_r>:
   84c88:	defffb04 	addi	sp,sp,-20
   84c8c:	dcc00315 	stw	r19,12(sp)
   84c90:	dc800215 	stw	r18,8(sp)
   84c94:	dfc00415 	stw	ra,16(sp)
   84c98:	dc400115 	stw	r17,4(sp)
   84c9c:	dc000015 	stw	r16,0(sp)
   84ca0:	2027883a 	mov	r19,r4
   84ca4:	2825883a 	mov	r18,r5
   84ca8:	20000226 	beq	r4,zero,84cb4 <_fflush_r+0x2c>
   84cac:	20800e17 	ldw	r2,56(r4)
   84cb0:	10005626 	beq	r2,zero,84e0c <_fflush_r+0x184>
   84cb4:	9100030b 	ldhu	r4,12(r18)
   84cb8:	20ffffcc 	andi	r3,r4,65535
   84cbc:	18e0001c 	xori	r3,r3,32768
   84cc0:	18e00004 	addi	r3,r3,-32768
   84cc4:	1880020c 	andi	r2,r3,8
   84cc8:	1000261e 	bne	r2,zero,84d64 <_fflush_r+0xdc>
   84ccc:	90c00117 	ldw	r3,4(r18)
   84cd0:	20820014 	ori	r2,r4,2048
   84cd4:	9080030d 	sth	r2,12(r18)
   84cd8:	1009883a 	mov	r4,r2
   84cdc:	00c0400e 	bge	zero,r3,84de0 <_fflush_r+0x158>
   84ce0:	92000a17 	ldw	r8,40(r18)
   84ce4:	40004026 	beq	r8,zero,84de8 <_fflush_r+0x160>
   84ce8:	2084000c 	andi	r2,r4,4096
   84cec:	10005326 	beq	r2,zero,84e3c <_fflush_r+0x1b4>
   84cf0:	94001417 	ldw	r16,80(r18)
   84cf4:	9080030b 	ldhu	r2,12(r18)
   84cf8:	1080010c 	andi	r2,r2,4
   84cfc:	1000481e 	bne	r2,zero,84e20 <_fflush_r+0x198>
   84d00:	91400717 	ldw	r5,28(r18)
   84d04:	9809883a 	mov	r4,r19
   84d08:	800d883a 	mov	r6,r16
   84d0c:	000f883a 	mov	r7,zero
   84d10:	403ee83a 	callr	r8
   84d14:	8080261e 	bne	r16,r2,84db0 <_fflush_r+0x128>
   84d18:	9080030b 	ldhu	r2,12(r18)
   84d1c:	91000417 	ldw	r4,16(r18)
   84d20:	90000115 	stw	zero,4(r18)
   84d24:	10bdffcc 	andi	r2,r2,63487
   84d28:	10ffffcc 	andi	r3,r2,65535
   84d2c:	18c4000c 	andi	r3,r3,4096
   84d30:	9080030d 	sth	r2,12(r18)
   84d34:	91000015 	stw	r4,0(r18)
   84d38:	18002b26 	beq	r3,zero,84de8 <_fflush_r+0x160>
   84d3c:	0007883a 	mov	r3,zero
   84d40:	1805883a 	mov	r2,r3
   84d44:	94001415 	stw	r16,80(r18)
   84d48:	dfc00417 	ldw	ra,16(sp)
   84d4c:	dcc00317 	ldw	r19,12(sp)
   84d50:	dc800217 	ldw	r18,8(sp)
   84d54:	dc400117 	ldw	r17,4(sp)
   84d58:	dc000017 	ldw	r16,0(sp)
   84d5c:	dec00504 	addi	sp,sp,20
   84d60:	f800283a 	ret
   84d64:	94400417 	ldw	r17,16(r18)
   84d68:	88001f26 	beq	r17,zero,84de8 <_fflush_r+0x160>
   84d6c:	90800017 	ldw	r2,0(r18)
   84d70:	18c000cc 	andi	r3,r3,3
   84d74:	94400015 	stw	r17,0(r18)
   84d78:	1461c83a 	sub	r16,r2,r17
   84d7c:	18002526 	beq	r3,zero,84e14 <_fflush_r+0x18c>
   84d80:	0005883a 	mov	r2,zero
   84d84:	90800215 	stw	r2,8(r18)
   84d88:	0400170e 	bge	zero,r16,84de8 <_fflush_r+0x160>
   84d8c:	90c00917 	ldw	r3,36(r18)
   84d90:	91400717 	ldw	r5,28(r18)
   84d94:	880d883a 	mov	r6,r17
   84d98:	800f883a 	mov	r7,r16
   84d9c:	9809883a 	mov	r4,r19
   84da0:	183ee83a 	callr	r3
   84da4:	88a3883a 	add	r17,r17,r2
   84da8:	80a1c83a 	sub	r16,r16,r2
   84dac:	00bff616 	blt	zero,r2,84d88 <_fflush_r+0x100>
   84db0:	9080030b 	ldhu	r2,12(r18)
   84db4:	00ffffc4 	movi	r3,-1
   84db8:	10801014 	ori	r2,r2,64
   84dbc:	9080030d 	sth	r2,12(r18)
   84dc0:	1805883a 	mov	r2,r3
   84dc4:	dfc00417 	ldw	ra,16(sp)
   84dc8:	dcc00317 	ldw	r19,12(sp)
   84dcc:	dc800217 	ldw	r18,8(sp)
   84dd0:	dc400117 	ldw	r17,4(sp)
   84dd4:	dc000017 	ldw	r16,0(sp)
   84dd8:	dec00504 	addi	sp,sp,20
   84ddc:	f800283a 	ret
   84de0:	90800f17 	ldw	r2,60(r18)
   84de4:	00bfbe16 	blt	zero,r2,84ce0 <_fflush_r+0x58>
   84de8:	0007883a 	mov	r3,zero
   84dec:	1805883a 	mov	r2,r3
   84df0:	dfc00417 	ldw	ra,16(sp)
   84df4:	dcc00317 	ldw	r19,12(sp)
   84df8:	dc800217 	ldw	r18,8(sp)
   84dfc:	dc400117 	ldw	r17,4(sp)
   84e00:	dc000017 	ldw	r16,0(sp)
   84e04:	dec00504 	addi	sp,sp,20
   84e08:	f800283a 	ret
   84e0c:	0084f200 	call	84f20 <__sinit>
   84e10:	003fa806 	br	84cb4 <_fflush_r+0x2c>
   84e14:	90800517 	ldw	r2,20(r18)
   84e18:	90800215 	stw	r2,8(r18)
   84e1c:	003fda06 	br	84d88 <_fflush_r+0x100>
   84e20:	90800117 	ldw	r2,4(r18)
   84e24:	90c00c17 	ldw	r3,48(r18)
   84e28:	80a1c83a 	sub	r16,r16,r2
   84e2c:	183fb426 	beq	r3,zero,84d00 <_fflush_r+0x78>
   84e30:	90800f17 	ldw	r2,60(r18)
   84e34:	80a1c83a 	sub	r16,r16,r2
   84e38:	003fb106 	br	84d00 <_fflush_r+0x78>
   84e3c:	91400717 	ldw	r5,28(r18)
   84e40:	9809883a 	mov	r4,r19
   84e44:	000d883a 	mov	r6,zero
   84e48:	01c00044 	movi	r7,1
   84e4c:	403ee83a 	callr	r8
   84e50:	1021883a 	mov	r16,r2
   84e54:	00bfffc4 	movi	r2,-1
   84e58:	80800226 	beq	r16,r2,84e64 <_fflush_r+0x1dc>
   84e5c:	92000a17 	ldw	r8,40(r18)
   84e60:	003fa406 	br	84cf4 <_fflush_r+0x6c>
   84e64:	98c00017 	ldw	r3,0(r19)
   84e68:	00800744 	movi	r2,29
   84e6c:	18bfde26 	beq	r3,r2,84de8 <_fflush_r+0x160>
   84e70:	9080030b 	ldhu	r2,12(r18)
   84e74:	8007883a 	mov	r3,r16
   84e78:	10801014 	ori	r2,r2,64
   84e7c:	9080030d 	sth	r2,12(r18)
   84e80:	003fcf06 	br	84dc0 <_fflush_r+0x138>

00084e84 <fflush>:
   84e84:	01400234 	movhi	r5,8
   84e88:	29532204 	addi	r5,r5,19592
   84e8c:	2007883a 	mov	r3,r4
   84e90:	20000526 	beq	r4,zero,84ea8 <fflush+0x24>
   84e94:	00800274 	movhi	r2,9
   84e98:	10be7f04 	addi	r2,r2,-1540
   84e9c:	11000017 	ldw	r4,0(r2)
   84ea0:	180b883a 	mov	r5,r3
   84ea4:	0084c881 	jmpi	84c88 <_fflush_r>
   84ea8:	00800274 	movhi	r2,9
   84eac:	10be8004 	addi	r2,r2,-1536
   84eb0:	11000017 	ldw	r4,0(r2)
   84eb4:	0085a881 	jmpi	85a88 <_fwalk_reent>

00084eb8 <std>:
   84eb8:	00800274 	movhi	r2,9
   84ebc:	10a07a04 	addi	r2,r2,-32280
   84ec0:	20800b15 	stw	r2,44(r4)
   84ec4:	00800274 	movhi	r2,9
   84ec8:	10a0b504 	addi	r2,r2,-32044
   84ecc:	20800815 	stw	r2,32(r4)
   84ed0:	00c00274 	movhi	r3,9
   84ed4:	18e09604 	addi	r3,r3,-32168
   84ed8:	00800274 	movhi	r2,9
   84edc:	10a07c04 	addi	r2,r2,-32272
   84ee0:	2140030d 	sth	r5,12(r4)
   84ee4:	2180038d 	sth	r6,14(r4)
   84ee8:	20c00915 	stw	r3,36(r4)
   84eec:	20800a15 	stw	r2,40(r4)
   84ef0:	20000015 	stw	zero,0(r4)
   84ef4:	20000115 	stw	zero,4(r4)
   84ef8:	20000215 	stw	zero,8(r4)
   84efc:	20000415 	stw	zero,16(r4)
   84f00:	20000515 	stw	zero,20(r4)
   84f04:	20000615 	stw	zero,24(r4)
   84f08:	21000715 	stw	r4,28(r4)
   84f0c:	f800283a 	ret

00084f10 <__sfp_lock_acquire>:
   84f10:	f800283a 	ret

00084f14 <__sfp_lock_release>:
   84f14:	f800283a 	ret

00084f18 <__sinit_lock_acquire>:
   84f18:	f800283a 	ret

00084f1c <__sinit_lock_release>:
   84f1c:	f800283a 	ret

00084f20 <__sinit>:
   84f20:	20800e17 	ldw	r2,56(r4)
   84f24:	defffd04 	addi	sp,sp,-12
   84f28:	dc400115 	stw	r17,4(sp)
   84f2c:	dc000015 	stw	r16,0(sp)
   84f30:	dfc00215 	stw	ra,8(sp)
   84f34:	04400044 	movi	r17,1
   84f38:	01400104 	movi	r5,4
   84f3c:	000d883a 	mov	r6,zero
   84f40:	2021883a 	mov	r16,r4
   84f44:	2200bb04 	addi	r8,r4,748
   84f48:	200f883a 	mov	r7,r4
   84f4c:	10000526 	beq	r2,zero,84f64 <__sinit+0x44>
   84f50:	dfc00217 	ldw	ra,8(sp)
   84f54:	dc400117 	ldw	r17,4(sp)
   84f58:	dc000017 	ldw	r16,0(sp)
   84f5c:	dec00304 	addi	sp,sp,12
   84f60:	f800283a 	ret
   84f64:	21000117 	ldw	r4,4(r4)
   84f68:	00800234 	movhi	r2,8
   84f6c:	10940104 	addi	r2,r2,20484
   84f70:	00c000c4 	movi	r3,3
   84f74:	80800f15 	stw	r2,60(r16)
   84f78:	80c0b915 	stw	r3,740(r16)
   84f7c:	8200ba15 	stw	r8,744(r16)
   84f80:	84400e15 	stw	r17,56(r16)
   84f84:	8000b815 	stw	zero,736(r16)
   84f88:	0084eb80 	call	84eb8 <std>
   84f8c:	81000217 	ldw	r4,8(r16)
   84f90:	880d883a 	mov	r6,r17
   84f94:	800f883a 	mov	r7,r16
   84f98:	01400284 	movi	r5,10
   84f9c:	0084eb80 	call	84eb8 <std>
   84fa0:	81000317 	ldw	r4,12(r16)
   84fa4:	800f883a 	mov	r7,r16
   84fa8:	01400484 	movi	r5,18
   84fac:	01800084 	movi	r6,2
   84fb0:	dfc00217 	ldw	ra,8(sp)
   84fb4:	dc400117 	ldw	r17,4(sp)
   84fb8:	dc000017 	ldw	r16,0(sp)
   84fbc:	dec00304 	addi	sp,sp,12
   84fc0:	0084eb81 	jmpi	84eb8 <std>

00084fc4 <__fp_lock>:
   84fc4:	0005883a 	mov	r2,zero
   84fc8:	f800283a 	ret

00084fcc <__fp_unlock>:
   84fcc:	0005883a 	mov	r2,zero
   84fd0:	f800283a 	ret

00084fd4 <__fp_unlock_all>:
   84fd4:	00800274 	movhi	r2,9
   84fd8:	10be7f04 	addi	r2,r2,-1540
   84fdc:	11000017 	ldw	r4,0(r2)
   84fe0:	01400234 	movhi	r5,8
   84fe4:	2953f304 	addi	r5,r5,20428
   84fe8:	0085b501 	jmpi	85b50 <_fwalk>

00084fec <__fp_lock_all>:
   84fec:	00800274 	movhi	r2,9
   84ff0:	10be7f04 	addi	r2,r2,-1540
   84ff4:	11000017 	ldw	r4,0(r2)
   84ff8:	01400234 	movhi	r5,8
   84ffc:	2953f104 	addi	r5,r5,20420
   85000:	0085b501 	jmpi	85b50 <_fwalk>

00085004 <_cleanup_r>:
   85004:	01400274 	movhi	r5,9
   85008:	2961ff04 	addi	r5,r5,-30724
   8500c:	0085b501 	jmpi	85b50 <_fwalk>

00085010 <_cleanup>:
   85010:	00800274 	movhi	r2,9
   85014:	10be8004 	addi	r2,r2,-1536
   85018:	11000017 	ldw	r4,0(r2)
   8501c:	00850041 	jmpi	85004 <_cleanup_r>

00085020 <__sfmoreglue>:
   85020:	defffc04 	addi	sp,sp,-16
   85024:	dc000015 	stw	r16,0(sp)
   85028:	2821883a 	mov	r16,r5
   8502c:	dc400115 	stw	r17,4(sp)
   85030:	01401704 	movi	r5,92
   85034:	2023883a 	mov	r17,r4
   85038:	8009883a 	mov	r4,r16
   8503c:	dfc00315 	stw	ra,12(sp)
   85040:	dcc00215 	stw	r19,8(sp)
   85044:	00812180 	call	81218 <__mulsi3>
   85048:	11400304 	addi	r5,r2,12
   8504c:	8809883a 	mov	r4,r17
   85050:	1027883a 	mov	r19,r2
   85054:	0085e600 	call	85e60 <_malloc_r>
   85058:	10c00304 	addi	r3,r2,12
   8505c:	1023883a 	mov	r17,r2
   85060:	1809883a 	mov	r4,r3
   85064:	980d883a 	mov	r6,r19
   85068:	000b883a 	mov	r5,zero
   8506c:	10000b26 	beq	r2,zero,8509c <__sfmoreglue+0x7c>
   85070:	14000115 	stw	r16,4(r2)
   85074:	10c00215 	stw	r3,8(r2)
   85078:	10000015 	stw	zero,0(r2)
   8507c:	00868040 	call	86804 <memset>
   85080:	8805883a 	mov	r2,r17
   85084:	dfc00317 	ldw	ra,12(sp)
   85088:	dcc00217 	ldw	r19,8(sp)
   8508c:	dc400117 	ldw	r17,4(sp)
   85090:	dc000017 	ldw	r16,0(sp)
   85094:	dec00404 	addi	sp,sp,16
   85098:	f800283a 	ret
   8509c:	0023883a 	mov	r17,zero
   850a0:	8805883a 	mov	r2,r17
   850a4:	dfc00317 	ldw	ra,12(sp)
   850a8:	dcc00217 	ldw	r19,8(sp)
   850ac:	dc400117 	ldw	r17,4(sp)
   850b0:	dc000017 	ldw	r16,0(sp)
   850b4:	dec00404 	addi	sp,sp,16
   850b8:	f800283a 	ret

000850bc <__sfp>:
   850bc:	defffd04 	addi	sp,sp,-12
   850c0:	00800274 	movhi	r2,9
   850c4:	10be8004 	addi	r2,r2,-1536
   850c8:	dc000015 	stw	r16,0(sp)
   850cc:	14000017 	ldw	r16,0(r2)
   850d0:	dc400115 	stw	r17,4(sp)
   850d4:	dfc00215 	stw	ra,8(sp)
   850d8:	80800e17 	ldw	r2,56(r16)
   850dc:	2023883a 	mov	r17,r4
   850e0:	10002626 	beq	r2,zero,8517c <__sfp+0xc0>
   850e4:	8400b804 	addi	r16,r16,736
   850e8:	80800117 	ldw	r2,4(r16)
   850ec:	81000217 	ldw	r4,8(r16)
   850f0:	10ffffc4 	addi	r3,r2,-1
   850f4:	18000916 	blt	r3,zero,8511c <__sfp+0x60>
   850f8:	2080030f 	ldh	r2,12(r4)
   850fc:	10000b26 	beq	r2,zero,8512c <__sfp+0x70>
   85100:	017fffc4 	movi	r5,-1
   85104:	00000206 	br	85110 <__sfp+0x54>
   85108:	2080030f 	ldh	r2,12(r4)
   8510c:	10000726 	beq	r2,zero,8512c <__sfp+0x70>
   85110:	18ffffc4 	addi	r3,r3,-1
   85114:	21001704 	addi	r4,r4,92
   85118:	197ffb1e 	bne	r3,r5,85108 <__sfp+0x4c>
   8511c:	80800017 	ldw	r2,0(r16)
   85120:	10001926 	beq	r2,zero,85188 <__sfp+0xcc>
   85124:	1021883a 	mov	r16,r2
   85128:	003fef06 	br	850e8 <__sfp+0x2c>
   8512c:	00bfffc4 	movi	r2,-1
   85130:	00c00044 	movi	r3,1
   85134:	2080038d 	sth	r2,14(r4)
   85138:	20c0030d 	sth	r3,12(r4)
   8513c:	20000015 	stw	zero,0(r4)
   85140:	20000215 	stw	zero,8(r4)
   85144:	20000115 	stw	zero,4(r4)
   85148:	20000415 	stw	zero,16(r4)
   8514c:	20000515 	stw	zero,20(r4)
   85150:	20000615 	stw	zero,24(r4)
   85154:	20000c15 	stw	zero,48(r4)
   85158:	20000d15 	stw	zero,52(r4)
   8515c:	20001115 	stw	zero,68(r4)
   85160:	20001215 	stw	zero,72(r4)
   85164:	2005883a 	mov	r2,r4
   85168:	dfc00217 	ldw	ra,8(sp)
   8516c:	dc400117 	ldw	r17,4(sp)
   85170:	dc000017 	ldw	r16,0(sp)
   85174:	dec00304 	addi	sp,sp,12
   85178:	f800283a 	ret
   8517c:	8009883a 	mov	r4,r16
   85180:	0084f200 	call	84f20 <__sinit>
   85184:	003fd706 	br	850e4 <__sfp+0x28>
   85188:	8809883a 	mov	r4,r17
   8518c:	01400104 	movi	r5,4
   85190:	00850200 	call	85020 <__sfmoreglue>
   85194:	80800015 	stw	r2,0(r16)
   85198:	103fe21e 	bne	r2,zero,85124 <__sfp+0x68>
   8519c:	00800304 	movi	r2,12
   851a0:	0009883a 	mov	r4,zero
   851a4:	88800015 	stw	r2,0(r17)
   851a8:	003fee06 	br	85164 <__sfp+0xa8>

000851ac <_malloc_trim_r>:
   851ac:	defffb04 	addi	sp,sp,-20
   851b0:	dcc00315 	stw	r19,12(sp)
   851b4:	04c00274 	movhi	r19,9
   851b8:	9cf8fb04 	addi	r19,r19,-7188
   851bc:	dc800215 	stw	r18,8(sp)
   851c0:	dc400115 	stw	r17,4(sp)
   851c4:	dc000015 	stw	r16,0(sp)
   851c8:	2823883a 	mov	r17,r5
   851cc:	2025883a 	mov	r18,r4
   851d0:	dfc00415 	stw	ra,16(sp)
   851d4:	008b8340 	call	8b834 <__malloc_lock>
   851d8:	98800217 	ldw	r2,8(r19)
   851dc:	9009883a 	mov	r4,r18
   851e0:	000b883a 	mov	r5,zero
   851e4:	10c00117 	ldw	r3,4(r2)
   851e8:	00bfff04 	movi	r2,-4
   851ec:	18a0703a 	and	r16,r3,r2
   851f0:	8463c83a 	sub	r17,r16,r17
   851f4:	8c43fbc4 	addi	r17,r17,4079
   851f8:	8822d33a 	srli	r17,r17,12
   851fc:	0083ffc4 	movi	r2,4095
   85200:	8c7fffc4 	addi	r17,r17,-1
   85204:	8822933a 	slli	r17,r17,12
   85208:	1440060e 	bge	r2,r17,85224 <_malloc_trim_r+0x78>
   8520c:	00881780 	call	88178 <_sbrk_r>
   85210:	98c00217 	ldw	r3,8(r19)
   85214:	9009883a 	mov	r4,r18
   85218:	044bc83a 	sub	r5,zero,r17
   8521c:	80c7883a 	add	r3,r16,r3
   85220:	10c00926 	beq	r2,r3,85248 <_malloc_trim_r+0x9c>
   85224:	008b8540 	call	8b854 <__malloc_unlock>
   85228:	0005883a 	mov	r2,zero
   8522c:	dfc00417 	ldw	ra,16(sp)
   85230:	dcc00317 	ldw	r19,12(sp)
   85234:	dc800217 	ldw	r18,8(sp)
   85238:	dc400117 	ldw	r17,4(sp)
   8523c:	dc000017 	ldw	r16,0(sp)
   85240:	dec00504 	addi	sp,sp,20
   85244:	f800283a 	ret
   85248:	9009883a 	mov	r4,r18
   8524c:	00881780 	call	88178 <_sbrk_r>
   85250:	844dc83a 	sub	r6,r16,r17
   85254:	00ffffc4 	movi	r3,-1
   85258:	9009883a 	mov	r4,r18
   8525c:	000b883a 	mov	r5,zero
   85260:	01c00274 	movhi	r7,9
   85264:	39c53404 	addi	r7,r7,5328
   85268:	31800054 	ori	r6,r6,1
   8526c:	10c00926 	beq	r2,r3,85294 <_malloc_trim_r+0xe8>
   85270:	38800017 	ldw	r2,0(r7)
   85274:	98c00217 	ldw	r3,8(r19)
   85278:	9009883a 	mov	r4,r18
   8527c:	1445c83a 	sub	r2,r2,r17
   85280:	38800015 	stw	r2,0(r7)
   85284:	19800115 	stw	r6,4(r3)
   85288:	008b8540 	call	8b854 <__malloc_unlock>
   8528c:	00800044 	movi	r2,1
   85290:	003fe606 	br	8522c <_malloc_trim_r+0x80>
   85294:	00881780 	call	88178 <_sbrk_r>
   85298:	99800217 	ldw	r6,8(r19)
   8529c:	100f883a 	mov	r7,r2
   852a0:	9009883a 	mov	r4,r18
   852a4:	1187c83a 	sub	r3,r2,r6
   852a8:	008003c4 	movi	r2,15
   852ac:	19400054 	ori	r5,r3,1
   852b0:	10ffdc0e 	bge	r2,r3,85224 <_malloc_trim_r+0x78>
   852b4:	00800274 	movhi	r2,9
   852b8:	10be8404 	addi	r2,r2,-1520
   852bc:	10c00017 	ldw	r3,0(r2)
   852c0:	00800274 	movhi	r2,9
   852c4:	10853404 	addi	r2,r2,5328
   852c8:	31400115 	stw	r5,4(r6)
   852cc:	38c7c83a 	sub	r3,r7,r3
   852d0:	10c00015 	stw	r3,0(r2)
   852d4:	003fd306 	br	85224 <_malloc_trim_r+0x78>

000852d8 <_free_r>:
   852d8:	defffd04 	addi	sp,sp,-12
   852dc:	dc400115 	stw	r17,4(sp)
   852e0:	dc000015 	stw	r16,0(sp)
   852e4:	dfc00215 	stw	ra,8(sp)
   852e8:	2821883a 	mov	r16,r5
   852ec:	2023883a 	mov	r17,r4
   852f0:	28005a26 	beq	r5,zero,8545c <_free_r+0x184>
   852f4:	008b8340 	call	8b834 <__malloc_lock>
   852f8:	823ffe04 	addi	r8,r16,-8
   852fc:	41400117 	ldw	r5,4(r8)
   85300:	00bfff84 	movi	r2,-2
   85304:	02800274 	movhi	r10,9
   85308:	52b8fb04 	addi	r10,r10,-7188
   8530c:	288e703a 	and	r7,r5,r2
   85310:	41cd883a 	add	r6,r8,r7
   85314:	30c00117 	ldw	r3,4(r6)
   85318:	51000217 	ldw	r4,8(r10)
   8531c:	00bfff04 	movi	r2,-4
   85320:	1892703a 	and	r9,r3,r2
   85324:	5017883a 	mov	r11,r10
   85328:	31006726 	beq	r6,r4,854c8 <_free_r+0x1f0>
   8532c:	2880004c 	andi	r2,r5,1
   85330:	1005003a 	cmpeq	r2,r2,zero
   85334:	32400115 	stw	r9,4(r6)
   85338:	10001a1e 	bne	r2,zero,853a4 <_free_r+0xcc>
   8533c:	000b883a 	mov	r5,zero
   85340:	3247883a 	add	r3,r6,r9
   85344:	18800117 	ldw	r2,4(r3)
   85348:	1080004c 	andi	r2,r2,1
   8534c:	1000231e 	bne	r2,zero,853dc <_free_r+0x104>
   85350:	280ac03a 	cmpne	r5,r5,zero
   85354:	3a4f883a 	add	r7,r7,r9
   85358:	2800451e 	bne	r5,zero,85470 <_free_r+0x198>
   8535c:	31000217 	ldw	r4,8(r6)
   85360:	00800274 	movhi	r2,9
   85364:	10b8fd04 	addi	r2,r2,-7180
   85368:	20807b26 	beq	r4,r2,85558 <_free_r+0x280>
   8536c:	30800317 	ldw	r2,12(r6)
   85370:	3a07883a 	add	r3,r7,r8
   85374:	19c00015 	stw	r7,0(r3)
   85378:	11000215 	stw	r4,8(r2)
   8537c:	20800315 	stw	r2,12(r4)
   85380:	38800054 	ori	r2,r7,1
   85384:	40800115 	stw	r2,4(r8)
   85388:	28001a26 	beq	r5,zero,853f4 <_free_r+0x11c>
   8538c:	8809883a 	mov	r4,r17
   85390:	dfc00217 	ldw	ra,8(sp)
   85394:	dc400117 	ldw	r17,4(sp)
   85398:	dc000017 	ldw	r16,0(sp)
   8539c:	dec00304 	addi	sp,sp,12
   853a0:	008b8541 	jmpi	8b854 <__malloc_unlock>
   853a4:	80bffe17 	ldw	r2,-8(r16)
   853a8:	50c00204 	addi	r3,r10,8
   853ac:	4091c83a 	sub	r8,r8,r2
   853b0:	41000217 	ldw	r4,8(r8)
   853b4:	388f883a 	add	r7,r7,r2
   853b8:	20c06126 	beq	r4,r3,85540 <_free_r+0x268>
   853bc:	40800317 	ldw	r2,12(r8)
   853c0:	3247883a 	add	r3,r6,r9
   853c4:	000b883a 	mov	r5,zero
   853c8:	11000215 	stw	r4,8(r2)
   853cc:	20800315 	stw	r2,12(r4)
   853d0:	18800117 	ldw	r2,4(r3)
   853d4:	1080004c 	andi	r2,r2,1
   853d8:	103fdd26 	beq	r2,zero,85350 <_free_r+0x78>
   853dc:	38800054 	ori	r2,r7,1
   853e0:	3a07883a 	add	r3,r7,r8
   853e4:	280ac03a 	cmpne	r5,r5,zero
   853e8:	40800115 	stw	r2,4(r8)
   853ec:	19c00015 	stw	r7,0(r3)
   853f0:	283fe61e 	bne	r5,zero,8538c <_free_r+0xb4>
   853f4:	00807fc4 	movi	r2,511
   853f8:	11c01f2e 	bgeu	r2,r7,85478 <_free_r+0x1a0>
   853fc:	3806d27a 	srli	r3,r7,9
   85400:	1800481e 	bne	r3,zero,85524 <_free_r+0x24c>
   85404:	3804d0fa 	srli	r2,r7,3
   85408:	100690fa 	slli	r3,r2,3
   8540c:	1acd883a 	add	r6,r3,r11
   85410:	31400217 	ldw	r5,8(r6)
   85414:	31405926 	beq	r6,r5,8557c <_free_r+0x2a4>
   85418:	28800117 	ldw	r2,4(r5)
   8541c:	00ffff04 	movi	r3,-4
   85420:	10c4703a 	and	r2,r2,r3
   85424:	3880022e 	bgeu	r7,r2,85430 <_free_r+0x158>
   85428:	29400217 	ldw	r5,8(r5)
   8542c:	317ffa1e 	bne	r6,r5,85418 <_free_r+0x140>
   85430:	29800317 	ldw	r6,12(r5)
   85434:	41800315 	stw	r6,12(r8)
   85438:	41400215 	stw	r5,8(r8)
   8543c:	8809883a 	mov	r4,r17
   85440:	2a000315 	stw	r8,12(r5)
   85444:	32000215 	stw	r8,8(r6)
   85448:	dfc00217 	ldw	ra,8(sp)
   8544c:	dc400117 	ldw	r17,4(sp)
   85450:	dc000017 	ldw	r16,0(sp)
   85454:	dec00304 	addi	sp,sp,12
   85458:	008b8541 	jmpi	8b854 <__malloc_unlock>
   8545c:	dfc00217 	ldw	ra,8(sp)
   85460:	dc400117 	ldw	r17,4(sp)
   85464:	dc000017 	ldw	r16,0(sp)
   85468:	dec00304 	addi	sp,sp,12
   8546c:	f800283a 	ret
   85470:	31000217 	ldw	r4,8(r6)
   85474:	003fbd06 	br	8536c <_free_r+0x94>
   85478:	3806d0fa 	srli	r3,r7,3
   8547c:	00800044 	movi	r2,1
   85480:	51400117 	ldw	r5,4(r10)
   85484:	180890fa 	slli	r4,r3,3
   85488:	1807d0ba 	srai	r3,r3,2
   8548c:	22c9883a 	add	r4,r4,r11
   85490:	21800217 	ldw	r6,8(r4)
   85494:	10c4983a 	sll	r2,r2,r3
   85498:	41000315 	stw	r4,12(r8)
   8549c:	41800215 	stw	r6,8(r8)
   854a0:	288ab03a 	or	r5,r5,r2
   854a4:	22000215 	stw	r8,8(r4)
   854a8:	8809883a 	mov	r4,r17
   854ac:	51400115 	stw	r5,4(r10)
   854b0:	32000315 	stw	r8,12(r6)
   854b4:	dfc00217 	ldw	ra,8(sp)
   854b8:	dc400117 	ldw	r17,4(sp)
   854bc:	dc000017 	ldw	r16,0(sp)
   854c0:	dec00304 	addi	sp,sp,12
   854c4:	008b8541 	jmpi	8b854 <__malloc_unlock>
   854c8:	2880004c 	andi	r2,r5,1
   854cc:	3a4d883a 	add	r6,r7,r9
   854d0:	1000071e 	bne	r2,zero,854f0 <_free_r+0x218>
   854d4:	80bffe17 	ldw	r2,-8(r16)
   854d8:	4091c83a 	sub	r8,r8,r2
   854dc:	41000317 	ldw	r4,12(r8)
   854e0:	40c00217 	ldw	r3,8(r8)
   854e4:	308d883a 	add	r6,r6,r2
   854e8:	20c00215 	stw	r3,8(r4)
   854ec:	19000315 	stw	r4,12(r3)
   854f0:	00800274 	movhi	r2,9
   854f4:	10be8304 	addi	r2,r2,-1524
   854f8:	11000017 	ldw	r4,0(r2)
   854fc:	30c00054 	ori	r3,r6,1
   85500:	52000215 	stw	r8,8(r10)
   85504:	40c00115 	stw	r3,4(r8)
   85508:	313fa036 	bltu	r6,r4,8538c <_free_r+0xb4>
   8550c:	00800274 	movhi	r2,9
   85510:	10852a04 	addi	r2,r2,5288
   85514:	11400017 	ldw	r5,0(r2)
   85518:	8809883a 	mov	r4,r17
   8551c:	00851ac0 	call	851ac <_malloc_trim_r>
   85520:	003f9a06 	br	8538c <_free_r+0xb4>
   85524:	00800104 	movi	r2,4
   85528:	10c0072e 	bgeu	r2,r3,85548 <_free_r+0x270>
   8552c:	00800504 	movi	r2,20
   85530:	10c01936 	bltu	r2,r3,85598 <_free_r+0x2c0>
   85534:	188016c4 	addi	r2,r3,91
   85538:	100690fa 	slli	r3,r2,3
   8553c:	003fb306 	br	8540c <_free_r+0x134>
   85540:	01400044 	movi	r5,1
   85544:	003f7e06 	br	85340 <_free_r+0x68>
   85548:	3804d1ba 	srli	r2,r7,6
   8554c:	10800e04 	addi	r2,r2,56
   85550:	100690fa 	slli	r3,r2,3
   85554:	003fad06 	br	8540c <_free_r+0x134>
   85558:	22000315 	stw	r8,12(r4)
   8555c:	22000215 	stw	r8,8(r4)
   85560:	3a05883a 	add	r2,r7,r8
   85564:	38c00054 	ori	r3,r7,1
   85568:	11c00015 	stw	r7,0(r2)
   8556c:	41000215 	stw	r4,8(r8)
   85570:	40c00115 	stw	r3,4(r8)
   85574:	41000315 	stw	r4,12(r8)
   85578:	003f8406 	br	8538c <_free_r+0xb4>
   8557c:	1005d0ba 	srai	r2,r2,2
   85580:	00c00044 	movi	r3,1
   85584:	51000117 	ldw	r4,4(r10)
   85588:	1886983a 	sll	r3,r3,r2
   8558c:	20c8b03a 	or	r4,r4,r3
   85590:	51000115 	stw	r4,4(r10)
   85594:	003fa706 	br	85434 <_free_r+0x15c>
   85598:	00801504 	movi	r2,84
   8559c:	10c00436 	bltu	r2,r3,855b0 <_free_r+0x2d8>
   855a0:	3804d33a 	srli	r2,r7,12
   855a4:	10801b84 	addi	r2,r2,110
   855a8:	100690fa 	slli	r3,r2,3
   855ac:	003f9706 	br	8540c <_free_r+0x134>
   855b0:	00805504 	movi	r2,340
   855b4:	10c00436 	bltu	r2,r3,855c8 <_free_r+0x2f0>
   855b8:	3804d3fa 	srli	r2,r7,15
   855bc:	10801dc4 	addi	r2,r2,119
   855c0:	100690fa 	slli	r3,r2,3
   855c4:	003f9106 	br	8540c <_free_r+0x134>
   855c8:	00815504 	movi	r2,1364
   855cc:	10c0032e 	bgeu	r2,r3,855dc <_free_r+0x304>
   855d0:	00801f84 	movi	r2,126
   855d4:	00c0fc04 	movi	r3,1008
   855d8:	003f8c06 	br	8540c <_free_r+0x134>
   855dc:	3804d4ba 	srli	r2,r7,18
   855e0:	10801f04 	addi	r2,r2,124
   855e4:	100690fa 	slli	r3,r2,3
   855e8:	003f8806 	br	8540c <_free_r+0x134>

000855ec <__sfvwrite_r>:
   855ec:	30800217 	ldw	r2,8(r6)
   855f0:	defff504 	addi	sp,sp,-44
   855f4:	df000915 	stw	fp,36(sp)
   855f8:	dd800715 	stw	r22,28(sp)
   855fc:	dc800315 	stw	r18,12(sp)
   85600:	dfc00a15 	stw	ra,40(sp)
   85604:	ddc00815 	stw	r23,32(sp)
   85608:	dd400615 	stw	r21,24(sp)
   8560c:	dd000515 	stw	r20,20(sp)
   85610:	dcc00415 	stw	r19,16(sp)
   85614:	dc400215 	stw	r17,8(sp)
   85618:	dc000115 	stw	r16,4(sp)
   8561c:	302d883a 	mov	r22,r6
   85620:	2039883a 	mov	fp,r4
   85624:	2825883a 	mov	r18,r5
   85628:	10001c26 	beq	r2,zero,8569c <__sfvwrite_r+0xb0>
   8562c:	29c0030b 	ldhu	r7,12(r5)
   85630:	3880020c 	andi	r2,r7,8
   85634:	10002726 	beq	r2,zero,856d4 <__sfvwrite_r+0xe8>
   85638:	28800417 	ldw	r2,16(r5)
   8563c:	10002526 	beq	r2,zero,856d4 <__sfvwrite_r+0xe8>
   85640:	3880008c 	andi	r2,r7,2
   85644:	b5400017 	ldw	r21,0(r22)
   85648:	10002826 	beq	r2,zero,856ec <__sfvwrite_r+0x100>
   8564c:	0021883a 	mov	r16,zero
   85650:	0023883a 	mov	r17,zero
   85654:	880d883a 	mov	r6,r17
   85658:	e009883a 	mov	r4,fp
   8565c:	00810004 	movi	r2,1024
   85660:	80006e26 	beq	r16,zero,8581c <__sfvwrite_r+0x230>
   85664:	800f883a 	mov	r7,r16
   85668:	91400717 	ldw	r5,28(r18)
   8566c:	1400012e 	bgeu	r2,r16,85674 <__sfvwrite_r+0x88>
   85670:	100f883a 	mov	r7,r2
   85674:	90c00917 	ldw	r3,36(r18)
   85678:	183ee83a 	callr	r3
   8567c:	1007883a 	mov	r3,r2
   85680:	80a1c83a 	sub	r16,r16,r2
   85684:	88a3883a 	add	r17,r17,r2
   85688:	00806d0e 	bge	zero,r2,85840 <__sfvwrite_r+0x254>
   8568c:	b0800217 	ldw	r2,8(r22)
   85690:	10c5c83a 	sub	r2,r2,r3
   85694:	b0800215 	stw	r2,8(r22)
   85698:	103fee1e 	bne	r2,zero,85654 <__sfvwrite_r+0x68>
   8569c:	0009883a 	mov	r4,zero
   856a0:	2005883a 	mov	r2,r4
   856a4:	dfc00a17 	ldw	ra,40(sp)
   856a8:	df000917 	ldw	fp,36(sp)
   856ac:	ddc00817 	ldw	r23,32(sp)
   856b0:	dd800717 	ldw	r22,28(sp)
   856b4:	dd400617 	ldw	r21,24(sp)
   856b8:	dd000517 	ldw	r20,20(sp)
   856bc:	dcc00417 	ldw	r19,16(sp)
   856c0:	dc800317 	ldw	r18,12(sp)
   856c4:	dc400217 	ldw	r17,8(sp)
   856c8:	dc000117 	ldw	r16,4(sp)
   856cc:	dec00b04 	addi	sp,sp,44
   856d0:	f800283a 	ret
   856d4:	00833540 	call	83354 <__swsetup_r>
   856d8:	1000e41e 	bne	r2,zero,85a6c <__sfvwrite_r+0x480>
   856dc:	91c0030b 	ldhu	r7,12(r18)
   856e0:	b5400017 	ldw	r21,0(r22)
   856e4:	3880008c 	andi	r2,r7,2
   856e8:	103fd81e 	bne	r2,zero,8564c <__sfvwrite_r+0x60>
   856ec:	3880004c 	andi	r2,r7,1
   856f0:	1005003a 	cmpeq	r2,r2,zero
   856f4:	10005726 	beq	r2,zero,85854 <__sfvwrite_r+0x268>
   856f8:	0029883a 	mov	r20,zero
   856fc:	002f883a 	mov	r23,zero
   85700:	a0004226 	beq	r20,zero,8580c <__sfvwrite_r+0x220>
   85704:	3880800c 	andi	r2,r7,512
   85708:	94000217 	ldw	r16,8(r18)
   8570c:	10008b26 	beq	r2,zero,8593c <__sfvwrite_r+0x350>
   85710:	800d883a 	mov	r6,r16
   85714:	a400a536 	bltu	r20,r16,859ac <__sfvwrite_r+0x3c0>
   85718:	3881200c 	andi	r2,r7,1152
   8571c:	10002726 	beq	r2,zero,857bc <__sfvwrite_r+0x1d0>
   85720:	90800517 	ldw	r2,20(r18)
   85724:	92000417 	ldw	r8,16(r18)
   85728:	91400017 	ldw	r5,0(r18)
   8572c:	1087883a 	add	r3,r2,r2
   85730:	1887883a 	add	r3,r3,r2
   85734:	1808d7fa 	srli	r4,r3,31
   85738:	2a21c83a 	sub	r16,r5,r8
   8573c:	80800044 	addi	r2,r16,1
   85740:	20c9883a 	add	r4,r4,r3
   85744:	2027d07a 	srai	r19,r4,1
   85748:	a085883a 	add	r2,r20,r2
   8574c:	980d883a 	mov	r6,r19
   85750:	9880022e 	bgeu	r19,r2,8575c <__sfvwrite_r+0x170>
   85754:	1027883a 	mov	r19,r2
   85758:	100d883a 	mov	r6,r2
   8575c:	3881000c 	andi	r2,r7,1024
   85760:	1000b826 	beq	r2,zero,85a44 <__sfvwrite_r+0x458>
   85764:	300b883a 	mov	r5,r6
   85768:	e009883a 	mov	r4,fp
   8576c:	0085e600 	call	85e60 <_malloc_r>
   85770:	10003126 	beq	r2,zero,85838 <__sfvwrite_r+0x24c>
   85774:	91400417 	ldw	r5,16(r18)
   85778:	1009883a 	mov	r4,r2
   8577c:	800d883a 	mov	r6,r16
   85780:	1023883a 	mov	r17,r2
   85784:	00866840 	call	86684 <memcpy>
   85788:	90c0030b 	ldhu	r3,12(r18)
   8578c:	00beffc4 	movi	r2,-1025
   85790:	1886703a 	and	r3,r3,r2
   85794:	18c02014 	ori	r3,r3,128
   85798:	90c0030d 	sth	r3,12(r18)
   8579c:	9c07c83a 	sub	r3,r19,r16
   857a0:	8c05883a 	add	r2,r17,r16
   857a4:	a00d883a 	mov	r6,r20
   857a8:	a021883a 	mov	r16,r20
   857ac:	90800015 	stw	r2,0(r18)
   857b0:	90c00215 	stw	r3,8(r18)
   857b4:	94400415 	stw	r17,16(r18)
   857b8:	94c00515 	stw	r19,20(r18)
   857bc:	91000017 	ldw	r4,0(r18)
   857c0:	b80b883a 	mov	r5,r23
   857c4:	a023883a 	mov	r17,r20
   857c8:	00867240 	call	86724 <memmove>
   857cc:	90c00217 	ldw	r3,8(r18)
   857d0:	90800017 	ldw	r2,0(r18)
   857d4:	a027883a 	mov	r19,r20
   857d8:	1c07c83a 	sub	r3,r3,r16
   857dc:	1405883a 	add	r2,r2,r16
   857e0:	90c00215 	stw	r3,8(r18)
   857e4:	a021883a 	mov	r16,r20
   857e8:	90800015 	stw	r2,0(r18)
   857ec:	b0800217 	ldw	r2,8(r22)
   857f0:	1405c83a 	sub	r2,r2,r16
   857f4:	b0800215 	stw	r2,8(r22)
   857f8:	103fa826 	beq	r2,zero,8569c <__sfvwrite_r+0xb0>
   857fc:	a469c83a 	sub	r20,r20,r17
   85800:	91c0030b 	ldhu	r7,12(r18)
   85804:	bcef883a 	add	r23,r23,r19
   85808:	a03fbe1e 	bne	r20,zero,85704 <__sfvwrite_r+0x118>
   8580c:	adc00017 	ldw	r23,0(r21)
   85810:	ad000117 	ldw	r20,4(r21)
   85814:	ad400204 	addi	r21,r21,8
   85818:	003fb906 	br	85700 <__sfvwrite_r+0x114>
   8581c:	ac400017 	ldw	r17,0(r21)
   85820:	ac000117 	ldw	r16,4(r21)
   85824:	ad400204 	addi	r21,r21,8
   85828:	003f8a06 	br	85654 <__sfvwrite_r+0x68>
   8582c:	91400417 	ldw	r5,16(r18)
   85830:	e009883a 	mov	r4,fp
   85834:	00852d80 	call	852d8 <_free_r>
   85838:	00800304 	movi	r2,12
   8583c:	e0800015 	stw	r2,0(fp)
   85840:	9080030b 	ldhu	r2,12(r18)
   85844:	013fffc4 	movi	r4,-1
   85848:	10801014 	ori	r2,r2,64
   8584c:	9080030d 	sth	r2,12(r18)
   85850:	003f9306 	br	856a0 <__sfvwrite_r+0xb4>
   85854:	0027883a 	mov	r19,zero
   85858:	002f883a 	mov	r23,zero
   8585c:	d8000015 	stw	zero,0(sp)
   85860:	0029883a 	mov	r20,zero
   85864:	98001e26 	beq	r19,zero,858e0 <__sfvwrite_r+0x2f4>
   85868:	d8c00017 	ldw	r3,0(sp)
   8586c:	1804c03a 	cmpne	r2,r3,zero
   85870:	10005e26 	beq	r2,zero,859ec <__sfvwrite_r+0x400>
   85874:	9821883a 	mov	r16,r19
   85878:	a4c0012e 	bgeu	r20,r19,85880 <__sfvwrite_r+0x294>
   8587c:	a021883a 	mov	r16,r20
   85880:	91000017 	ldw	r4,0(r18)
   85884:	90800417 	ldw	r2,16(r18)
   85888:	91800217 	ldw	r6,8(r18)
   8588c:	91c00517 	ldw	r7,20(r18)
   85890:	1100022e 	bgeu	r2,r4,8589c <__sfvwrite_r+0x2b0>
   85894:	31e3883a 	add	r17,r6,r7
   85898:	8c001616 	blt	r17,r16,858f4 <__sfvwrite_r+0x308>
   8589c:	81c03816 	blt	r16,r7,85980 <__sfvwrite_r+0x394>
   858a0:	90c00917 	ldw	r3,36(r18)
   858a4:	91400717 	ldw	r5,28(r18)
   858a8:	e009883a 	mov	r4,fp
   858ac:	b80d883a 	mov	r6,r23
   858b0:	183ee83a 	callr	r3
   858b4:	1023883a 	mov	r17,r2
   858b8:	00bfe10e 	bge	zero,r2,85840 <__sfvwrite_r+0x254>
   858bc:	a469c83a 	sub	r20,r20,r17
   858c0:	a0001826 	beq	r20,zero,85924 <__sfvwrite_r+0x338>
   858c4:	b0800217 	ldw	r2,8(r22)
   858c8:	1445c83a 	sub	r2,r2,r17
   858cc:	b0800215 	stw	r2,8(r22)
   858d0:	103f7226 	beq	r2,zero,8569c <__sfvwrite_r+0xb0>
   858d4:	9c67c83a 	sub	r19,r19,r17
   858d8:	bc6f883a 	add	r23,r23,r17
   858dc:	983fe21e 	bne	r19,zero,85868 <__sfvwrite_r+0x27c>
   858e0:	adc00017 	ldw	r23,0(r21)
   858e4:	acc00117 	ldw	r19,4(r21)
   858e8:	ad400204 	addi	r21,r21,8
   858ec:	d8000015 	stw	zero,0(sp)
   858f0:	003fdc06 	br	85864 <__sfvwrite_r+0x278>
   858f4:	b80b883a 	mov	r5,r23
   858f8:	880d883a 	mov	r6,r17
   858fc:	00867240 	call	86724 <memmove>
   85900:	90c00017 	ldw	r3,0(r18)
   85904:	e009883a 	mov	r4,fp
   85908:	900b883a 	mov	r5,r18
   8590c:	1c47883a 	add	r3,r3,r17
   85910:	90c00015 	stw	r3,0(r18)
   85914:	0084c880 	call	84c88 <_fflush_r>
   85918:	103fc91e 	bne	r2,zero,85840 <__sfvwrite_r+0x254>
   8591c:	a469c83a 	sub	r20,r20,r17
   85920:	a03fe81e 	bne	r20,zero,858c4 <__sfvwrite_r+0x2d8>
   85924:	e009883a 	mov	r4,fp
   85928:	900b883a 	mov	r5,r18
   8592c:	0084c880 	call	84c88 <_fflush_r>
   85930:	103fc31e 	bne	r2,zero,85840 <__sfvwrite_r+0x254>
   85934:	d8000015 	stw	zero,0(sp)
   85938:	003fe206 	br	858c4 <__sfvwrite_r+0x2d8>
   8593c:	91000017 	ldw	r4,0(r18)
   85940:	90800417 	ldw	r2,16(r18)
   85944:	1100022e 	bgeu	r2,r4,85950 <__sfvwrite_r+0x364>
   85948:	8023883a 	mov	r17,r16
   8594c:	85003136 	bltu	r16,r20,85a14 <__sfvwrite_r+0x428>
   85950:	91c00517 	ldw	r7,20(r18)
   85954:	a1c01836 	bltu	r20,r7,859b8 <__sfvwrite_r+0x3cc>
   85958:	90c00917 	ldw	r3,36(r18)
   8595c:	91400717 	ldw	r5,28(r18)
   85960:	e009883a 	mov	r4,fp
   85964:	b80d883a 	mov	r6,r23
   85968:	183ee83a 	callr	r3
   8596c:	1021883a 	mov	r16,r2
   85970:	00bfb30e 	bge	zero,r2,85840 <__sfvwrite_r+0x254>
   85974:	1023883a 	mov	r17,r2
   85978:	1027883a 	mov	r19,r2
   8597c:	003f9b06 	br	857ec <__sfvwrite_r+0x200>
   85980:	b80b883a 	mov	r5,r23
   85984:	800d883a 	mov	r6,r16
   85988:	00867240 	call	86724 <memmove>
   8598c:	90c00217 	ldw	r3,8(r18)
   85990:	90800017 	ldw	r2,0(r18)
   85994:	8023883a 	mov	r17,r16
   85998:	1c07c83a 	sub	r3,r3,r16
   8599c:	1405883a 	add	r2,r2,r16
   859a0:	90c00215 	stw	r3,8(r18)
   859a4:	90800015 	stw	r2,0(r18)
   859a8:	003fc406 	br	858bc <__sfvwrite_r+0x2d0>
   859ac:	a00d883a 	mov	r6,r20
   859b0:	a021883a 	mov	r16,r20
   859b4:	003f8106 	br	857bc <__sfvwrite_r+0x1d0>
   859b8:	b80b883a 	mov	r5,r23
   859bc:	a00d883a 	mov	r6,r20
   859c0:	00867240 	call	86724 <memmove>
   859c4:	90c00217 	ldw	r3,8(r18)
   859c8:	90800017 	ldw	r2,0(r18)
   859cc:	a021883a 	mov	r16,r20
   859d0:	1d07c83a 	sub	r3,r3,r20
   859d4:	1505883a 	add	r2,r2,r20
   859d8:	a023883a 	mov	r17,r20
   859dc:	a027883a 	mov	r19,r20
   859e0:	90c00215 	stw	r3,8(r18)
   859e4:	90800015 	stw	r2,0(r18)
   859e8:	003f8006 	br	857ec <__sfvwrite_r+0x200>
   859ec:	b809883a 	mov	r4,r23
   859f0:	01400284 	movi	r5,10
   859f4:	980d883a 	mov	r6,r19
   859f8:	00865a00 	call	865a0 <memchr>
   859fc:	10001726 	beq	r2,zero,85a5c <__sfvwrite_r+0x470>
   85a00:	15c5c83a 	sub	r2,r2,r23
   85a04:	15000044 	addi	r20,r2,1
   85a08:	00800044 	movi	r2,1
   85a0c:	d8800015 	stw	r2,0(sp)
   85a10:	003f9806 	br	85874 <__sfvwrite_r+0x288>
   85a14:	b80b883a 	mov	r5,r23
   85a18:	800d883a 	mov	r6,r16
   85a1c:	00867240 	call	86724 <memmove>
   85a20:	90c00017 	ldw	r3,0(r18)
   85a24:	e009883a 	mov	r4,fp
   85a28:	900b883a 	mov	r5,r18
   85a2c:	1c07883a 	add	r3,r3,r16
   85a30:	90c00015 	stw	r3,0(r18)
   85a34:	8027883a 	mov	r19,r16
   85a38:	0084c880 	call	84c88 <_fflush_r>
   85a3c:	103f6b26 	beq	r2,zero,857ec <__sfvwrite_r+0x200>
   85a40:	003f7f06 	br	85840 <__sfvwrite_r+0x254>
   85a44:	400b883a 	mov	r5,r8
   85a48:	e009883a 	mov	r4,fp
   85a4c:	0087b140 	call	87b14 <_realloc_r>
   85a50:	103f7626 	beq	r2,zero,8582c <__sfvwrite_r+0x240>
   85a54:	1023883a 	mov	r17,r2
   85a58:	003f5006 	br	8579c <__sfvwrite_r+0x1b0>
   85a5c:	00c00044 	movi	r3,1
   85a60:	9d000044 	addi	r20,r19,1
   85a64:	d8c00015 	stw	r3,0(sp)
   85a68:	003f8206 	br	85874 <__sfvwrite_r+0x288>
   85a6c:	9080030b 	ldhu	r2,12(r18)
   85a70:	00c00244 	movi	r3,9
   85a74:	013fffc4 	movi	r4,-1
   85a78:	10801014 	ori	r2,r2,64
   85a7c:	9080030d 	sth	r2,12(r18)
   85a80:	e0c00015 	stw	r3,0(fp)
   85a84:	003f0606 	br	856a0 <__sfvwrite_r+0xb4>

00085a88 <_fwalk_reent>:
   85a88:	defff704 	addi	sp,sp,-36
   85a8c:	dcc00315 	stw	r19,12(sp)
   85a90:	24c0b804 	addi	r19,r4,736
   85a94:	dd800615 	stw	r22,24(sp)
   85a98:	dd400515 	stw	r21,20(sp)
   85a9c:	dfc00815 	stw	ra,32(sp)
   85aa0:	ddc00715 	stw	r23,28(sp)
   85aa4:	dd000415 	stw	r20,16(sp)
   85aa8:	dc800215 	stw	r18,8(sp)
   85aac:	dc400115 	stw	r17,4(sp)
   85ab0:	dc000015 	stw	r16,0(sp)
   85ab4:	202b883a 	mov	r21,r4
   85ab8:	282d883a 	mov	r22,r5
   85abc:	0084f100 	call	84f10 <__sfp_lock_acquire>
   85ac0:	98002126 	beq	r19,zero,85b48 <_fwalk_reent+0xc0>
   85ac4:	002f883a 	mov	r23,zero
   85ac8:	9c800117 	ldw	r18,4(r19)
   85acc:	9c000217 	ldw	r16,8(r19)
   85ad0:	90bfffc4 	addi	r2,r18,-1
   85ad4:	10000d16 	blt	r2,zero,85b0c <_fwalk_reent+0x84>
   85ad8:	0023883a 	mov	r17,zero
   85adc:	053fffc4 	movi	r20,-1
   85ae0:	8080030f 	ldh	r2,12(r16)
   85ae4:	8c400044 	addi	r17,r17,1
   85ae8:	10000626 	beq	r2,zero,85b04 <_fwalk_reent+0x7c>
   85aec:	8080038f 	ldh	r2,14(r16)
   85af0:	800b883a 	mov	r5,r16
   85af4:	a809883a 	mov	r4,r21
   85af8:	15000226 	beq	r2,r20,85b04 <_fwalk_reent+0x7c>
   85afc:	b03ee83a 	callr	r22
   85b00:	b8aeb03a 	or	r23,r23,r2
   85b04:	84001704 	addi	r16,r16,92
   85b08:	947ff51e 	bne	r18,r17,85ae0 <_fwalk_reent+0x58>
   85b0c:	9cc00017 	ldw	r19,0(r19)
   85b10:	983fed1e 	bne	r19,zero,85ac8 <_fwalk_reent+0x40>
   85b14:	0084f140 	call	84f14 <__sfp_lock_release>
   85b18:	b805883a 	mov	r2,r23
   85b1c:	dfc00817 	ldw	ra,32(sp)
   85b20:	ddc00717 	ldw	r23,28(sp)
   85b24:	dd800617 	ldw	r22,24(sp)
   85b28:	dd400517 	ldw	r21,20(sp)
   85b2c:	dd000417 	ldw	r20,16(sp)
   85b30:	dcc00317 	ldw	r19,12(sp)
   85b34:	dc800217 	ldw	r18,8(sp)
   85b38:	dc400117 	ldw	r17,4(sp)
   85b3c:	dc000017 	ldw	r16,0(sp)
   85b40:	dec00904 	addi	sp,sp,36
   85b44:	f800283a 	ret
   85b48:	002f883a 	mov	r23,zero
   85b4c:	003ff106 	br	85b14 <_fwalk_reent+0x8c>

00085b50 <_fwalk>:
   85b50:	defff804 	addi	sp,sp,-32
   85b54:	dcc00315 	stw	r19,12(sp)
   85b58:	24c0b804 	addi	r19,r4,736
   85b5c:	dd400515 	stw	r21,20(sp)
   85b60:	dfc00715 	stw	ra,28(sp)
   85b64:	dd800615 	stw	r22,24(sp)
   85b68:	dd000415 	stw	r20,16(sp)
   85b6c:	dc800215 	stw	r18,8(sp)
   85b70:	dc400115 	stw	r17,4(sp)
   85b74:	dc000015 	stw	r16,0(sp)
   85b78:	282b883a 	mov	r21,r5
   85b7c:	0084f100 	call	84f10 <__sfp_lock_acquire>
   85b80:	98001f26 	beq	r19,zero,85c00 <_fwalk+0xb0>
   85b84:	002d883a 	mov	r22,zero
   85b88:	9c800117 	ldw	r18,4(r19)
   85b8c:	9c000217 	ldw	r16,8(r19)
   85b90:	90bfffc4 	addi	r2,r18,-1
   85b94:	10000c16 	blt	r2,zero,85bc8 <_fwalk+0x78>
   85b98:	0023883a 	mov	r17,zero
   85b9c:	053fffc4 	movi	r20,-1
   85ba0:	8080030f 	ldh	r2,12(r16)
   85ba4:	8c400044 	addi	r17,r17,1
   85ba8:	10000526 	beq	r2,zero,85bc0 <_fwalk+0x70>
   85bac:	8080038f 	ldh	r2,14(r16)
   85bb0:	8009883a 	mov	r4,r16
   85bb4:	15000226 	beq	r2,r20,85bc0 <_fwalk+0x70>
   85bb8:	a83ee83a 	callr	r21
   85bbc:	b0acb03a 	or	r22,r22,r2
   85bc0:	84001704 	addi	r16,r16,92
   85bc4:	947ff61e 	bne	r18,r17,85ba0 <_fwalk+0x50>
   85bc8:	9cc00017 	ldw	r19,0(r19)
   85bcc:	983fee1e 	bne	r19,zero,85b88 <_fwalk+0x38>
   85bd0:	0084f140 	call	84f14 <__sfp_lock_release>
   85bd4:	b005883a 	mov	r2,r22
   85bd8:	dfc00717 	ldw	ra,28(sp)
   85bdc:	dd800617 	ldw	r22,24(sp)
   85be0:	dd400517 	ldw	r21,20(sp)
   85be4:	dd000417 	ldw	r20,16(sp)
   85be8:	dcc00317 	ldw	r19,12(sp)
   85bec:	dc800217 	ldw	r18,8(sp)
   85bf0:	dc400117 	ldw	r17,4(sp)
   85bf4:	dc000017 	ldw	r16,0(sp)
   85bf8:	dec00804 	addi	sp,sp,32
   85bfc:	f800283a 	ret
   85c00:	002d883a 	mov	r22,zero
   85c04:	003ff206 	br	85bd0 <_fwalk+0x80>

00085c08 <__locale_charset>:
   85c08:	d0a00317 	ldw	r2,-32756(gp)
   85c0c:	f800283a 	ret

00085c10 <_localeconv_r>:
   85c10:	00800274 	movhi	r2,9
   85c14:	10b75104 	addi	r2,r2,-8892
   85c18:	f800283a 	ret

00085c1c <localeconv>:
   85c1c:	00800274 	movhi	r2,9
   85c20:	10be7f04 	addi	r2,r2,-1540
   85c24:	11000017 	ldw	r4,0(r2)
   85c28:	0085c101 	jmpi	85c10 <_localeconv_r>

00085c2c <_setlocale_r>:
   85c2c:	defffc04 	addi	sp,sp,-16
   85c30:	00c00274 	movhi	r3,9
   85c34:	18f74c04 	addi	r3,r3,-8912
   85c38:	dc800215 	stw	r18,8(sp)
   85c3c:	dc400115 	stw	r17,4(sp)
   85c40:	dc000015 	stw	r16,0(sp)
   85c44:	2023883a 	mov	r17,r4
   85c48:	2825883a 	mov	r18,r5
   85c4c:	dfc00315 	stw	ra,12(sp)
   85c50:	3021883a 	mov	r16,r6
   85c54:	3009883a 	mov	r4,r6
   85c58:	180b883a 	mov	r5,r3
   85c5c:	30000926 	beq	r6,zero,85c84 <_setlocale_r+0x58>
   85c60:	00883340 	call	88334 <strcmp>
   85c64:	8009883a 	mov	r4,r16
   85c68:	01400274 	movhi	r5,9
   85c6c:	29773704 	addi	r5,r5,-8996
   85c70:	10000b1e 	bne	r2,zero,85ca0 <_setlocale_r+0x74>
   85c74:	8c000d15 	stw	r16,52(r17)
   85c78:	8c800c15 	stw	r18,48(r17)
   85c7c:	00c00274 	movhi	r3,9
   85c80:	18f74c04 	addi	r3,r3,-8912
   85c84:	1805883a 	mov	r2,r3
   85c88:	dfc00317 	ldw	ra,12(sp)
   85c8c:	dc800217 	ldw	r18,8(sp)
   85c90:	dc400117 	ldw	r17,4(sp)
   85c94:	dc000017 	ldw	r16,0(sp)
   85c98:	dec00404 	addi	sp,sp,16
   85c9c:	f800283a 	ret
   85ca0:	00883340 	call	88334 <strcmp>
   85ca4:	0007883a 	mov	r3,zero
   85ca8:	103ff226 	beq	r2,zero,85c74 <_setlocale_r+0x48>
   85cac:	003ff506 	br	85c84 <_setlocale_r+0x58>

00085cb0 <setlocale>:
   85cb0:	01800274 	movhi	r6,9
   85cb4:	31be7f04 	addi	r6,r6,-1540
   85cb8:	2007883a 	mov	r3,r4
   85cbc:	31000017 	ldw	r4,0(r6)
   85cc0:	280d883a 	mov	r6,r5
   85cc4:	180b883a 	mov	r5,r3
   85cc8:	0085c2c1 	jmpi	85c2c <_setlocale_r>

00085ccc <__smakebuf_r>:
   85ccc:	2880030b 	ldhu	r2,12(r5)
   85cd0:	deffed04 	addi	sp,sp,-76
   85cd4:	dc401015 	stw	r17,64(sp)
   85cd8:	1080008c 	andi	r2,r2,2
   85cdc:	dc000f15 	stw	r16,60(sp)
   85ce0:	dfc01215 	stw	ra,72(sp)
   85ce4:	dc801115 	stw	r18,68(sp)
   85ce8:	2821883a 	mov	r16,r5
   85cec:	2023883a 	mov	r17,r4
   85cf0:	10000b26 	beq	r2,zero,85d20 <__smakebuf_r+0x54>
   85cf4:	28c010c4 	addi	r3,r5,67
   85cf8:	00800044 	movi	r2,1
   85cfc:	28800515 	stw	r2,20(r5)
   85d00:	28c00415 	stw	r3,16(r5)
   85d04:	28c00015 	stw	r3,0(r5)
   85d08:	dfc01217 	ldw	ra,72(sp)
   85d0c:	dc801117 	ldw	r18,68(sp)
   85d10:	dc401017 	ldw	r17,64(sp)
   85d14:	dc000f17 	ldw	r16,60(sp)
   85d18:	dec01304 	addi	sp,sp,76
   85d1c:	f800283a 	ret
   85d20:	2940038f 	ldh	r5,14(r5)
   85d24:	28002116 	blt	r5,zero,85dac <__smakebuf_r+0xe0>
   85d28:	d80d883a 	mov	r6,sp
   85d2c:	00888100 	call	88810 <_fstat_r>
   85d30:	10001e16 	blt	r2,zero,85dac <__smakebuf_r+0xe0>
   85d34:	d8800117 	ldw	r2,4(sp)
   85d38:	00e00014 	movui	r3,32768
   85d3c:	113c000c 	andi	r4,r2,61440
   85d40:	20c03126 	beq	r4,r3,85e08 <__smakebuf_r+0x13c>
   85d44:	8080030b 	ldhu	r2,12(r16)
   85d48:	00c80004 	movi	r3,8192
   85d4c:	10820014 	ori	r2,r2,2048
   85d50:	8080030d 	sth	r2,12(r16)
   85d54:	20c01e26 	beq	r4,r3,85dd0 <__smakebuf_r+0x104>
   85d58:	04810004 	movi	r18,1024
   85d5c:	8809883a 	mov	r4,r17
   85d60:	900b883a 	mov	r5,r18
   85d64:	0085e600 	call	85e60 <_malloc_r>
   85d68:	1009883a 	mov	r4,r2
   85d6c:	10003126 	beq	r2,zero,85e34 <__smakebuf_r+0x168>
   85d70:	80c0030b 	ldhu	r3,12(r16)
   85d74:	00800234 	movhi	r2,8
   85d78:	10940104 	addi	r2,r2,20484
   85d7c:	88800f15 	stw	r2,60(r17)
   85d80:	18c02014 	ori	r3,r3,128
   85d84:	84800515 	stw	r18,20(r16)
   85d88:	80c0030d 	sth	r3,12(r16)
   85d8c:	81000415 	stw	r4,16(r16)
   85d90:	81000015 	stw	r4,0(r16)
   85d94:	dfc01217 	ldw	ra,72(sp)
   85d98:	dc801117 	ldw	r18,68(sp)
   85d9c:	dc401017 	ldw	r17,64(sp)
   85da0:	dc000f17 	ldw	r16,60(sp)
   85da4:	dec01304 	addi	sp,sp,76
   85da8:	f800283a 	ret
   85dac:	80c0030b 	ldhu	r3,12(r16)
   85db0:	1880200c 	andi	r2,r3,128
   85db4:	10000426 	beq	r2,zero,85dc8 <__smakebuf_r+0xfc>
   85db8:	04801004 	movi	r18,64
   85dbc:	18820014 	ori	r2,r3,2048
   85dc0:	8080030d 	sth	r2,12(r16)
   85dc4:	003fe506 	br	85d5c <__smakebuf_r+0x90>
   85dc8:	04810004 	movi	r18,1024
   85dcc:	003ffb06 	br	85dbc <__smakebuf_r+0xf0>
   85dd0:	8140038f 	ldh	r5,14(r16)
   85dd4:	8809883a 	mov	r4,r17
   85dd8:	00888840 	call	88884 <_isatty_r>
   85ddc:	103fde26 	beq	r2,zero,85d58 <__smakebuf_r+0x8c>
   85de0:	8080030b 	ldhu	r2,12(r16)
   85de4:	80c010c4 	addi	r3,r16,67
   85de8:	04810004 	movi	r18,1024
   85dec:	10800054 	ori	r2,r2,1
   85df0:	8080030d 	sth	r2,12(r16)
   85df4:	00800044 	movi	r2,1
   85df8:	80c00415 	stw	r3,16(r16)
   85dfc:	80800515 	stw	r2,20(r16)
   85e00:	80c00015 	stw	r3,0(r16)
   85e04:	003fd506 	br	85d5c <__smakebuf_r+0x90>
   85e08:	80c00a17 	ldw	r3,40(r16)
   85e0c:	00800274 	movhi	r2,9
   85e10:	10a07c04 	addi	r2,r2,-32272
   85e14:	18bfcb1e 	bne	r3,r2,85d44 <__smakebuf_r+0x78>
   85e18:	8080030b 	ldhu	r2,12(r16)
   85e1c:	00c10004 	movi	r3,1024
   85e20:	1825883a 	mov	r18,r3
   85e24:	10c4b03a 	or	r2,r2,r3
   85e28:	8080030d 	sth	r2,12(r16)
   85e2c:	80c01315 	stw	r3,76(r16)
   85e30:	003fca06 	br	85d5c <__smakebuf_r+0x90>
   85e34:	8100030b 	ldhu	r4,12(r16)
   85e38:	2080800c 	andi	r2,r4,512
   85e3c:	103fb21e 	bne	r2,zero,85d08 <__smakebuf_r+0x3c>
   85e40:	80c010c4 	addi	r3,r16,67
   85e44:	21000094 	ori	r4,r4,2
   85e48:	00800044 	movi	r2,1
   85e4c:	80800515 	stw	r2,20(r16)
   85e50:	8100030d 	sth	r4,12(r16)
   85e54:	80c00415 	stw	r3,16(r16)
   85e58:	80c00015 	stw	r3,0(r16)
   85e5c:	003faa06 	br	85d08 <__smakebuf_r+0x3c>

00085e60 <_malloc_r>:
   85e60:	defff604 	addi	sp,sp,-40
   85e64:	28c002c4 	addi	r3,r5,11
   85e68:	00800584 	movi	r2,22
   85e6c:	dc800215 	stw	r18,8(sp)
   85e70:	dfc00915 	stw	ra,36(sp)
   85e74:	df000815 	stw	fp,32(sp)
   85e78:	ddc00715 	stw	r23,28(sp)
   85e7c:	dd800615 	stw	r22,24(sp)
   85e80:	dd400515 	stw	r21,20(sp)
   85e84:	dd000415 	stw	r20,16(sp)
   85e88:	dcc00315 	stw	r19,12(sp)
   85e8c:	dc400115 	stw	r17,4(sp)
   85e90:	dc000015 	stw	r16,0(sp)
   85e94:	2025883a 	mov	r18,r4
   85e98:	10c01236 	bltu	r2,r3,85ee4 <_malloc_r+0x84>
   85e9c:	04400404 	movi	r17,16
   85ea0:	8940142e 	bgeu	r17,r5,85ef4 <_malloc_r+0x94>
   85ea4:	00800304 	movi	r2,12
   85ea8:	0007883a 	mov	r3,zero
   85eac:	90800015 	stw	r2,0(r18)
   85eb0:	1805883a 	mov	r2,r3
   85eb4:	dfc00917 	ldw	ra,36(sp)
   85eb8:	df000817 	ldw	fp,32(sp)
   85ebc:	ddc00717 	ldw	r23,28(sp)
   85ec0:	dd800617 	ldw	r22,24(sp)
   85ec4:	dd400517 	ldw	r21,20(sp)
   85ec8:	dd000417 	ldw	r20,16(sp)
   85ecc:	dcc00317 	ldw	r19,12(sp)
   85ed0:	dc800217 	ldw	r18,8(sp)
   85ed4:	dc400117 	ldw	r17,4(sp)
   85ed8:	dc000017 	ldw	r16,0(sp)
   85edc:	dec00a04 	addi	sp,sp,40
   85ee0:	f800283a 	ret
   85ee4:	00bffe04 	movi	r2,-8
   85ee8:	18a2703a 	and	r17,r3,r2
   85eec:	883fed16 	blt	r17,zero,85ea4 <_malloc_r+0x44>
   85ef0:	897fec36 	bltu	r17,r5,85ea4 <_malloc_r+0x44>
   85ef4:	9009883a 	mov	r4,r18
   85ef8:	008b8340 	call	8b834 <__malloc_lock>
   85efc:	00807dc4 	movi	r2,503
   85f00:	14402b2e 	bgeu	r2,r17,85fb0 <_malloc_r+0x150>
   85f04:	8806d27a 	srli	r3,r17,9
   85f08:	18003f1e 	bne	r3,zero,86008 <_malloc_r+0x1a8>
   85f0c:	880cd0fa 	srli	r6,r17,3
   85f10:	300490fa 	slli	r2,r6,3
   85f14:	02c00274 	movhi	r11,9
   85f18:	5af8fb04 	addi	r11,r11,-7188
   85f1c:	12cb883a 	add	r5,r2,r11
   85f20:	2c000317 	ldw	r16,12(r5)
   85f24:	580f883a 	mov	r7,r11
   85f28:	2c00041e 	bne	r5,r16,85f3c <_malloc_r+0xdc>
   85f2c:	00000a06 	br	85f58 <_malloc_r+0xf8>
   85f30:	1800860e 	bge	r3,zero,8614c <_malloc_r+0x2ec>
   85f34:	84000317 	ldw	r16,12(r16)
   85f38:	2c000726 	beq	r5,r16,85f58 <_malloc_r+0xf8>
   85f3c:	80800117 	ldw	r2,4(r16)
   85f40:	00ffff04 	movi	r3,-4
   85f44:	10c8703a 	and	r4,r2,r3
   85f48:	2447c83a 	sub	r3,r4,r17
   85f4c:	008003c4 	movi	r2,15
   85f50:	10fff70e 	bge	r2,r3,85f30 <_malloc_r+0xd0>
   85f54:	31bfffc4 	addi	r6,r6,-1
   85f58:	32400044 	addi	r9,r6,1
   85f5c:	02800274 	movhi	r10,9
   85f60:	52b8fd04 	addi	r10,r10,-7180
   85f64:	54000217 	ldw	r16,8(r10)
   85f68:	8280a026 	beq	r16,r10,861ec <_malloc_r+0x38c>
   85f6c:	80800117 	ldw	r2,4(r16)
   85f70:	00ffff04 	movi	r3,-4
   85f74:	10ca703a 	and	r5,r2,r3
   85f78:	2c4dc83a 	sub	r6,r5,r17
   85f7c:	008003c4 	movi	r2,15
   85f80:	11808316 	blt	r2,r6,86190 <_malloc_r+0x330>
   85f84:	52800315 	stw	r10,12(r10)
   85f88:	52800215 	stw	r10,8(r10)
   85f8c:	30002916 	blt	r6,zero,86034 <_malloc_r+0x1d4>
   85f90:	8147883a 	add	r3,r16,r5
   85f94:	18800117 	ldw	r2,4(r3)
   85f98:	9009883a 	mov	r4,r18
   85f9c:	10800054 	ori	r2,r2,1
   85fa0:	18800115 	stw	r2,4(r3)
   85fa4:	008b8540 	call	8b854 <__malloc_unlock>
   85fa8:	80c00204 	addi	r3,r16,8
   85fac:	003fc006 	br	85eb0 <_malloc_r+0x50>
   85fb0:	02c00274 	movhi	r11,9
   85fb4:	5af8fb04 	addi	r11,r11,-7188
   85fb8:	8ac5883a 	add	r2,r17,r11
   85fbc:	14000317 	ldw	r16,12(r2)
   85fc0:	580f883a 	mov	r7,r11
   85fc4:	8806d0fa 	srli	r3,r17,3
   85fc8:	14006c26 	beq	r2,r16,8617c <_malloc_r+0x31c>
   85fcc:	80c00117 	ldw	r3,4(r16)
   85fd0:	00bfff04 	movi	r2,-4
   85fd4:	81800317 	ldw	r6,12(r16)
   85fd8:	1886703a 	and	r3,r3,r2
   85fdc:	80c7883a 	add	r3,r16,r3
   85fe0:	18800117 	ldw	r2,4(r3)
   85fe4:	81400217 	ldw	r5,8(r16)
   85fe8:	9009883a 	mov	r4,r18
   85fec:	10800054 	ori	r2,r2,1
   85ff0:	18800115 	stw	r2,4(r3)
   85ff4:	31400215 	stw	r5,8(r6)
   85ff8:	29800315 	stw	r6,12(r5)
   85ffc:	008b8540 	call	8b854 <__malloc_unlock>
   86000:	80c00204 	addi	r3,r16,8
   86004:	003faa06 	br	85eb0 <_malloc_r+0x50>
   86008:	00800104 	movi	r2,4
   8600c:	10c0052e 	bgeu	r2,r3,86024 <_malloc_r+0x1c4>
   86010:	00800504 	movi	r2,20
   86014:	10c07836 	bltu	r2,r3,861f8 <_malloc_r+0x398>
   86018:	198016c4 	addi	r6,r3,91
   8601c:	300490fa 	slli	r2,r6,3
   86020:	003fbc06 	br	85f14 <_malloc_r+0xb4>
   86024:	8804d1ba 	srli	r2,r17,6
   86028:	11800e04 	addi	r6,r2,56
   8602c:	300490fa 	slli	r2,r6,3
   86030:	003fb806 	br	85f14 <_malloc_r+0xb4>
   86034:	00807fc4 	movi	r2,511
   86038:	1140bb36 	bltu	r2,r5,86328 <_malloc_r+0x4c8>
   8603c:	2806d0fa 	srli	r3,r5,3
   86040:	573ffe04 	addi	fp,r10,-8
   86044:	00800044 	movi	r2,1
   86048:	180890fa 	slli	r4,r3,3
   8604c:	1807d0ba 	srai	r3,r3,2
   86050:	e1c00117 	ldw	r7,4(fp)
   86054:	5909883a 	add	r4,r11,r4
   86058:	21400217 	ldw	r5,8(r4)
   8605c:	10c4983a 	sll	r2,r2,r3
   86060:	81000315 	stw	r4,12(r16)
   86064:	81400215 	stw	r5,8(r16)
   86068:	388eb03a 	or	r7,r7,r2
   8606c:	2c000315 	stw	r16,12(r5)
   86070:	24000215 	stw	r16,8(r4)
   86074:	e1c00115 	stw	r7,4(fp)
   86078:	4807883a 	mov	r3,r9
   8607c:	4800cd16 	blt	r9,zero,863b4 <_malloc_r+0x554>
   86080:	1807d0ba 	srai	r3,r3,2
   86084:	00800044 	movi	r2,1
   86088:	10c8983a 	sll	r4,r2,r3
   8608c:	39004436 	bltu	r7,r4,861a0 <_malloc_r+0x340>
   86090:	21c4703a 	and	r2,r4,r7
   86094:	10000a1e 	bne	r2,zero,860c0 <_malloc_r+0x260>
   86098:	2109883a 	add	r4,r4,r4
   8609c:	00bfff04 	movi	r2,-4
   860a0:	4884703a 	and	r2,r9,r2
   860a4:	3906703a 	and	r3,r7,r4
   860a8:	12400104 	addi	r9,r2,4
   860ac:	1800041e 	bne	r3,zero,860c0 <_malloc_r+0x260>
   860b0:	2109883a 	add	r4,r4,r4
   860b4:	3904703a 	and	r2,r7,r4
   860b8:	4a400104 	addi	r9,r9,4
   860bc:	103ffc26 	beq	r2,zero,860b0 <_malloc_r+0x250>
   860c0:	480490fa 	slli	r2,r9,3
   860c4:	4819883a 	mov	r12,r9
   860c8:	023fff04 	movi	r8,-4
   860cc:	589b883a 	add	r13,r11,r2
   860d0:	6807883a 	mov	r3,r13
   860d4:	014003c4 	movi	r5,15
   860d8:	1c000317 	ldw	r16,12(r3)
   860dc:	1c00041e 	bne	r3,r16,860f0 <_malloc_r+0x290>
   860e0:	0000a706 	br	86380 <_malloc_r+0x520>
   860e4:	3000ab0e 	bge	r6,zero,86394 <_malloc_r+0x534>
   860e8:	84000317 	ldw	r16,12(r16)
   860ec:	1c00a426 	beq	r3,r16,86380 <_malloc_r+0x520>
   860f0:	80800117 	ldw	r2,4(r16)
   860f4:	1204703a 	and	r2,r2,r8
   860f8:	144dc83a 	sub	r6,r2,r17
   860fc:	29bff90e 	bge	r5,r6,860e4 <_malloc_r+0x284>
   86100:	81000317 	ldw	r4,12(r16)
   86104:	80c00217 	ldw	r3,8(r16)
   86108:	89400054 	ori	r5,r17,1
   8610c:	8445883a 	add	r2,r16,r17
   86110:	20c00215 	stw	r3,8(r4)
   86114:	19000315 	stw	r4,12(r3)
   86118:	81400115 	stw	r5,4(r16)
   8611c:	1187883a 	add	r3,r2,r6
   86120:	31000054 	ori	r4,r6,1
   86124:	50800315 	stw	r2,12(r10)
   86128:	50800215 	stw	r2,8(r10)
   8612c:	19800015 	stw	r6,0(r3)
   86130:	11000115 	stw	r4,4(r2)
   86134:	12800215 	stw	r10,8(r2)
   86138:	12800315 	stw	r10,12(r2)
   8613c:	9009883a 	mov	r4,r18
   86140:	008b8540 	call	8b854 <__malloc_unlock>
   86144:	80c00204 	addi	r3,r16,8
   86148:	003f5906 	br	85eb0 <_malloc_r+0x50>
   8614c:	8109883a 	add	r4,r16,r4
   86150:	20800117 	ldw	r2,4(r4)
   86154:	80c00217 	ldw	r3,8(r16)
   86158:	81400317 	ldw	r5,12(r16)
   8615c:	10800054 	ori	r2,r2,1
   86160:	20800115 	stw	r2,4(r4)
   86164:	28c00215 	stw	r3,8(r5)
   86168:	19400315 	stw	r5,12(r3)
   8616c:	9009883a 	mov	r4,r18
   86170:	008b8540 	call	8b854 <__malloc_unlock>
   86174:	80c00204 	addi	r3,r16,8
   86178:	003f4d06 	br	85eb0 <_malloc_r+0x50>
   8617c:	80800204 	addi	r2,r16,8
   86180:	14000317 	ldw	r16,12(r2)
   86184:	143f911e 	bne	r2,r16,85fcc <_malloc_r+0x16c>
   86188:	1a400084 	addi	r9,r3,2
   8618c:	003f7306 	br	85f5c <_malloc_r+0xfc>
   86190:	88c00054 	ori	r3,r17,1
   86194:	8445883a 	add	r2,r16,r17
   86198:	80c00115 	stw	r3,4(r16)
   8619c:	003fdf06 	br	8611c <_malloc_r+0x2bc>
   861a0:	e4000217 	ldw	r16,8(fp)
   861a4:	00bfff04 	movi	r2,-4
   861a8:	80c00117 	ldw	r3,4(r16)
   861ac:	802d883a 	mov	r22,r16
   861b0:	18aa703a 	and	r21,r3,r2
   861b4:	ac401636 	bltu	r21,r17,86210 <_malloc_r+0x3b0>
   861b8:	ac49c83a 	sub	r4,r21,r17
   861bc:	008003c4 	movi	r2,15
   861c0:	1100130e 	bge	r2,r4,86210 <_malloc_r+0x3b0>
   861c4:	88800054 	ori	r2,r17,1
   861c8:	8447883a 	add	r3,r16,r17
   861cc:	80800115 	stw	r2,4(r16)
   861d0:	20800054 	ori	r2,r4,1
   861d4:	18800115 	stw	r2,4(r3)
   861d8:	e0c00215 	stw	r3,8(fp)
   861dc:	9009883a 	mov	r4,r18
   861e0:	008b8540 	call	8b854 <__malloc_unlock>
   861e4:	80c00204 	addi	r3,r16,8
   861e8:	003f3106 	br	85eb0 <_malloc_r+0x50>
   861ec:	39c00117 	ldw	r7,4(r7)
   861f0:	573ffe04 	addi	fp,r10,-8
   861f4:	003fa006 	br	86078 <_malloc_r+0x218>
   861f8:	00801504 	movi	r2,84
   861fc:	10c06736 	bltu	r2,r3,8639c <_malloc_r+0x53c>
   86200:	8804d33a 	srli	r2,r17,12
   86204:	11801b84 	addi	r6,r2,110
   86208:	300490fa 	slli	r2,r6,3
   8620c:	003f4106 	br	85f14 <_malloc_r+0xb4>
   86210:	d0a6ab17 	ldw	r2,-25940(gp)
   86214:	d0e00517 	ldw	r3,-32748(gp)
   86218:	053fffc4 	movi	r20,-1
   8621c:	10800404 	addi	r2,r2,16
   86220:	88a7883a 	add	r19,r17,r2
   86224:	1d000326 	beq	r3,r20,86234 <_malloc_r+0x3d4>
   86228:	98c3ffc4 	addi	r3,r19,4095
   8622c:	00bc0004 	movi	r2,-4096
   86230:	18a6703a 	and	r19,r3,r2
   86234:	9009883a 	mov	r4,r18
   86238:	980b883a 	mov	r5,r19
   8623c:	00881780 	call	88178 <_sbrk_r>
   86240:	1009883a 	mov	r4,r2
   86244:	15000426 	beq	r2,r20,86258 <_malloc_r+0x3f8>
   86248:	854b883a 	add	r5,r16,r21
   8624c:	1029883a 	mov	r20,r2
   86250:	11405a2e 	bgeu	r2,r5,863bc <_malloc_r+0x55c>
   86254:	87000c26 	beq	r16,fp,86288 <_malloc_r+0x428>
   86258:	e4000217 	ldw	r16,8(fp)
   8625c:	80c00117 	ldw	r3,4(r16)
   86260:	00bfff04 	movi	r2,-4
   86264:	1884703a 	and	r2,r3,r2
   86268:	14400336 	bltu	r2,r17,86278 <_malloc_r+0x418>
   8626c:	1449c83a 	sub	r4,r2,r17
   86270:	008003c4 	movi	r2,15
   86274:	113fd316 	blt	r2,r4,861c4 <_malloc_r+0x364>
   86278:	9009883a 	mov	r4,r18
   8627c:	008b8540 	call	8b854 <__malloc_unlock>
   86280:	0007883a 	mov	r3,zero
   86284:	003f0a06 	br	85eb0 <_malloc_r+0x50>
   86288:	05c00274 	movhi	r23,9
   8628c:	bdc53404 	addi	r23,r23,5328
   86290:	b8800017 	ldw	r2,0(r23)
   86294:	988d883a 	add	r6,r19,r2
   86298:	b9800015 	stw	r6,0(r23)
   8629c:	d0e00517 	ldw	r3,-32748(gp)
   862a0:	00bfffc4 	movi	r2,-1
   862a4:	18808e26 	beq	r3,r2,864e0 <_malloc_r+0x680>
   862a8:	2145c83a 	sub	r2,r4,r5
   862ac:	3085883a 	add	r2,r6,r2
   862b0:	b8800015 	stw	r2,0(r23)
   862b4:	20c001cc 	andi	r3,r4,7
   862b8:	18005f1e 	bne	r3,zero,86438 <_malloc_r+0x5d8>
   862bc:	000b883a 	mov	r5,zero
   862c0:	a4c5883a 	add	r2,r20,r19
   862c4:	1083ffcc 	andi	r2,r2,4095
   862c8:	00c40004 	movi	r3,4096
   862cc:	1887c83a 	sub	r3,r3,r2
   862d0:	28e7883a 	add	r19,r5,r3
   862d4:	9009883a 	mov	r4,r18
   862d8:	980b883a 	mov	r5,r19
   862dc:	00881780 	call	88178 <_sbrk_r>
   862e0:	1007883a 	mov	r3,r2
   862e4:	00bfffc4 	movi	r2,-1
   862e8:	18807a26 	beq	r3,r2,864d4 <_malloc_r+0x674>
   862ec:	1d05c83a 	sub	r2,r3,r20
   862f0:	9885883a 	add	r2,r19,r2
   862f4:	10c00054 	ori	r3,r2,1
   862f8:	b8800017 	ldw	r2,0(r23)
   862fc:	a021883a 	mov	r16,r20
   86300:	a0c00115 	stw	r3,4(r20)
   86304:	9885883a 	add	r2,r19,r2
   86308:	b8800015 	stw	r2,0(r23)
   8630c:	e5000215 	stw	r20,8(fp)
   86310:	b7003626 	beq	r22,fp,863ec <_malloc_r+0x58c>
   86314:	018003c4 	movi	r6,15
   86318:	35404b36 	bltu	r6,r21,86448 <_malloc_r+0x5e8>
   8631c:	00800044 	movi	r2,1
   86320:	a0800115 	stw	r2,4(r20)
   86324:	003fcd06 	br	8625c <_malloc_r+0x3fc>
   86328:	2808d27a 	srli	r4,r5,9
   8632c:	2000371e 	bne	r4,zero,8640c <_malloc_r+0x5ac>
   86330:	2808d0fa 	srli	r4,r5,3
   86334:	200690fa 	slli	r3,r4,3
   86338:	1ad1883a 	add	r8,r3,r11
   8633c:	41800217 	ldw	r6,8(r8)
   86340:	41805b26 	beq	r8,r6,864b0 <_malloc_r+0x650>
   86344:	30800117 	ldw	r2,4(r6)
   86348:	00ffff04 	movi	r3,-4
   8634c:	10c4703a 	and	r2,r2,r3
   86350:	2880022e 	bgeu	r5,r2,8635c <_malloc_r+0x4fc>
   86354:	31800217 	ldw	r6,8(r6)
   86358:	41bffa1e 	bne	r8,r6,86344 <_malloc_r+0x4e4>
   8635c:	32000317 	ldw	r8,12(r6)
   86360:	39c00117 	ldw	r7,4(r7)
   86364:	82000315 	stw	r8,12(r16)
   86368:	81800215 	stw	r6,8(r16)
   8636c:	07000274 	movhi	fp,9
   86370:	e738fb04 	addi	fp,fp,-7188
   86374:	34000315 	stw	r16,12(r6)
   86378:	44000215 	stw	r16,8(r8)
   8637c:	003f3e06 	br	86078 <_malloc_r+0x218>
   86380:	63000044 	addi	r12,r12,1
   86384:	608000cc 	andi	r2,r12,3
   86388:	10005d26 	beq	r2,zero,86500 <_malloc_r+0x6a0>
   8638c:	18c00204 	addi	r3,r3,8
   86390:	003f5106 	br	860d8 <_malloc_r+0x278>
   86394:	8089883a 	add	r4,r16,r2
   86398:	003f6d06 	br	86150 <_malloc_r+0x2f0>
   8639c:	00805504 	movi	r2,340
   863a0:	10c02036 	bltu	r2,r3,86424 <_malloc_r+0x5c4>
   863a4:	8804d3fa 	srli	r2,r17,15
   863a8:	11801dc4 	addi	r6,r2,119
   863ac:	300490fa 	slli	r2,r6,3
   863b0:	003ed806 	br	85f14 <_malloc_r+0xb4>
   863b4:	48c000c4 	addi	r3,r9,3
   863b8:	003f3106 	br	86080 <_malloc_r+0x220>
   863bc:	05c00274 	movhi	r23,9
   863c0:	bdc53404 	addi	r23,r23,5328
   863c4:	b8800017 	ldw	r2,0(r23)
   863c8:	988d883a 	add	r6,r19,r2
   863cc:	b9800015 	stw	r6,0(r23)
   863d0:	293fb21e 	bne	r5,r4,8629c <_malloc_r+0x43c>
   863d4:	2083ffcc 	andi	r2,r4,4095
   863d8:	103fb01e 	bne	r2,zero,8629c <_malloc_r+0x43c>
   863dc:	e4000217 	ldw	r16,8(fp)
   863e0:	9d45883a 	add	r2,r19,r21
   863e4:	10800054 	ori	r2,r2,1
   863e8:	80800115 	stw	r2,4(r16)
   863ec:	b8c00017 	ldw	r3,0(r23)
   863f0:	d0a6ac17 	ldw	r2,-25936(gp)
   863f4:	10c0012e 	bgeu	r2,r3,863fc <_malloc_r+0x59c>
   863f8:	d0e6ac15 	stw	r3,-25936(gp)
   863fc:	d0a6ad17 	ldw	r2,-25932(gp)
   86400:	10ff962e 	bgeu	r2,r3,8625c <_malloc_r+0x3fc>
   86404:	d0e6ad15 	stw	r3,-25932(gp)
   86408:	003f9406 	br	8625c <_malloc_r+0x3fc>
   8640c:	00800104 	movi	r2,4
   86410:	11001e36 	bltu	r2,r4,8648c <_malloc_r+0x62c>
   86414:	2804d1ba 	srli	r2,r5,6
   86418:	11000e04 	addi	r4,r2,56
   8641c:	200690fa 	slli	r3,r4,3
   86420:	003fc506 	br	86338 <_malloc_r+0x4d8>
   86424:	00815504 	movi	r2,1364
   86428:	10c01d2e 	bgeu	r2,r3,864a0 <_malloc_r+0x640>
   8642c:	01801f84 	movi	r6,126
   86430:	0080fc04 	movi	r2,1008
   86434:	003eb706 	br	85f14 <_malloc_r+0xb4>
   86438:	00800204 	movi	r2,8
   8643c:	10cbc83a 	sub	r5,r2,r3
   86440:	2169883a 	add	r20,r4,r5
   86444:	003f9e06 	br	862c0 <_malloc_r+0x460>
   86448:	00bffe04 	movi	r2,-8
   8644c:	a93ffd04 	addi	r4,r21,-12
   86450:	2088703a 	and	r4,r4,r2
   86454:	b10b883a 	add	r5,r22,r4
   86458:	00c00144 	movi	r3,5
   8645c:	28c00215 	stw	r3,8(r5)
   86460:	28c00115 	stw	r3,4(r5)
   86464:	b0800117 	ldw	r2,4(r22)
   86468:	1080004c 	andi	r2,r2,1
   8646c:	2084b03a 	or	r2,r4,r2
   86470:	b0800115 	stw	r2,4(r22)
   86474:	313fdd2e 	bgeu	r6,r4,863ec <_malloc_r+0x58c>
   86478:	b1400204 	addi	r5,r22,8
   8647c:	9009883a 	mov	r4,r18
   86480:	00852d80 	call	852d8 <_free_r>
   86484:	e4000217 	ldw	r16,8(fp)
   86488:	003fd806 	br	863ec <_malloc_r+0x58c>
   8648c:	00800504 	movi	r2,20
   86490:	11001536 	bltu	r2,r4,864e8 <_malloc_r+0x688>
   86494:	210016c4 	addi	r4,r4,91
   86498:	200690fa 	slli	r3,r4,3
   8649c:	003fa606 	br	86338 <_malloc_r+0x4d8>
   864a0:	8804d4ba 	srli	r2,r17,18
   864a4:	11801f04 	addi	r6,r2,124
   864a8:	300490fa 	slli	r2,r6,3
   864ac:	003e9906 	br	85f14 <_malloc_r+0xb4>
   864b0:	2009d0ba 	srai	r4,r4,2
   864b4:	01400274 	movhi	r5,9
   864b8:	2978fb04 	addi	r5,r5,-7188
   864bc:	00c00044 	movi	r3,1
   864c0:	28800117 	ldw	r2,4(r5)
   864c4:	1906983a 	sll	r3,r3,r4
   864c8:	10c4b03a 	or	r2,r2,r3
   864cc:	28800115 	stw	r2,4(r5)
   864d0:	003fa306 	br	86360 <_malloc_r+0x500>
   864d4:	0027883a 	mov	r19,zero
   864d8:	00c00044 	movi	r3,1
   864dc:	003f8606 	br	862f8 <_malloc_r+0x498>
   864e0:	d1200515 	stw	r4,-32748(gp)
   864e4:	003f7306 	br	862b4 <_malloc_r+0x454>
   864e8:	00801504 	movi	r2,84
   864ec:	11001936 	bltu	r2,r4,86554 <_malloc_r+0x6f4>
   864f0:	2804d33a 	srli	r2,r5,12
   864f4:	11001b84 	addi	r4,r2,110
   864f8:	200690fa 	slli	r3,r4,3
   864fc:	003f8e06 	br	86338 <_malloc_r+0x4d8>
   86500:	480b883a 	mov	r5,r9
   86504:	6807883a 	mov	r3,r13
   86508:	288000cc 	andi	r2,r5,3
   8650c:	18fffe04 	addi	r3,r3,-8
   86510:	297fffc4 	addi	r5,r5,-1
   86514:	10001526 	beq	r2,zero,8656c <_malloc_r+0x70c>
   86518:	18800217 	ldw	r2,8(r3)
   8651c:	10fffa26 	beq	r2,r3,86508 <_malloc_r+0x6a8>
   86520:	2109883a 	add	r4,r4,r4
   86524:	393f1e36 	bltu	r7,r4,861a0 <_malloc_r+0x340>
   86528:	203f1d26 	beq	r4,zero,861a0 <_malloc_r+0x340>
   8652c:	21c4703a 	and	r2,r4,r7
   86530:	10000226 	beq	r2,zero,8653c <_malloc_r+0x6dc>
   86534:	6013883a 	mov	r9,r12
   86538:	003ee106 	br	860c0 <_malloc_r+0x260>
   8653c:	2109883a 	add	r4,r4,r4
   86540:	3904703a 	and	r2,r7,r4
   86544:	63000104 	addi	r12,r12,4
   86548:	103ffc26 	beq	r2,zero,8653c <_malloc_r+0x6dc>
   8654c:	6013883a 	mov	r9,r12
   86550:	003edb06 	br	860c0 <_malloc_r+0x260>
   86554:	00805504 	movi	r2,340
   86558:	11000836 	bltu	r2,r4,8657c <_malloc_r+0x71c>
   8655c:	2804d3fa 	srli	r2,r5,15
   86560:	11001dc4 	addi	r4,r2,119
   86564:	200690fa 	slli	r3,r4,3
   86568:	003f7306 	br	86338 <_malloc_r+0x4d8>
   8656c:	0104303a 	nor	r2,zero,r4
   86570:	388e703a 	and	r7,r7,r2
   86574:	e1c00115 	stw	r7,4(fp)
   86578:	003fe906 	br	86520 <_malloc_r+0x6c0>
   8657c:	00815504 	movi	r2,1364
   86580:	1100032e 	bgeu	r2,r4,86590 <_malloc_r+0x730>
   86584:	01001f84 	movi	r4,126
   86588:	00c0fc04 	movi	r3,1008
   8658c:	003f6a06 	br	86338 <_malloc_r+0x4d8>
   86590:	2804d4ba 	srli	r2,r5,18
   86594:	11001f04 	addi	r4,r2,124
   86598:	200690fa 	slli	r3,r4,3
   8659c:	003f6606 	br	86338 <_malloc_r+0x4d8>

000865a0 <memchr>:
   865a0:	008000c4 	movi	r2,3
   865a4:	29403fcc 	andi	r5,r5,255
   865a8:	2007883a 	mov	r3,r4
   865ac:	1180022e 	bgeu	r2,r6,865b8 <memchr+0x18>
   865b0:	2084703a 	and	r2,r4,r2
   865b4:	10000b26 	beq	r2,zero,865e4 <memchr+0x44>
   865b8:	313fffc4 	addi	r4,r6,-1
   865bc:	3000051e 	bne	r6,zero,865d4 <memchr+0x34>
   865c0:	00002c06 	br	86674 <memchr+0xd4>
   865c4:	213fffc4 	addi	r4,r4,-1
   865c8:	00bfffc4 	movi	r2,-1
   865cc:	18c00044 	addi	r3,r3,1
   865d0:	20802826 	beq	r4,r2,86674 <memchr+0xd4>
   865d4:	18800003 	ldbu	r2,0(r3)
   865d8:	28bffa1e 	bne	r5,r2,865c4 <memchr+0x24>
   865dc:	1805883a 	mov	r2,r3
   865e0:	f800283a 	ret
   865e4:	0011883a 	mov	r8,zero
   865e8:	0007883a 	mov	r3,zero
   865ec:	01c00104 	movi	r7,4
   865f0:	4004923a 	slli	r2,r8,8
   865f4:	18c00044 	addi	r3,r3,1
   865f8:	1151883a 	add	r8,r2,r5
   865fc:	19fffc1e 	bne	r3,r7,865f0 <memchr+0x50>
   86600:	02bfbff4 	movhi	r10,65279
   86604:	52bfbfc4 	addi	r10,r10,-257
   86608:	02602074 	movhi	r9,32897
   8660c:	4a602004 	addi	r9,r9,-32640
   86610:	02c000c4 	movi	r11,3
   86614:	20800017 	ldw	r2,0(r4)
   86618:	31bfff04 	addi	r6,r6,-4
   8661c:	200f883a 	mov	r7,r4
   86620:	1204f03a 	xor	r2,r2,r8
   86624:	1287883a 	add	r3,r2,r10
   86628:	1a46703a 	and	r3,r3,r9
   8662c:	0084303a 	nor	r2,zero,r2
   86630:	10c4703a 	and	r2,r2,r3
   86634:	10000b26 	beq	r2,zero,86664 <memchr+0xc4>
   86638:	20800003 	ldbu	r2,0(r4)
   8663c:	28800f26 	beq	r5,r2,8667c <memchr+0xdc>
   86640:	20800043 	ldbu	r2,1(r4)
   86644:	21c00044 	addi	r7,r4,1
   86648:	28800c26 	beq	r5,r2,8667c <memchr+0xdc>
   8664c:	20800083 	ldbu	r2,2(r4)
   86650:	21c00084 	addi	r7,r4,2
   86654:	28800926 	beq	r5,r2,8667c <memchr+0xdc>
   86658:	208000c3 	ldbu	r2,3(r4)
   8665c:	21c000c4 	addi	r7,r4,3
   86660:	28800626 	beq	r5,r2,8667c <memchr+0xdc>
   86664:	21000104 	addi	r4,r4,4
   86668:	59bfea36 	bltu	r11,r6,86614 <memchr+0x74>
   8666c:	2007883a 	mov	r3,r4
   86670:	003fd106 	br	865b8 <memchr+0x18>
   86674:	0005883a 	mov	r2,zero
   86678:	f800283a 	ret
   8667c:	3805883a 	mov	r2,r7
   86680:	f800283a 	ret

00086684 <memcpy>:
   86684:	01c003c4 	movi	r7,15
   86688:	2007883a 	mov	r3,r4
   8668c:	3980032e 	bgeu	r7,r6,8669c <memcpy+0x18>
   86690:	2904b03a 	or	r2,r5,r4
   86694:	108000cc 	andi	r2,r2,3
   86698:	10000926 	beq	r2,zero,866c0 <memcpy+0x3c>
   8669c:	30000626 	beq	r6,zero,866b8 <memcpy+0x34>
   866a0:	30cd883a 	add	r6,r6,r3
   866a4:	28800003 	ldbu	r2,0(r5)
   866a8:	29400044 	addi	r5,r5,1
   866ac:	18800005 	stb	r2,0(r3)
   866b0:	18c00044 	addi	r3,r3,1
   866b4:	30fffb1e 	bne	r6,r3,866a4 <memcpy+0x20>
   866b8:	2005883a 	mov	r2,r4
   866bc:	f800283a 	ret
   866c0:	3811883a 	mov	r8,r7
   866c4:	200f883a 	mov	r7,r4
   866c8:	28c00017 	ldw	r3,0(r5)
   866cc:	31bffc04 	addi	r6,r6,-16
   866d0:	38c00015 	stw	r3,0(r7)
   866d4:	28800117 	ldw	r2,4(r5)
   866d8:	38800115 	stw	r2,4(r7)
   866dc:	28c00217 	ldw	r3,8(r5)
   866e0:	38c00215 	stw	r3,8(r7)
   866e4:	28800317 	ldw	r2,12(r5)
   866e8:	29400404 	addi	r5,r5,16
   866ec:	38800315 	stw	r2,12(r7)
   866f0:	39c00404 	addi	r7,r7,16
   866f4:	41bff436 	bltu	r8,r6,866c8 <memcpy+0x44>
   866f8:	008000c4 	movi	r2,3
   866fc:	1180072e 	bgeu	r2,r6,8671c <memcpy+0x98>
   86700:	1007883a 	mov	r3,r2
   86704:	28800017 	ldw	r2,0(r5)
   86708:	31bfff04 	addi	r6,r6,-4
   8670c:	29400104 	addi	r5,r5,4
   86710:	38800015 	stw	r2,0(r7)
   86714:	39c00104 	addi	r7,r7,4
   86718:	19bffa36 	bltu	r3,r6,86704 <memcpy+0x80>
   8671c:	3807883a 	mov	r3,r7
   86720:	003fde06 	br	8669c <memcpy+0x18>

00086724 <memmove>:
   86724:	2807883a 	mov	r3,r5
   86728:	2011883a 	mov	r8,r4
   8672c:	29000c2e 	bgeu	r5,r4,86760 <memmove+0x3c>
   86730:	298f883a 	add	r7,r5,r6
   86734:	21c00a2e 	bgeu	r4,r7,86760 <memmove+0x3c>
   86738:	30000726 	beq	r6,zero,86758 <memmove+0x34>
   8673c:	2187883a 	add	r3,r4,r6
   86740:	198dc83a 	sub	r6,r3,r6
   86744:	39ffffc4 	addi	r7,r7,-1
   86748:	38800003 	ldbu	r2,0(r7)
   8674c:	18ffffc4 	addi	r3,r3,-1
   86750:	18800005 	stb	r2,0(r3)
   86754:	19bffb1e 	bne	r3,r6,86744 <memmove+0x20>
   86758:	2005883a 	mov	r2,r4
   8675c:	f800283a 	ret
   86760:	01c003c4 	movi	r7,15
   86764:	39800a36 	bltu	r7,r6,86790 <memmove+0x6c>
   86768:	303ffb26 	beq	r6,zero,86758 <memmove+0x34>
   8676c:	400f883a 	mov	r7,r8
   86770:	320d883a 	add	r6,r6,r8
   86774:	28800003 	ldbu	r2,0(r5)
   86778:	29400044 	addi	r5,r5,1
   8677c:	38800005 	stb	r2,0(r7)
   86780:	39c00044 	addi	r7,r7,1
   86784:	39bffb1e 	bne	r7,r6,86774 <memmove+0x50>
   86788:	2005883a 	mov	r2,r4
   8678c:	f800283a 	ret
   86790:	1904b03a 	or	r2,r3,r4
   86794:	108000cc 	andi	r2,r2,3
   86798:	103ff31e 	bne	r2,zero,86768 <memmove+0x44>
   8679c:	3811883a 	mov	r8,r7
   867a0:	180b883a 	mov	r5,r3
   867a4:	200f883a 	mov	r7,r4
   867a8:	28c00017 	ldw	r3,0(r5)
   867ac:	31bffc04 	addi	r6,r6,-16
   867b0:	38c00015 	stw	r3,0(r7)
   867b4:	28800117 	ldw	r2,4(r5)
   867b8:	38800115 	stw	r2,4(r7)
   867bc:	28c00217 	ldw	r3,8(r5)
   867c0:	38c00215 	stw	r3,8(r7)
   867c4:	28800317 	ldw	r2,12(r5)
   867c8:	29400404 	addi	r5,r5,16
   867cc:	38800315 	stw	r2,12(r7)
   867d0:	39c00404 	addi	r7,r7,16
   867d4:	41bff436 	bltu	r8,r6,867a8 <memmove+0x84>
   867d8:	008000c4 	movi	r2,3
   867dc:	1180072e 	bgeu	r2,r6,867fc <memmove+0xd8>
   867e0:	1007883a 	mov	r3,r2
   867e4:	28800017 	ldw	r2,0(r5)
   867e8:	31bfff04 	addi	r6,r6,-4
   867ec:	29400104 	addi	r5,r5,4
   867f0:	38800015 	stw	r2,0(r7)
   867f4:	39c00104 	addi	r7,r7,4
   867f8:	19bffa36 	bltu	r3,r6,867e4 <memmove+0xc0>
   867fc:	3811883a 	mov	r8,r7
   86800:	003fd906 	br	86768 <memmove+0x44>

00086804 <memset>:
   86804:	008000c4 	movi	r2,3
   86808:	29403fcc 	andi	r5,r5,255
   8680c:	2007883a 	mov	r3,r4
   86810:	1180022e 	bgeu	r2,r6,8681c <memset+0x18>
   86814:	2084703a 	and	r2,r4,r2
   86818:	10000826 	beq	r2,zero,8683c <memset+0x38>
   8681c:	30000526 	beq	r6,zero,86834 <memset+0x30>
   86820:	2805883a 	mov	r2,r5
   86824:	30cd883a 	add	r6,r6,r3
   86828:	18800005 	stb	r2,0(r3)
   8682c:	18c00044 	addi	r3,r3,1
   86830:	19bffd1e 	bne	r3,r6,86828 <memset+0x24>
   86834:	2005883a 	mov	r2,r4
   86838:	f800283a 	ret
   8683c:	2804923a 	slli	r2,r5,8
   86840:	020003c4 	movi	r8,15
   86844:	200f883a 	mov	r7,r4
   86848:	2884b03a 	or	r2,r5,r2
   8684c:	1006943a 	slli	r3,r2,16
   86850:	10c6b03a 	or	r3,r2,r3
   86854:	41800a2e 	bgeu	r8,r6,86880 <memset+0x7c>
   86858:	4005883a 	mov	r2,r8
   8685c:	31bffc04 	addi	r6,r6,-16
   86860:	38c00015 	stw	r3,0(r7)
   86864:	38c00115 	stw	r3,4(r7)
   86868:	38c00215 	stw	r3,8(r7)
   8686c:	38c00315 	stw	r3,12(r7)
   86870:	39c00404 	addi	r7,r7,16
   86874:	11bff936 	bltu	r2,r6,8685c <memset+0x58>
   86878:	008000c4 	movi	r2,3
   8687c:	1180052e 	bgeu	r2,r6,86894 <memset+0x90>
   86880:	31bfff04 	addi	r6,r6,-4
   86884:	008000c4 	movi	r2,3
   86888:	38c00015 	stw	r3,0(r7)
   8688c:	39c00104 	addi	r7,r7,4
   86890:	11bffb36 	bltu	r2,r6,86880 <memset+0x7c>
   86894:	3807883a 	mov	r3,r7
   86898:	003fe006 	br	8681c <memset+0x18>

0008689c <_Bfree>:
   8689c:	28000826 	beq	r5,zero,868c0 <_Bfree+0x24>
   868a0:	28800117 	ldw	r2,4(r5)
   868a4:	21001317 	ldw	r4,76(r4)
   868a8:	1085883a 	add	r2,r2,r2
   868ac:	1085883a 	add	r2,r2,r2
   868b0:	1105883a 	add	r2,r2,r4
   868b4:	10c00017 	ldw	r3,0(r2)
   868b8:	28c00015 	stw	r3,0(r5)
   868bc:	11400015 	stw	r5,0(r2)
   868c0:	f800283a 	ret

000868c4 <__hi0bits>:
   868c4:	20bfffec 	andhi	r2,r4,65535
   868c8:	10001426 	beq	r2,zero,8691c <__hi0bits+0x58>
   868cc:	0007883a 	mov	r3,zero
   868d0:	20bfc02c 	andhi	r2,r4,65280
   868d4:	1000021e 	bne	r2,zero,868e0 <__hi0bits+0x1c>
   868d8:	2008923a 	slli	r4,r4,8
   868dc:	18c00204 	addi	r3,r3,8
   868e0:	20bc002c 	andhi	r2,r4,61440
   868e4:	1000021e 	bne	r2,zero,868f0 <__hi0bits+0x2c>
   868e8:	2008913a 	slli	r4,r4,4
   868ec:	18c00104 	addi	r3,r3,4
   868f0:	20b0002c 	andhi	r2,r4,49152
   868f4:	1000031e 	bne	r2,zero,86904 <__hi0bits+0x40>
   868f8:	2105883a 	add	r2,r4,r4
   868fc:	18c00084 	addi	r3,r3,2
   86900:	1089883a 	add	r4,r2,r2
   86904:	20000316 	blt	r4,zero,86914 <__hi0bits+0x50>
   86908:	2090002c 	andhi	r2,r4,16384
   8690c:	10000626 	beq	r2,zero,86928 <__hi0bits+0x64>
   86910:	18c00044 	addi	r3,r3,1
   86914:	1805883a 	mov	r2,r3
   86918:	f800283a 	ret
   8691c:	2008943a 	slli	r4,r4,16
   86920:	00c00404 	movi	r3,16
   86924:	003fea06 	br	868d0 <__hi0bits+0xc>
   86928:	00c00804 	movi	r3,32
   8692c:	1805883a 	mov	r2,r3
   86930:	f800283a 	ret

00086934 <__lo0bits>:
   86934:	20c00017 	ldw	r3,0(r4)
   86938:	188001cc 	andi	r2,r3,7
   8693c:	10000a26 	beq	r2,zero,86968 <__lo0bits+0x34>
   86940:	1880004c 	andi	r2,r3,1
   86944:	1005003a 	cmpeq	r2,r2,zero
   86948:	10002126 	beq	r2,zero,869d0 <__lo0bits+0x9c>
   8694c:	1880008c 	andi	r2,r3,2
   86950:	1000251e 	bne	r2,zero,869e8 <__lo0bits+0xb4>
   86954:	1804d0ba 	srli	r2,r3,2
   86958:	01400084 	movi	r5,2
   8695c:	20800015 	stw	r2,0(r4)
   86960:	2805883a 	mov	r2,r5
   86964:	f800283a 	ret
   86968:	18bfffcc 	andi	r2,r3,65535
   8696c:	10001526 	beq	r2,zero,869c4 <__lo0bits+0x90>
   86970:	000b883a 	mov	r5,zero
   86974:	18803fcc 	andi	r2,r3,255
   86978:	1000021e 	bne	r2,zero,86984 <__lo0bits+0x50>
   8697c:	1806d23a 	srli	r3,r3,8
   86980:	29400204 	addi	r5,r5,8
   86984:	188003cc 	andi	r2,r3,15
   86988:	1000021e 	bne	r2,zero,86994 <__lo0bits+0x60>
   8698c:	1806d13a 	srli	r3,r3,4
   86990:	29400104 	addi	r5,r5,4
   86994:	188000cc 	andi	r2,r3,3
   86998:	1000021e 	bne	r2,zero,869a4 <__lo0bits+0x70>
   8699c:	1806d0ba 	srli	r3,r3,2
   869a0:	29400084 	addi	r5,r5,2
   869a4:	1880004c 	andi	r2,r3,1
   869a8:	1000031e 	bne	r2,zero,869b8 <__lo0bits+0x84>
   869ac:	1806d07a 	srli	r3,r3,1
   869b0:	18000a26 	beq	r3,zero,869dc <__lo0bits+0xa8>
   869b4:	29400044 	addi	r5,r5,1
   869b8:	2805883a 	mov	r2,r5
   869bc:	20c00015 	stw	r3,0(r4)
   869c0:	f800283a 	ret
   869c4:	1806d43a 	srli	r3,r3,16
   869c8:	01400404 	movi	r5,16
   869cc:	003fe906 	br	86974 <__lo0bits+0x40>
   869d0:	000b883a 	mov	r5,zero
   869d4:	2805883a 	mov	r2,r5
   869d8:	f800283a 	ret
   869dc:	01400804 	movi	r5,32
   869e0:	2805883a 	mov	r2,r5
   869e4:	f800283a 	ret
   869e8:	1804d07a 	srli	r2,r3,1
   869ec:	01400044 	movi	r5,1
   869f0:	20800015 	stw	r2,0(r4)
   869f4:	003fda06 	br	86960 <__lo0bits+0x2c>

000869f8 <__mcmp>:
   869f8:	20800417 	ldw	r2,16(r4)
   869fc:	28c00417 	ldw	r3,16(r5)
   86a00:	10cfc83a 	sub	r7,r2,r3
   86a04:	38000c1e 	bne	r7,zero,86a38 <__mcmp+0x40>
   86a08:	18c5883a 	add	r2,r3,r3
   86a0c:	1085883a 	add	r2,r2,r2
   86a10:	10c00504 	addi	r3,r2,20
   86a14:	21000504 	addi	r4,r4,20
   86a18:	28cb883a 	add	r5,r5,r3
   86a1c:	2085883a 	add	r2,r4,r2
   86a20:	10bfff04 	addi	r2,r2,-4
   86a24:	297fff04 	addi	r5,r5,-4
   86a28:	11800017 	ldw	r6,0(r2)
   86a2c:	28c00017 	ldw	r3,0(r5)
   86a30:	30c0031e 	bne	r6,r3,86a40 <__mcmp+0x48>
   86a34:	20bffa36 	bltu	r4,r2,86a20 <__mcmp+0x28>
   86a38:	3805883a 	mov	r2,r7
   86a3c:	f800283a 	ret
   86a40:	30c00336 	bltu	r6,r3,86a50 <__mcmp+0x58>
   86a44:	01c00044 	movi	r7,1
   86a48:	3805883a 	mov	r2,r7
   86a4c:	f800283a 	ret
   86a50:	01ffffc4 	movi	r7,-1
   86a54:	003ff806 	br	86a38 <__mcmp+0x40>

00086a58 <__ulp>:
   86a58:	295ffc2c 	andhi	r5,r5,32752
   86a5c:	013f3034 	movhi	r4,64704
   86a60:	290b883a 	add	r5,r5,r4
   86a64:	0145c83a 	sub	r2,zero,r5
   86a68:	1007d53a 	srai	r3,r2,20
   86a6c:	000d883a 	mov	r6,zero
   86a70:	0140040e 	bge	zero,r5,86a84 <__ulp+0x2c>
   86a74:	280f883a 	mov	r7,r5
   86a78:	3807883a 	mov	r3,r7
   86a7c:	3005883a 	mov	r2,r6
   86a80:	f800283a 	ret
   86a84:	008004c4 	movi	r2,19
   86a88:	193ffb04 	addi	r4,r3,-20
   86a8c:	10c00c0e 	bge	r2,r3,86ac0 <__ulp+0x68>
   86a90:	008007c4 	movi	r2,31
   86a94:	1107c83a 	sub	r3,r2,r4
   86a98:	00800784 	movi	r2,30
   86a9c:	01400044 	movi	r5,1
   86aa0:	11000216 	blt	r2,r4,86aac <__ulp+0x54>
   86aa4:	00800044 	movi	r2,1
   86aa8:	10ca983a 	sll	r5,r2,r3
   86aac:	000f883a 	mov	r7,zero
   86ab0:	280d883a 	mov	r6,r5
   86ab4:	3807883a 	mov	r3,r7
   86ab8:	3005883a 	mov	r2,r6
   86abc:	f800283a 	ret
   86ac0:	00800234 	movhi	r2,8
   86ac4:	10cfd83a 	sra	r7,r2,r3
   86ac8:	000d883a 	mov	r6,zero
   86acc:	3005883a 	mov	r2,r6
   86ad0:	3807883a 	mov	r3,r7
   86ad4:	f800283a 	ret

00086ad8 <__b2d>:
   86ad8:	20800417 	ldw	r2,16(r4)
   86adc:	defff904 	addi	sp,sp,-28
   86ae0:	dd000415 	stw	r20,16(sp)
   86ae4:	1085883a 	add	r2,r2,r2
   86ae8:	25000504 	addi	r20,r4,20
   86aec:	1085883a 	add	r2,r2,r2
   86af0:	dc000015 	stw	r16,0(sp)
   86af4:	a0a1883a 	add	r16,r20,r2
   86af8:	dd400515 	stw	r21,20(sp)
   86afc:	857fff17 	ldw	r21,-4(r16)
   86b00:	dc400115 	stw	r17,4(sp)
   86b04:	dfc00615 	stw	ra,24(sp)
   86b08:	a809883a 	mov	r4,r21
   86b0c:	2823883a 	mov	r17,r5
   86b10:	dcc00315 	stw	r19,12(sp)
   86b14:	dc800215 	stw	r18,8(sp)
   86b18:	00868c40 	call	868c4 <__hi0bits>
   86b1c:	100b883a 	mov	r5,r2
   86b20:	00800804 	movi	r2,32
   86b24:	1145c83a 	sub	r2,r2,r5
   86b28:	88800015 	stw	r2,0(r17)
   86b2c:	00800284 	movi	r2,10
   86b30:	80ffff04 	addi	r3,r16,-4
   86b34:	11401416 	blt	r2,r5,86b88 <__b2d+0xb0>
   86b38:	008002c4 	movi	r2,11
   86b3c:	1149c83a 	sub	r4,r2,r5
   86b40:	a0c02736 	bltu	r20,r3,86be0 <__b2d+0x108>
   86b44:	000d883a 	mov	r6,zero
   86b48:	28800544 	addi	r2,r5,21
   86b4c:	a906d83a 	srl	r3,r21,r4
   86b50:	a884983a 	sll	r2,r21,r2
   86b54:	1ccffc34 	orhi	r19,r3,16368
   86b58:	11a4b03a 	or	r18,r2,r6
   86b5c:	9005883a 	mov	r2,r18
   86b60:	9807883a 	mov	r3,r19
   86b64:	dfc00617 	ldw	ra,24(sp)
   86b68:	dd400517 	ldw	r21,20(sp)
   86b6c:	dd000417 	ldw	r20,16(sp)
   86b70:	dcc00317 	ldw	r19,12(sp)
   86b74:	dc800217 	ldw	r18,8(sp)
   86b78:	dc400117 	ldw	r17,4(sp)
   86b7c:	dc000017 	ldw	r16,0(sp)
   86b80:	dec00704 	addi	sp,sp,28
   86b84:	f800283a 	ret
   86b88:	a0c00e36 	bltu	r20,r3,86bc4 <__b2d+0xec>
   86b8c:	293ffd44 	addi	r4,r5,-11
   86b90:	000d883a 	mov	r6,zero
   86b94:	20000f26 	beq	r4,zero,86bd4 <__b2d+0xfc>
   86b98:	00800804 	movi	r2,32
   86b9c:	110bc83a 	sub	r5,r2,r4
   86ba0:	a0c01236 	bltu	r20,r3,86bec <__b2d+0x114>
   86ba4:	000f883a 	mov	r7,zero
   86ba8:	a904983a 	sll	r2,r21,r4
   86bac:	3146d83a 	srl	r3,r6,r5
   86bb0:	3108983a 	sll	r4,r6,r4
   86bb4:	108ffc34 	orhi	r2,r2,16368
   86bb8:	18a6b03a 	or	r19,r3,r2
   86bbc:	3924b03a 	or	r18,r7,r4
   86bc0:	003fe606 	br	86b5c <__b2d+0x84>
   86bc4:	293ffd44 	addi	r4,r5,-11
   86bc8:	81bffe17 	ldw	r6,-8(r16)
   86bcc:	80fffe04 	addi	r3,r16,-8
   86bd0:	203ff11e 	bne	r4,zero,86b98 <__b2d+0xc0>
   86bd4:	accffc34 	orhi	r19,r21,16368
   86bd8:	3025883a 	mov	r18,r6
   86bdc:	003fdf06 	br	86b5c <__b2d+0x84>
   86be0:	18bfff17 	ldw	r2,-4(r3)
   86be4:	110cd83a 	srl	r6,r2,r4
   86be8:	003fd706 	br	86b48 <__b2d+0x70>
   86bec:	18bfff17 	ldw	r2,-4(r3)
   86bf0:	114ed83a 	srl	r7,r2,r5
   86bf4:	003fec06 	br	86ba8 <__b2d+0xd0>

00086bf8 <__ratio>:
   86bf8:	defff904 	addi	sp,sp,-28
   86bfc:	dc400215 	stw	r17,8(sp)
   86c00:	2823883a 	mov	r17,r5
   86c04:	d80b883a 	mov	r5,sp
   86c08:	dfc00615 	stw	ra,24(sp)
   86c0c:	dd000515 	stw	r20,20(sp)
   86c10:	dcc00415 	stw	r19,16(sp)
   86c14:	dc800315 	stw	r18,12(sp)
   86c18:	2025883a 	mov	r18,r4
   86c1c:	0086ad80 	call	86ad8 <__b2d>
   86c20:	8809883a 	mov	r4,r17
   86c24:	d9400104 	addi	r5,sp,4
   86c28:	1027883a 	mov	r19,r2
   86c2c:	1829883a 	mov	r20,r3
   86c30:	0086ad80 	call	86ad8 <__b2d>
   86c34:	89000417 	ldw	r4,16(r17)
   86c38:	91c00417 	ldw	r7,16(r18)
   86c3c:	d9800117 	ldw	r6,4(sp)
   86c40:	180b883a 	mov	r5,r3
   86c44:	390fc83a 	sub	r7,r7,r4
   86c48:	1009883a 	mov	r4,r2
   86c4c:	d8800017 	ldw	r2,0(sp)
   86c50:	380e917a 	slli	r7,r7,5
   86c54:	2011883a 	mov	r8,r4
   86c58:	1185c83a 	sub	r2,r2,r6
   86c5c:	11c5883a 	add	r2,r2,r7
   86c60:	1006953a 	slli	r3,r2,20
   86c64:	2813883a 	mov	r9,r5
   86c68:	00800d0e 	bge	zero,r2,86ca0 <__ratio+0xa8>
   86c6c:	1d29883a 	add	r20,r3,r20
   86c70:	a00b883a 	mov	r5,r20
   86c74:	480f883a 	mov	r7,r9
   86c78:	9809883a 	mov	r4,r19
   86c7c:	400d883a 	mov	r6,r8
   86c80:	0089f780 	call	89f78 <__divdf3>
   86c84:	dfc00617 	ldw	ra,24(sp)
   86c88:	dd000517 	ldw	r20,20(sp)
   86c8c:	dcc00417 	ldw	r19,16(sp)
   86c90:	dc800317 	ldw	r18,12(sp)
   86c94:	dc400217 	ldw	r17,8(sp)
   86c98:	dec00704 	addi	sp,sp,28
   86c9c:	f800283a 	ret
   86ca0:	28d3c83a 	sub	r9,r5,r3
   86ca4:	003ff206 	br	86c70 <__ratio+0x78>

00086ca8 <_mprec_log10>:
   86ca8:	defffe04 	addi	sp,sp,-8
   86cac:	008005c4 	movi	r2,23
   86cb0:	dc000015 	stw	r16,0(sp)
   86cb4:	dfc00115 	stw	ra,4(sp)
   86cb8:	2021883a 	mov	r16,r4
   86cbc:	11000c16 	blt	r2,r4,86cf0 <_mprec_log10+0x48>
   86cc0:	200490fa 	slli	r2,r4,3
   86cc4:	00c00274 	movhi	r3,9
   86cc8:	18f75d04 	addi	r3,r3,-8844
   86ccc:	10c5883a 	add	r2,r2,r3
   86cd0:	12400117 	ldw	r9,4(r2)
   86cd4:	12000017 	ldw	r8,0(r2)
   86cd8:	4807883a 	mov	r3,r9
   86cdc:	4005883a 	mov	r2,r8
   86ce0:	dfc00117 	ldw	ra,4(sp)
   86ce4:	dc000017 	ldw	r16,0(sp)
   86ce8:	dec00204 	addi	sp,sp,8
   86cec:	f800283a 	ret
   86cf0:	0011883a 	mov	r8,zero
   86cf4:	024ffc34 	movhi	r9,16368
   86cf8:	0005883a 	mov	r2,zero
   86cfc:	00d00934 	movhi	r3,16420
   86d00:	480b883a 	mov	r5,r9
   86d04:	4009883a 	mov	r4,r8
   86d08:	180f883a 	mov	r7,r3
   86d0c:	100d883a 	mov	r6,r2
   86d10:	0089bb40 	call	89bb4 <__muldf3>
   86d14:	843fffc4 	addi	r16,r16,-1
   86d18:	1011883a 	mov	r8,r2
   86d1c:	1813883a 	mov	r9,r3
   86d20:	803ff51e 	bne	r16,zero,86cf8 <_mprec_log10+0x50>
   86d24:	4005883a 	mov	r2,r8
   86d28:	4807883a 	mov	r3,r9
   86d2c:	dfc00117 	ldw	ra,4(sp)
   86d30:	dc000017 	ldw	r16,0(sp)
   86d34:	dec00204 	addi	sp,sp,8
   86d38:	f800283a 	ret

00086d3c <__copybits>:
   86d3c:	297fffc4 	addi	r5,r5,-1
   86d40:	30800417 	ldw	r2,16(r6)
   86d44:	280bd17a 	srai	r5,r5,5
   86d48:	31800504 	addi	r6,r6,20
   86d4c:	1085883a 	add	r2,r2,r2
   86d50:	294b883a 	add	r5,r5,r5
   86d54:	294b883a 	add	r5,r5,r5
   86d58:	1085883a 	add	r2,r2,r2
   86d5c:	290b883a 	add	r5,r5,r4
   86d60:	3087883a 	add	r3,r6,r2
   86d64:	29400104 	addi	r5,r5,4
   86d68:	30c0052e 	bgeu	r6,r3,86d80 <__copybits+0x44>
   86d6c:	30800017 	ldw	r2,0(r6)
   86d70:	31800104 	addi	r6,r6,4
   86d74:	20800015 	stw	r2,0(r4)
   86d78:	21000104 	addi	r4,r4,4
   86d7c:	30fffb36 	bltu	r6,r3,86d6c <__copybits+0x30>
   86d80:	2140032e 	bgeu	r4,r5,86d90 <__copybits+0x54>
   86d84:	20000015 	stw	zero,0(r4)
   86d88:	21000104 	addi	r4,r4,4
   86d8c:	217ffd36 	bltu	r4,r5,86d84 <__copybits+0x48>
   86d90:	f800283a 	ret

00086d94 <__any_on>:
   86d94:	20800417 	ldw	r2,16(r4)
   86d98:	2807d17a 	srai	r3,r5,5
   86d9c:	21000504 	addi	r4,r4,20
   86da0:	10c00d0e 	bge	r2,r3,86dd8 <__any_on+0x44>
   86da4:	1085883a 	add	r2,r2,r2
   86da8:	1085883a 	add	r2,r2,r2
   86dac:	208d883a 	add	r6,r4,r2
   86db0:	2180182e 	bgeu	r4,r6,86e14 <__any_on+0x80>
   86db4:	30bfff17 	ldw	r2,-4(r6)
   86db8:	30ffff04 	addi	r3,r6,-4
   86dbc:	1000041e 	bne	r2,zero,86dd0 <__any_on+0x3c>
   86dc0:	20c0142e 	bgeu	r4,r3,86e14 <__any_on+0x80>
   86dc4:	18ffff04 	addi	r3,r3,-4
   86dc8:	18800017 	ldw	r2,0(r3)
   86dcc:	103ffc26 	beq	r2,zero,86dc0 <__any_on+0x2c>
   86dd0:	00800044 	movi	r2,1
   86dd4:	f800283a 	ret
   86dd8:	18800a0e 	bge	r3,r2,86e04 <__any_on+0x70>
   86ddc:	294007cc 	andi	r5,r5,31
   86de0:	28000826 	beq	r5,zero,86e04 <__any_on+0x70>
   86de4:	18c5883a 	add	r2,r3,r3
   86de8:	1085883a 	add	r2,r2,r2
   86dec:	208d883a 	add	r6,r4,r2
   86df0:	30c00017 	ldw	r3,0(r6)
   86df4:	1944d83a 	srl	r2,r3,r5
   86df8:	1144983a 	sll	r2,r2,r5
   86dfc:	18bff41e 	bne	r3,r2,86dd0 <__any_on+0x3c>
   86e00:	003feb06 	br	86db0 <__any_on+0x1c>
   86e04:	18c5883a 	add	r2,r3,r3
   86e08:	1085883a 	add	r2,r2,r2
   86e0c:	208d883a 	add	r6,r4,r2
   86e10:	003fe706 	br	86db0 <__any_on+0x1c>
   86e14:	0005883a 	mov	r2,zero
   86e18:	f800283a 	ret

00086e1c <_Balloc>:
   86e1c:	20c01317 	ldw	r3,76(r4)
   86e20:	defffb04 	addi	sp,sp,-20
   86e24:	dcc00315 	stw	r19,12(sp)
   86e28:	dc800215 	stw	r18,8(sp)
   86e2c:	dfc00415 	stw	ra,16(sp)
   86e30:	2825883a 	mov	r18,r5
   86e34:	dc400115 	stw	r17,4(sp)
   86e38:	dc000015 	stw	r16,0(sp)
   86e3c:	2027883a 	mov	r19,r4
   86e40:	01800404 	movi	r6,16
   86e44:	01400104 	movi	r5,4
   86e48:	18001726 	beq	r3,zero,86ea8 <_Balloc+0x8c>
   86e4c:	01400044 	movi	r5,1
   86e50:	9485883a 	add	r2,r18,r18
   86e54:	2ca2983a 	sll	r17,r5,r18
   86e58:	1085883a 	add	r2,r2,r2
   86e5c:	10c7883a 	add	r3,r2,r3
   86e60:	1c000017 	ldw	r16,0(r3)
   86e64:	8c4d883a 	add	r6,r17,r17
   86e68:	318d883a 	add	r6,r6,r6
   86e6c:	9809883a 	mov	r4,r19
   86e70:	31800504 	addi	r6,r6,20
   86e74:	80001226 	beq	r16,zero,86ec0 <_Balloc+0xa4>
   86e78:	80800017 	ldw	r2,0(r16)
   86e7c:	18800015 	stw	r2,0(r3)
   86e80:	80000415 	stw	zero,16(r16)
   86e84:	80000315 	stw	zero,12(r16)
   86e88:	8005883a 	mov	r2,r16
   86e8c:	dfc00417 	ldw	ra,16(sp)
   86e90:	dcc00317 	ldw	r19,12(sp)
   86e94:	dc800217 	ldw	r18,8(sp)
   86e98:	dc400117 	ldw	r17,4(sp)
   86e9c:	dc000017 	ldw	r16,0(sp)
   86ea0:	dec00504 	addi	sp,sp,20
   86ea4:	f800283a 	ret
   86ea8:	00885b40 	call	885b4 <_calloc_r>
   86eac:	1007883a 	mov	r3,r2
   86eb0:	0021883a 	mov	r16,zero
   86eb4:	98801315 	stw	r2,76(r19)
   86eb8:	103fe41e 	bne	r2,zero,86e4c <_Balloc+0x30>
   86ebc:	003ff206 	br	86e88 <_Balloc+0x6c>
   86ec0:	00885b40 	call	885b4 <_calloc_r>
   86ec4:	103ff026 	beq	r2,zero,86e88 <_Balloc+0x6c>
   86ec8:	1021883a 	mov	r16,r2
   86ecc:	14800115 	stw	r18,4(r2)
   86ed0:	14400215 	stw	r17,8(r2)
   86ed4:	003fea06 	br	86e80 <_Balloc+0x64>

00086ed8 <__d2b>:
   86ed8:	defff504 	addi	sp,sp,-44
   86edc:	dcc00515 	stw	r19,20(sp)
   86ee0:	04c00044 	movi	r19,1
   86ee4:	dc000215 	stw	r16,8(sp)
   86ee8:	2821883a 	mov	r16,r5
   86eec:	980b883a 	mov	r5,r19
   86ef0:	ddc00915 	stw	r23,36(sp)
   86ef4:	dd800815 	stw	r22,32(sp)
   86ef8:	dd400715 	stw	r21,28(sp)
   86efc:	dd000615 	stw	r20,24(sp)
   86f00:	dc800415 	stw	r18,16(sp)
   86f04:	dc400315 	stw	r17,12(sp)
   86f08:	dfc00a15 	stw	ra,40(sp)
   86f0c:	3023883a 	mov	r17,r6
   86f10:	382d883a 	mov	r22,r7
   86f14:	ddc00b17 	ldw	r23,44(sp)
   86f18:	0086e1c0 	call	86e1c <_Balloc>
   86f1c:	1025883a 	mov	r18,r2
   86f20:	00a00034 	movhi	r2,32768
   86f24:	10bfffc4 	addi	r2,r2,-1
   86f28:	8888703a 	and	r4,r17,r2
   86f2c:	202ad53a 	srli	r21,r4,20
   86f30:	00800434 	movhi	r2,16
   86f34:	10bfffc4 	addi	r2,r2,-1
   86f38:	8886703a 	and	r3,r17,r2
   86f3c:	a829003a 	cmpeq	r20,r21,zero
   86f40:	800b883a 	mov	r5,r16
   86f44:	d8c00115 	stw	r3,4(sp)
   86f48:	94000504 	addi	r16,r18,20
   86f4c:	a000021e 	bne	r20,zero,86f58 <__d2b+0x80>
   86f50:	18c00434 	orhi	r3,r3,16
   86f54:	d8c00115 	stw	r3,4(sp)
   86f58:	28002726 	beq	r5,zero,86ff8 <__d2b+0x120>
   86f5c:	d809883a 	mov	r4,sp
   86f60:	d9400015 	stw	r5,0(sp)
   86f64:	00869340 	call	86934 <__lo0bits>
   86f68:	100d883a 	mov	r6,r2
   86f6c:	10003526 	beq	r2,zero,87044 <__d2b+0x16c>
   86f70:	d8c00117 	ldw	r3,4(sp)
   86f74:	00800804 	movi	r2,32
   86f78:	1185c83a 	sub	r2,r2,r6
   86f7c:	d9000017 	ldw	r4,0(sp)
   86f80:	1886983a 	sll	r3,r3,r2
   86f84:	1906b03a 	or	r3,r3,r4
   86f88:	90c00515 	stw	r3,20(r18)
   86f8c:	d8c00117 	ldw	r3,4(sp)
   86f90:	1986d83a 	srl	r3,r3,r6
   86f94:	d8c00115 	stw	r3,4(sp)
   86f98:	180b003a 	cmpeq	r5,r3,zero
   86f9c:	00800084 	movi	r2,2
   86fa0:	114bc83a 	sub	r5,r2,r5
   86fa4:	80c00115 	stw	r3,4(r16)
   86fa8:	91400415 	stw	r5,16(r18)
   86fac:	a0001a1e 	bne	r20,zero,87018 <__d2b+0x140>
   86fb0:	3545883a 	add	r2,r6,r21
   86fb4:	10bef344 	addi	r2,r2,-1075
   86fb8:	00c00d44 	movi	r3,53
   86fbc:	b0800015 	stw	r2,0(r22)
   86fc0:	1987c83a 	sub	r3,r3,r6
   86fc4:	b8c00015 	stw	r3,0(r23)
   86fc8:	9005883a 	mov	r2,r18
   86fcc:	dfc00a17 	ldw	ra,40(sp)
   86fd0:	ddc00917 	ldw	r23,36(sp)
   86fd4:	dd800817 	ldw	r22,32(sp)
   86fd8:	dd400717 	ldw	r21,28(sp)
   86fdc:	dd000617 	ldw	r20,24(sp)
   86fe0:	dcc00517 	ldw	r19,20(sp)
   86fe4:	dc800417 	ldw	r18,16(sp)
   86fe8:	dc400317 	ldw	r17,12(sp)
   86fec:	dc000217 	ldw	r16,8(sp)
   86ff0:	dec00b04 	addi	sp,sp,44
   86ff4:	f800283a 	ret
   86ff8:	d9000104 	addi	r4,sp,4
   86ffc:	00869340 	call	86934 <__lo0bits>
   87000:	11800804 	addi	r6,r2,32
   87004:	d8800117 	ldw	r2,4(sp)
   87008:	94c00415 	stw	r19,16(r18)
   8700c:	980b883a 	mov	r5,r19
   87010:	90800515 	stw	r2,20(r18)
   87014:	a03fe626 	beq	r20,zero,86fb0 <__d2b+0xd8>
   87018:	2945883a 	add	r2,r5,r5
   8701c:	1085883a 	add	r2,r2,r2
   87020:	1405883a 	add	r2,r2,r16
   87024:	113fff17 	ldw	r4,-4(r2)
   87028:	30fef384 	addi	r3,r6,-1074
   8702c:	2820917a 	slli	r16,r5,5
   87030:	b0c00015 	stw	r3,0(r22)
   87034:	00868c40 	call	868c4 <__hi0bits>
   87038:	80a1c83a 	sub	r16,r16,r2
   8703c:	bc000015 	stw	r16,0(r23)
   87040:	003fe106 	br	86fc8 <__d2b+0xf0>
   87044:	d8800017 	ldw	r2,0(sp)
   87048:	90800515 	stw	r2,20(r18)
   8704c:	d8c00117 	ldw	r3,4(sp)
   87050:	003fd106 	br	86f98 <__d2b+0xc0>

00087054 <__mdiff>:
   87054:	defffb04 	addi	sp,sp,-20
   87058:	dc000015 	stw	r16,0(sp)
   8705c:	2821883a 	mov	r16,r5
   87060:	dc800215 	stw	r18,8(sp)
   87064:	300b883a 	mov	r5,r6
   87068:	2025883a 	mov	r18,r4
   8706c:	8009883a 	mov	r4,r16
   87070:	dc400115 	stw	r17,4(sp)
   87074:	dfc00415 	stw	ra,16(sp)
   87078:	dcc00315 	stw	r19,12(sp)
   8707c:	3023883a 	mov	r17,r6
   87080:	00869f80 	call	869f8 <__mcmp>
   87084:	10004226 	beq	r2,zero,87190 <__mdiff+0x13c>
   87088:	10005016 	blt	r2,zero,871cc <__mdiff+0x178>
   8708c:	0027883a 	mov	r19,zero
   87090:	81400117 	ldw	r5,4(r16)
   87094:	9009883a 	mov	r4,r18
   87098:	0086e1c0 	call	86e1c <_Balloc>
   8709c:	1019883a 	mov	r12,r2
   870a0:	82800417 	ldw	r10,16(r16)
   870a4:	88800417 	ldw	r2,16(r17)
   870a8:	81800504 	addi	r6,r16,20
   870ac:	5287883a 	add	r3,r10,r10
   870b0:	1085883a 	add	r2,r2,r2
   870b4:	18c7883a 	add	r3,r3,r3
   870b8:	1085883a 	add	r2,r2,r2
   870bc:	8a000504 	addi	r8,r17,20
   870c0:	64c00315 	stw	r19,12(r12)
   870c4:	30db883a 	add	r13,r6,r3
   870c8:	4097883a 	add	r11,r8,r2
   870cc:	61c00504 	addi	r7,r12,20
   870d0:	0013883a 	mov	r9,zero
   870d4:	31000017 	ldw	r4,0(r6)
   870d8:	41400017 	ldw	r5,0(r8)
   870dc:	42000104 	addi	r8,r8,4
   870e0:	20bfffcc 	andi	r2,r4,65535
   870e4:	28ffffcc 	andi	r3,r5,65535
   870e8:	10c5c83a 	sub	r2,r2,r3
   870ec:	1245883a 	add	r2,r2,r9
   870f0:	2008d43a 	srli	r4,r4,16
   870f4:	280ad43a 	srli	r5,r5,16
   870f8:	1007d43a 	srai	r3,r2,16
   870fc:	3880000d 	sth	r2,0(r7)
   87100:	2149c83a 	sub	r4,r4,r5
   87104:	20c9883a 	add	r4,r4,r3
   87108:	3900008d 	sth	r4,2(r7)
   8710c:	31800104 	addi	r6,r6,4
   87110:	39c00104 	addi	r7,r7,4
   87114:	2013d43a 	srai	r9,r4,16
   87118:	42ffee36 	bltu	r8,r11,870d4 <__mdiff+0x80>
   8711c:	33400c2e 	bgeu	r6,r13,87150 <__mdiff+0xfc>
   87120:	30800017 	ldw	r2,0(r6)
   87124:	31800104 	addi	r6,r6,4
   87128:	10ffffcc 	andi	r3,r2,65535
   8712c:	1a47883a 	add	r3,r3,r9
   87130:	1004d43a 	srli	r2,r2,16
   87134:	1809d43a 	srai	r4,r3,16
   87138:	38c0000d 	sth	r3,0(r7)
   8713c:	1105883a 	add	r2,r2,r4
   87140:	3880008d 	sth	r2,2(r7)
   87144:	1013d43a 	srai	r9,r2,16
   87148:	39c00104 	addi	r7,r7,4
   8714c:	337ff436 	bltu	r6,r13,87120 <__mdiff+0xcc>
   87150:	38bfff17 	ldw	r2,-4(r7)
   87154:	38ffff04 	addi	r3,r7,-4
   87158:	1000041e 	bne	r2,zero,8716c <__mdiff+0x118>
   8715c:	18ffff04 	addi	r3,r3,-4
   87160:	18800017 	ldw	r2,0(r3)
   87164:	52bfffc4 	addi	r10,r10,-1
   87168:	103ffc26 	beq	r2,zero,8715c <__mdiff+0x108>
   8716c:	6005883a 	mov	r2,r12
   87170:	62800415 	stw	r10,16(r12)
   87174:	dfc00417 	ldw	ra,16(sp)
   87178:	dcc00317 	ldw	r19,12(sp)
   8717c:	dc800217 	ldw	r18,8(sp)
   87180:	dc400117 	ldw	r17,4(sp)
   87184:	dc000017 	ldw	r16,0(sp)
   87188:	dec00504 	addi	sp,sp,20
   8718c:	f800283a 	ret
   87190:	9009883a 	mov	r4,r18
   87194:	000b883a 	mov	r5,zero
   87198:	0086e1c0 	call	86e1c <_Balloc>
   8719c:	1019883a 	mov	r12,r2
   871a0:	00800044 	movi	r2,1
   871a4:	60800415 	stw	r2,16(r12)
   871a8:	6005883a 	mov	r2,r12
   871ac:	60000515 	stw	zero,20(r12)
   871b0:	dfc00417 	ldw	ra,16(sp)
   871b4:	dcc00317 	ldw	r19,12(sp)
   871b8:	dc800217 	ldw	r18,8(sp)
   871bc:	dc400117 	ldw	r17,4(sp)
   871c0:	dc000017 	ldw	r16,0(sp)
   871c4:	dec00504 	addi	sp,sp,20
   871c8:	f800283a 	ret
   871cc:	880d883a 	mov	r6,r17
   871d0:	04c00044 	movi	r19,1
   871d4:	8023883a 	mov	r17,r16
   871d8:	3021883a 	mov	r16,r6
   871dc:	003fac06 	br	87090 <__mdiff+0x3c>

000871e0 <__lshift>:
   871e0:	defff904 	addi	sp,sp,-28
   871e4:	28800417 	ldw	r2,16(r5)
   871e8:	dc000015 	stw	r16,0(sp)
   871ec:	3021d17a 	srai	r16,r6,5
   871f0:	28c00217 	ldw	r3,8(r5)
   871f4:	10800044 	addi	r2,r2,1
   871f8:	dc400115 	stw	r17,4(sp)
   871fc:	80a3883a 	add	r17,r16,r2
   87200:	dd400515 	stw	r21,20(sp)
   87204:	dd000415 	stw	r20,16(sp)
   87208:	dc800215 	stw	r18,8(sp)
   8720c:	dfc00615 	stw	ra,24(sp)
   87210:	2825883a 	mov	r18,r5
   87214:	dcc00315 	stw	r19,12(sp)
   87218:	3029883a 	mov	r20,r6
   8721c:	202b883a 	mov	r21,r4
   87220:	29400117 	ldw	r5,4(r5)
   87224:	1c40030e 	bge	r3,r17,87234 <__lshift+0x54>
   87228:	18c7883a 	add	r3,r3,r3
   8722c:	29400044 	addi	r5,r5,1
   87230:	1c7ffd16 	blt	r3,r17,87228 <__lshift+0x48>
   87234:	a809883a 	mov	r4,r21
   87238:	0086e1c0 	call	86e1c <_Balloc>
   8723c:	1027883a 	mov	r19,r2
   87240:	11400504 	addi	r5,r2,20
   87244:	0400090e 	bge	zero,r16,8726c <__lshift+0x8c>
   87248:	2805883a 	mov	r2,r5
   8724c:	0007883a 	mov	r3,zero
   87250:	18c00044 	addi	r3,r3,1
   87254:	10000015 	stw	zero,0(r2)
   87258:	10800104 	addi	r2,r2,4
   8725c:	80fffc1e 	bne	r16,r3,87250 <__lshift+0x70>
   87260:	8405883a 	add	r2,r16,r16
   87264:	1085883a 	add	r2,r2,r2
   87268:	288b883a 	add	r5,r5,r2
   8726c:	90800417 	ldw	r2,16(r18)
   87270:	91000504 	addi	r4,r18,20
   87274:	a18007cc 	andi	r6,r20,31
   87278:	1085883a 	add	r2,r2,r2
   8727c:	1085883a 	add	r2,r2,r2
   87280:	208f883a 	add	r7,r4,r2
   87284:	30001e26 	beq	r6,zero,87300 <__lshift+0x120>
   87288:	00800804 	movi	r2,32
   8728c:	1191c83a 	sub	r8,r2,r6
   87290:	0007883a 	mov	r3,zero
   87294:	20800017 	ldw	r2,0(r4)
   87298:	1184983a 	sll	r2,r2,r6
   8729c:	1884b03a 	or	r2,r3,r2
   872a0:	28800015 	stw	r2,0(r5)
   872a4:	20c00017 	ldw	r3,0(r4)
   872a8:	21000104 	addi	r4,r4,4
   872ac:	29400104 	addi	r5,r5,4
   872b0:	1a06d83a 	srl	r3,r3,r8
   872b4:	21fff736 	bltu	r4,r7,87294 <__lshift+0xb4>
   872b8:	28c00015 	stw	r3,0(r5)
   872bc:	18000126 	beq	r3,zero,872c4 <__lshift+0xe4>
   872c0:	8c400044 	addi	r17,r17,1
   872c4:	88bfffc4 	addi	r2,r17,-1
   872c8:	98800415 	stw	r2,16(r19)
   872cc:	a809883a 	mov	r4,r21
   872d0:	900b883a 	mov	r5,r18
   872d4:	008689c0 	call	8689c <_Bfree>
   872d8:	9805883a 	mov	r2,r19
   872dc:	dfc00617 	ldw	ra,24(sp)
   872e0:	dd400517 	ldw	r21,20(sp)
   872e4:	dd000417 	ldw	r20,16(sp)
   872e8:	dcc00317 	ldw	r19,12(sp)
   872ec:	dc800217 	ldw	r18,8(sp)
   872f0:	dc400117 	ldw	r17,4(sp)
   872f4:	dc000017 	ldw	r16,0(sp)
   872f8:	dec00704 	addi	sp,sp,28
   872fc:	f800283a 	ret
   87300:	20800017 	ldw	r2,0(r4)
   87304:	21000104 	addi	r4,r4,4
   87308:	28800015 	stw	r2,0(r5)
   8730c:	29400104 	addi	r5,r5,4
   87310:	21ffec2e 	bgeu	r4,r7,872c4 <__lshift+0xe4>
   87314:	20800017 	ldw	r2,0(r4)
   87318:	21000104 	addi	r4,r4,4
   8731c:	28800015 	stw	r2,0(r5)
   87320:	29400104 	addi	r5,r5,4
   87324:	21fff636 	bltu	r4,r7,87300 <__lshift+0x120>
   87328:	003fe606 	br	872c4 <__lshift+0xe4>

0008732c <__multiply>:
   8732c:	defff004 	addi	sp,sp,-64
   87330:	dc800815 	stw	r18,32(sp)
   87334:	dc400715 	stw	r17,28(sp)
   87338:	2c800417 	ldw	r18,16(r5)
   8733c:	34400417 	ldw	r17,16(r6)
   87340:	dcc00915 	stw	r19,36(sp)
   87344:	dc000615 	stw	r16,24(sp)
   87348:	dfc00f15 	stw	ra,60(sp)
   8734c:	df000e15 	stw	fp,56(sp)
   87350:	ddc00d15 	stw	r23,52(sp)
   87354:	dd800c15 	stw	r22,48(sp)
   87358:	dd400b15 	stw	r21,44(sp)
   8735c:	dd000a15 	stw	r20,40(sp)
   87360:	2821883a 	mov	r16,r5
   87364:	3027883a 	mov	r19,r6
   87368:	9440040e 	bge	r18,r17,8737c <__multiply+0x50>
   8736c:	8825883a 	mov	r18,r17
   87370:	2c400417 	ldw	r17,16(r5)
   87374:	2827883a 	mov	r19,r5
   87378:	3021883a 	mov	r16,r6
   8737c:	80800217 	ldw	r2,8(r16)
   87380:	9447883a 	add	r3,r18,r17
   87384:	d8c00415 	stw	r3,16(sp)
   87388:	81400117 	ldw	r5,4(r16)
   8738c:	10c0010e 	bge	r2,r3,87394 <__multiply+0x68>
   87390:	29400044 	addi	r5,r5,1
   87394:	0086e1c0 	call	86e1c <_Balloc>
   87398:	d8800515 	stw	r2,20(sp)
   8739c:	d9000417 	ldw	r4,16(sp)
   873a0:	d8c00517 	ldw	r3,20(sp)
   873a4:	2105883a 	add	r2,r4,r4
   873a8:	1085883a 	add	r2,r2,r2
   873ac:	19000504 	addi	r4,r3,20
   873b0:	2085883a 	add	r2,r4,r2
   873b4:	d8800315 	stw	r2,12(sp)
   873b8:	2080052e 	bgeu	r4,r2,873d0 <__multiply+0xa4>
   873bc:	2005883a 	mov	r2,r4
   873c0:	d8c00317 	ldw	r3,12(sp)
   873c4:	10000015 	stw	zero,0(r2)
   873c8:	10800104 	addi	r2,r2,4
   873cc:	10fffc36 	bltu	r2,r3,873c0 <__multiply+0x94>
   873d0:	8c45883a 	add	r2,r17,r17
   873d4:	9487883a 	add	r3,r18,r18
   873d8:	9dc00504 	addi	r23,r19,20
   873dc:	1085883a 	add	r2,r2,r2
   873e0:	84000504 	addi	r16,r16,20
   873e4:	18c7883a 	add	r3,r3,r3
   873e8:	b885883a 	add	r2,r23,r2
   873ec:	dc000015 	stw	r16,0(sp)
   873f0:	d8800215 	stw	r2,8(sp)
   873f4:	80f9883a 	add	fp,r16,r3
   873f8:	b880432e 	bgeu	r23,r2,87508 <__multiply+0x1dc>
   873fc:	d9000115 	stw	r4,4(sp)
   87400:	b9000017 	ldw	r4,0(r23)
   87404:	253fffcc 	andi	r20,r4,65535
   87408:	a0001a26 	beq	r20,zero,87474 <__multiply+0x148>
   8740c:	dcc00017 	ldw	r19,0(sp)
   87410:	dc800117 	ldw	r18,4(sp)
   87414:	002b883a 	mov	r21,zero
   87418:	9c400017 	ldw	r17,0(r19)
   8741c:	94000017 	ldw	r16,0(r18)
   87420:	a009883a 	mov	r4,r20
   87424:	897fffcc 	andi	r5,r17,65535
   87428:	00812180 	call	81218 <__mulsi3>
   8742c:	880ad43a 	srli	r5,r17,16
   87430:	80ffffcc 	andi	r3,r16,65535
   87434:	a8c7883a 	add	r3,r21,r3
   87438:	a009883a 	mov	r4,r20
   8743c:	10e3883a 	add	r17,r2,r3
   87440:	8020d43a 	srli	r16,r16,16
   87444:	00812180 	call	81218 <__mulsi3>
   87448:	8806d43a 	srli	r3,r17,16
   8744c:	1405883a 	add	r2,r2,r16
   87450:	9cc00104 	addi	r19,r19,4
   87454:	1887883a 	add	r3,r3,r2
   87458:	90c0008d 	sth	r3,2(r18)
   8745c:	9440000d 	sth	r17,0(r18)
   87460:	182ad43a 	srli	r21,r3,16
   87464:	94800104 	addi	r18,r18,4
   87468:	9f3feb36 	bltu	r19,fp,87418 <__multiply+0xec>
   8746c:	95400015 	stw	r21,0(r18)
   87470:	b9000017 	ldw	r4,0(r23)
   87474:	202ad43a 	srli	r21,r4,16
   87478:	a8001c26 	beq	r21,zero,874ec <__multiply+0x1c0>
   8747c:	d9000117 	ldw	r4,4(sp)
   87480:	dd000017 	ldw	r20,0(sp)
   87484:	002d883a 	mov	r22,zero
   87488:	24c00017 	ldw	r19,0(r4)
   8748c:	2025883a 	mov	r18,r4
   87490:	9823883a 	mov	r17,r19
   87494:	a4000017 	ldw	r16,0(r20)
   87498:	a809883a 	mov	r4,r21
   8749c:	a5000104 	addi	r20,r20,4
   874a0:	817fffcc 	andi	r5,r16,65535
   874a4:	00812180 	call	81218 <__mulsi3>
   874a8:	8806d43a 	srli	r3,r17,16
   874ac:	800ad43a 	srli	r5,r16,16
   874b0:	94c0000d 	sth	r19,0(r18)
   874b4:	b0c7883a 	add	r3,r22,r3
   874b8:	10e1883a 	add	r16,r2,r3
   874bc:	9400008d 	sth	r16,2(r18)
   874c0:	a809883a 	mov	r4,r21
   874c4:	94800104 	addi	r18,r18,4
   874c8:	00812180 	call	81218 <__mulsi3>
   874cc:	94400017 	ldw	r17,0(r18)
   874d0:	8020d43a 	srli	r16,r16,16
   874d4:	88ffffcc 	andi	r3,r17,65535
   874d8:	10c5883a 	add	r2,r2,r3
   874dc:	80a7883a 	add	r19,r16,r2
   874e0:	982cd43a 	srli	r22,r19,16
   874e4:	a73feb36 	bltu	r20,fp,87494 <__multiply+0x168>
   874e8:	94c00015 	stw	r19,0(r18)
   874ec:	d8800217 	ldw	r2,8(sp)
   874f0:	bdc00104 	addi	r23,r23,4
   874f4:	b880042e 	bgeu	r23,r2,87508 <__multiply+0x1dc>
   874f8:	d8c00117 	ldw	r3,4(sp)
   874fc:	18c00104 	addi	r3,r3,4
   87500:	d8c00115 	stw	r3,4(sp)
   87504:	003fbe06 	br	87400 <__multiply+0xd4>
   87508:	d9000417 	ldw	r4,16(sp)
   8750c:	01000c0e 	bge	zero,r4,87540 <__multiply+0x214>
   87510:	d8c00317 	ldw	r3,12(sp)
   87514:	18bfff17 	ldw	r2,-4(r3)
   87518:	18ffff04 	addi	r3,r3,-4
   8751c:	10000326 	beq	r2,zero,8752c <__multiply+0x200>
   87520:	00000706 	br	87540 <__multiply+0x214>
   87524:	18800017 	ldw	r2,0(r3)
   87528:	1000051e 	bne	r2,zero,87540 <__multiply+0x214>
   8752c:	d9000417 	ldw	r4,16(sp)
   87530:	18ffff04 	addi	r3,r3,-4
   87534:	213fffc4 	addi	r4,r4,-1
   87538:	d9000415 	stw	r4,16(sp)
   8753c:	203ff91e 	bne	r4,zero,87524 <__multiply+0x1f8>
   87540:	d8800417 	ldw	r2,16(sp)
   87544:	d8c00517 	ldw	r3,20(sp)
   87548:	18800415 	stw	r2,16(r3)
   8754c:	1805883a 	mov	r2,r3
   87550:	dfc00f17 	ldw	ra,60(sp)
   87554:	df000e17 	ldw	fp,56(sp)
   87558:	ddc00d17 	ldw	r23,52(sp)
   8755c:	dd800c17 	ldw	r22,48(sp)
   87560:	dd400b17 	ldw	r21,44(sp)
   87564:	dd000a17 	ldw	r20,40(sp)
   87568:	dcc00917 	ldw	r19,36(sp)
   8756c:	dc800817 	ldw	r18,32(sp)
   87570:	dc400717 	ldw	r17,28(sp)
   87574:	dc000617 	ldw	r16,24(sp)
   87578:	dec01004 	addi	sp,sp,64
   8757c:	f800283a 	ret

00087580 <__i2b>:
   87580:	defffd04 	addi	sp,sp,-12
   87584:	dc000015 	stw	r16,0(sp)
   87588:	04000044 	movi	r16,1
   8758c:	dc800115 	stw	r18,4(sp)
   87590:	2825883a 	mov	r18,r5
   87594:	800b883a 	mov	r5,r16
   87598:	dfc00215 	stw	ra,8(sp)
   8759c:	0086e1c0 	call	86e1c <_Balloc>
   875a0:	14000415 	stw	r16,16(r2)
   875a4:	14800515 	stw	r18,20(r2)
   875a8:	dfc00217 	ldw	ra,8(sp)
   875ac:	dc800117 	ldw	r18,4(sp)
   875b0:	dc000017 	ldw	r16,0(sp)
   875b4:	dec00304 	addi	sp,sp,12
   875b8:	f800283a 	ret

000875bc <__multadd>:
   875bc:	defff604 	addi	sp,sp,-40
   875c0:	dd800615 	stw	r22,24(sp)
   875c4:	2d800417 	ldw	r22,16(r5)
   875c8:	df000815 	stw	fp,32(sp)
   875cc:	ddc00715 	stw	r23,28(sp)
   875d0:	dd400515 	stw	r21,20(sp)
   875d4:	dd000415 	stw	r20,16(sp)
   875d8:	dcc00315 	stw	r19,12(sp)
   875dc:	dc800215 	stw	r18,8(sp)
   875e0:	dfc00915 	stw	ra,36(sp)
   875e4:	dc400115 	stw	r17,4(sp)
   875e8:	dc000015 	stw	r16,0(sp)
   875ec:	282f883a 	mov	r23,r5
   875f0:	2039883a 	mov	fp,r4
   875f4:	302b883a 	mov	r21,r6
   875f8:	3829883a 	mov	r20,r7
   875fc:	2c800504 	addi	r18,r5,20
   87600:	0027883a 	mov	r19,zero
   87604:	94400017 	ldw	r17,0(r18)
   87608:	a80b883a 	mov	r5,r21
   8760c:	9cc00044 	addi	r19,r19,1
   87610:	893fffcc 	andi	r4,r17,65535
   87614:	00812180 	call	81218 <__mulsi3>
   87618:	8808d43a 	srli	r4,r17,16
   8761c:	1521883a 	add	r16,r2,r20
   87620:	a80b883a 	mov	r5,r21
   87624:	00812180 	call	81218 <__mulsi3>
   87628:	8008d43a 	srli	r4,r16,16
   8762c:	843fffcc 	andi	r16,r16,65535
   87630:	1105883a 	add	r2,r2,r4
   87634:	1006943a 	slli	r3,r2,16
   87638:	1028d43a 	srli	r20,r2,16
   8763c:	1c07883a 	add	r3,r3,r16
   87640:	90c00015 	stw	r3,0(r18)
   87644:	94800104 	addi	r18,r18,4
   87648:	9dbfee16 	blt	r19,r22,87604 <__multadd+0x48>
   8764c:	a0000826 	beq	r20,zero,87670 <__multadd+0xb4>
   87650:	b8800217 	ldw	r2,8(r23)
   87654:	b080130e 	bge	r22,r2,876a4 <__multadd+0xe8>
   87658:	b585883a 	add	r2,r22,r22
   8765c:	1085883a 	add	r2,r2,r2
   87660:	15c5883a 	add	r2,r2,r23
   87664:	b0c00044 	addi	r3,r22,1
   87668:	15000515 	stw	r20,20(r2)
   8766c:	b8c00415 	stw	r3,16(r23)
   87670:	b805883a 	mov	r2,r23
   87674:	dfc00917 	ldw	ra,36(sp)
   87678:	df000817 	ldw	fp,32(sp)
   8767c:	ddc00717 	ldw	r23,28(sp)
   87680:	dd800617 	ldw	r22,24(sp)
   87684:	dd400517 	ldw	r21,20(sp)
   87688:	dd000417 	ldw	r20,16(sp)
   8768c:	dcc00317 	ldw	r19,12(sp)
   87690:	dc800217 	ldw	r18,8(sp)
   87694:	dc400117 	ldw	r17,4(sp)
   87698:	dc000017 	ldw	r16,0(sp)
   8769c:	dec00a04 	addi	sp,sp,40
   876a0:	f800283a 	ret
   876a4:	b9400117 	ldw	r5,4(r23)
   876a8:	e009883a 	mov	r4,fp
   876ac:	29400044 	addi	r5,r5,1
   876b0:	0086e1c0 	call	86e1c <_Balloc>
   876b4:	b9800417 	ldw	r6,16(r23)
   876b8:	b9400304 	addi	r5,r23,12
   876bc:	11000304 	addi	r4,r2,12
   876c0:	318d883a 	add	r6,r6,r6
   876c4:	318d883a 	add	r6,r6,r6
   876c8:	31800204 	addi	r6,r6,8
   876cc:	1023883a 	mov	r17,r2
   876d0:	00866840 	call	86684 <memcpy>
   876d4:	b80b883a 	mov	r5,r23
   876d8:	e009883a 	mov	r4,fp
   876dc:	008689c0 	call	8689c <_Bfree>
   876e0:	882f883a 	mov	r23,r17
   876e4:	003fdc06 	br	87658 <__multadd+0x9c>

000876e8 <__pow5mult>:
   876e8:	defffa04 	addi	sp,sp,-24
   876ec:	308000cc 	andi	r2,r6,3
   876f0:	dd000415 	stw	r20,16(sp)
   876f4:	dcc00315 	stw	r19,12(sp)
   876f8:	dc000015 	stw	r16,0(sp)
   876fc:	dfc00515 	stw	ra,20(sp)
   87700:	dc800215 	stw	r18,8(sp)
   87704:	dc400115 	stw	r17,4(sp)
   87708:	3021883a 	mov	r16,r6
   8770c:	2027883a 	mov	r19,r4
   87710:	2829883a 	mov	r20,r5
   87714:	10002b1e 	bne	r2,zero,877c4 <__pow5mult+0xdc>
   87718:	8025d0ba 	srai	r18,r16,2
   8771c:	90001b26 	beq	r18,zero,8778c <__pow5mult+0xa4>
   87720:	9c001217 	ldw	r16,72(r19)
   87724:	8000081e 	bne	r16,zero,87748 <__pow5mult+0x60>
   87728:	00003006 	br	877ec <__pow5mult+0x104>
   8772c:	800b883a 	mov	r5,r16
   87730:	800d883a 	mov	r6,r16
   87734:	9809883a 	mov	r4,r19
   87738:	90001426 	beq	r18,zero,8778c <__pow5mult+0xa4>
   8773c:	80800017 	ldw	r2,0(r16)
   87740:	10001b26 	beq	r2,zero,877b0 <__pow5mult+0xc8>
   87744:	1021883a 	mov	r16,r2
   87748:	9080004c 	andi	r2,r18,1
   8774c:	1005003a 	cmpeq	r2,r2,zero
   87750:	9025d07a 	srai	r18,r18,1
   87754:	800d883a 	mov	r6,r16
   87758:	9809883a 	mov	r4,r19
   8775c:	a00b883a 	mov	r5,r20
   87760:	103ff21e 	bne	r2,zero,8772c <__pow5mult+0x44>
   87764:	008732c0 	call	8732c <__multiply>
   87768:	a00b883a 	mov	r5,r20
   8776c:	9809883a 	mov	r4,r19
   87770:	1023883a 	mov	r17,r2
   87774:	008689c0 	call	8689c <_Bfree>
   87778:	8829883a 	mov	r20,r17
   8777c:	800b883a 	mov	r5,r16
   87780:	800d883a 	mov	r6,r16
   87784:	9809883a 	mov	r4,r19
   87788:	903fec1e 	bne	r18,zero,8773c <__pow5mult+0x54>
   8778c:	a005883a 	mov	r2,r20
   87790:	dfc00517 	ldw	ra,20(sp)
   87794:	dd000417 	ldw	r20,16(sp)
   87798:	dcc00317 	ldw	r19,12(sp)
   8779c:	dc800217 	ldw	r18,8(sp)
   877a0:	dc400117 	ldw	r17,4(sp)
   877a4:	dc000017 	ldw	r16,0(sp)
   877a8:	dec00604 	addi	sp,sp,24
   877ac:	f800283a 	ret
   877b0:	008732c0 	call	8732c <__multiply>
   877b4:	80800015 	stw	r2,0(r16)
   877b8:	1021883a 	mov	r16,r2
   877bc:	10000015 	stw	zero,0(r2)
   877c0:	003fe106 	br	87748 <__pow5mult+0x60>
   877c4:	1085883a 	add	r2,r2,r2
   877c8:	00c00274 	movhi	r3,9
   877cc:	18f7a304 	addi	r3,r3,-8564
   877d0:	1085883a 	add	r2,r2,r2
   877d4:	10c5883a 	add	r2,r2,r3
   877d8:	11bfff17 	ldw	r6,-4(r2)
   877dc:	000f883a 	mov	r7,zero
   877e0:	00875bc0 	call	875bc <__multadd>
   877e4:	1029883a 	mov	r20,r2
   877e8:	003fcb06 	br	87718 <__pow5mult+0x30>
   877ec:	9809883a 	mov	r4,r19
   877f0:	01409c44 	movi	r5,625
   877f4:	00875800 	call	87580 <__i2b>
   877f8:	98801215 	stw	r2,72(r19)
   877fc:	1021883a 	mov	r16,r2
   87800:	10000015 	stw	zero,0(r2)
   87804:	003fd006 	br	87748 <__pow5mult+0x60>

00087808 <__s2b>:
   87808:	defff904 	addi	sp,sp,-28
   8780c:	dcc00315 	stw	r19,12(sp)
   87810:	dc800215 	stw	r18,8(sp)
   87814:	2827883a 	mov	r19,r5
   87818:	2025883a 	mov	r18,r4
   8781c:	01400244 	movi	r5,9
   87820:	39000204 	addi	r4,r7,8
   87824:	dd000415 	stw	r20,16(sp)
   87828:	dc400115 	stw	r17,4(sp)
   8782c:	dfc00615 	stw	ra,24(sp)
   87830:	dd400515 	stw	r21,20(sp)
   87834:	dc000015 	stw	r16,0(sp)
   87838:	3829883a 	mov	r20,r7
   8783c:	3023883a 	mov	r17,r6
   87840:	008a8580 	call	8a858 <__divsi3>
   87844:	00c00044 	movi	r3,1
   87848:	1880350e 	bge	r3,r2,87920 <__s2b+0x118>
   8784c:	000b883a 	mov	r5,zero
   87850:	18c7883a 	add	r3,r3,r3
   87854:	29400044 	addi	r5,r5,1
   87858:	18bffd16 	blt	r3,r2,87850 <__s2b+0x48>
   8785c:	9009883a 	mov	r4,r18
   87860:	0086e1c0 	call	86e1c <_Balloc>
   87864:	1011883a 	mov	r8,r2
   87868:	d8800717 	ldw	r2,28(sp)
   8786c:	00c00044 	movi	r3,1
   87870:	01800244 	movi	r6,9
   87874:	40800515 	stw	r2,20(r8)
   87878:	40c00415 	stw	r3,16(r8)
   8787c:	3440260e 	bge	r6,r17,87918 <__s2b+0x110>
   87880:	3021883a 	mov	r16,r6
   87884:	99ab883a 	add	r21,r19,r6
   87888:	9c05883a 	add	r2,r19,r16
   8788c:	11c00007 	ldb	r7,0(r2)
   87890:	400b883a 	mov	r5,r8
   87894:	9009883a 	mov	r4,r18
   87898:	39fff404 	addi	r7,r7,-48
   8789c:	01800284 	movi	r6,10
   878a0:	00875bc0 	call	875bc <__multadd>
   878a4:	84000044 	addi	r16,r16,1
   878a8:	1011883a 	mov	r8,r2
   878ac:	8c3ff61e 	bne	r17,r16,87888 <__s2b+0x80>
   878b0:	ac45883a 	add	r2,r21,r17
   878b4:	117ffe04 	addi	r5,r2,-8
   878b8:	880d883a 	mov	r6,r17
   878bc:	35000c0e 	bge	r6,r20,878f0 <__s2b+0xe8>
   878c0:	a185c83a 	sub	r2,r20,r6
   878c4:	2821883a 	mov	r16,r5
   878c8:	28a3883a 	add	r17,r5,r2
   878cc:	81c00007 	ldb	r7,0(r16)
   878d0:	400b883a 	mov	r5,r8
   878d4:	9009883a 	mov	r4,r18
   878d8:	39fff404 	addi	r7,r7,-48
   878dc:	01800284 	movi	r6,10
   878e0:	00875bc0 	call	875bc <__multadd>
   878e4:	84000044 	addi	r16,r16,1
   878e8:	1011883a 	mov	r8,r2
   878ec:	847ff71e 	bne	r16,r17,878cc <__s2b+0xc4>
   878f0:	4005883a 	mov	r2,r8
   878f4:	dfc00617 	ldw	ra,24(sp)
   878f8:	dd400517 	ldw	r21,20(sp)
   878fc:	dd000417 	ldw	r20,16(sp)
   87900:	dcc00317 	ldw	r19,12(sp)
   87904:	dc800217 	ldw	r18,8(sp)
   87908:	dc400117 	ldw	r17,4(sp)
   8790c:	dc000017 	ldw	r16,0(sp)
   87910:	dec00704 	addi	sp,sp,28
   87914:	f800283a 	ret
   87918:	99400284 	addi	r5,r19,10
   8791c:	003fe706 	br	878bc <__s2b+0xb4>
   87920:	000b883a 	mov	r5,zero
   87924:	003fcd06 	br	8785c <__s2b+0x54>

00087928 <putc>:
   87928:	defffc04 	addi	sp,sp,-16
   8792c:	dc800215 	stw	r18,8(sp)
   87930:	04800274 	movhi	r18,9
   87934:	94be7f04 	addi	r18,r18,-1540
   87938:	90c00017 	ldw	r3,0(r18)
   8793c:	dc400115 	stw	r17,4(sp)
   87940:	dc000015 	stw	r16,0(sp)
   87944:	dfc00315 	stw	ra,12(sp)
   87948:	2023883a 	mov	r17,r4
   8794c:	2821883a 	mov	r16,r5
   87950:	18000226 	beq	r3,zero,8795c <putc+0x34>
   87954:	18800e17 	ldw	r2,56(r3)
   87958:	10001126 	beq	r2,zero,879a0 <putc+0x78>
   8795c:	80800217 	ldw	r2,8(r16)
   87960:	10ffffc4 	addi	r3,r2,-1
   87964:	80c00215 	stw	r3,8(r16)
   87968:	18001316 	blt	r3,zero,879b8 <putc+0x90>
   8796c:	80800017 	ldw	r2,0(r16)
   87970:	14400005 	stb	r17,0(r2)
   87974:	80c00017 	ldw	r3,0(r16)
   87978:	18800044 	addi	r2,r3,1
   8797c:	18c00003 	ldbu	r3,0(r3)
   87980:	80800015 	stw	r2,0(r16)
   87984:	1805883a 	mov	r2,r3
   87988:	dfc00317 	ldw	ra,12(sp)
   8798c:	dc800217 	ldw	r18,8(sp)
   87990:	dc400117 	ldw	r17,4(sp)
   87994:	dc000017 	ldw	r16,0(sp)
   87998:	dec00404 	addi	sp,sp,16
   8799c:	f800283a 	ret
   879a0:	1809883a 	mov	r4,r3
   879a4:	0084f200 	call	84f20 <__sinit>
   879a8:	80800217 	ldw	r2,8(r16)
   879ac:	10ffffc4 	addi	r3,r2,-1
   879b0:	80c00215 	stw	r3,8(r16)
   879b4:	183fed0e 	bge	r3,zero,8796c <putc+0x44>
   879b8:	80800617 	ldw	r2,24(r16)
   879bc:	18800f16 	blt	r3,r2,879fc <putc+0xd4>
   879c0:	80800017 	ldw	r2,0(r16)
   879c4:	14400005 	stb	r17,0(r2)
   879c8:	81000017 	ldw	r4,0(r16)
   879cc:	00800284 	movi	r2,10
   879d0:	20c00003 	ldbu	r3,0(r4)
   879d4:	18801226 	beq	r3,r2,87a20 <putc+0xf8>
   879d8:	20800044 	addi	r2,r4,1
   879dc:	80800015 	stw	r2,0(r16)
   879e0:	1805883a 	mov	r2,r3
   879e4:	dfc00317 	ldw	ra,12(sp)
   879e8:	dc800217 	ldw	r18,8(sp)
   879ec:	dc400117 	ldw	r17,4(sp)
   879f0:	dc000017 	ldw	r16,0(sp)
   879f4:	dec00404 	addi	sp,sp,16
   879f8:	f800283a 	ret
   879fc:	91000017 	ldw	r4,0(r18)
   87a00:	880b883a 	mov	r5,r17
   87a04:	800d883a 	mov	r6,r16
   87a08:	dfc00317 	ldw	ra,12(sp)
   87a0c:	dc800217 	ldw	r18,8(sp)
   87a10:	dc400117 	ldw	r17,4(sp)
   87a14:	dc000017 	ldw	r16,0(sp)
   87a18:	dec00404 	addi	sp,sp,16
   87a1c:	00883f01 	jmpi	883f0 <__swbuf_r>
   87a20:	91000017 	ldw	r4,0(r18)
   87a24:	180b883a 	mov	r5,r3
   87a28:	003ff606 	br	87a04 <putc+0xdc>

00087a2c <_putc_r>:
   87a2c:	defffc04 	addi	sp,sp,-16
   87a30:	dc400215 	stw	r17,8(sp)
   87a34:	dc000115 	stw	r16,4(sp)
   87a38:	dfc00315 	stw	ra,12(sp)
   87a3c:	2021883a 	mov	r16,r4
   87a40:	2823883a 	mov	r17,r5
   87a44:	20000226 	beq	r4,zero,87a50 <_putc_r+0x24>
   87a48:	20800e17 	ldw	r2,56(r4)
   87a4c:	10001026 	beq	r2,zero,87a90 <_putc_r+0x64>
   87a50:	30800217 	ldw	r2,8(r6)
   87a54:	10ffffc4 	addi	r3,r2,-1
   87a58:	30c00215 	stw	r3,8(r6)
   87a5c:	18001316 	blt	r3,zero,87aac <_putc_r+0x80>
   87a60:	30800017 	ldw	r2,0(r6)
   87a64:	14400005 	stb	r17,0(r2)
   87a68:	30c00017 	ldw	r3,0(r6)
   87a6c:	18800044 	addi	r2,r3,1
   87a70:	18c00003 	ldbu	r3,0(r3)
   87a74:	30800015 	stw	r2,0(r6)
   87a78:	1805883a 	mov	r2,r3
   87a7c:	dfc00317 	ldw	ra,12(sp)
   87a80:	dc400217 	ldw	r17,8(sp)
   87a84:	dc000117 	ldw	r16,4(sp)
   87a88:	dec00404 	addi	sp,sp,16
   87a8c:	f800283a 	ret
   87a90:	d9800015 	stw	r6,0(sp)
   87a94:	0084f200 	call	84f20 <__sinit>
   87a98:	d9800017 	ldw	r6,0(sp)
   87a9c:	30800217 	ldw	r2,8(r6)
   87aa0:	10ffffc4 	addi	r3,r2,-1
   87aa4:	30c00215 	stw	r3,8(r6)
   87aa8:	183fed0e 	bge	r3,zero,87a60 <_putc_r+0x34>
   87aac:	30800617 	ldw	r2,24(r6)
   87ab0:	18800e16 	blt	r3,r2,87aec <_putc_r+0xc0>
   87ab4:	30800017 	ldw	r2,0(r6)
   87ab8:	14400005 	stb	r17,0(r2)
   87abc:	31000017 	ldw	r4,0(r6)
   87ac0:	00800284 	movi	r2,10
   87ac4:	20c00003 	ldbu	r3,0(r4)
   87ac8:	18800f26 	beq	r3,r2,87b08 <_putc_r+0xdc>
   87acc:	20800044 	addi	r2,r4,1
   87ad0:	30800015 	stw	r2,0(r6)
   87ad4:	1805883a 	mov	r2,r3
   87ad8:	dfc00317 	ldw	ra,12(sp)
   87adc:	dc400217 	ldw	r17,8(sp)
   87ae0:	dc000117 	ldw	r16,4(sp)
   87ae4:	dec00404 	addi	sp,sp,16
   87ae8:	f800283a 	ret
   87aec:	8009883a 	mov	r4,r16
   87af0:	880b883a 	mov	r5,r17
   87af4:	dfc00317 	ldw	ra,12(sp)
   87af8:	dc400217 	ldw	r17,8(sp)
   87afc:	dc000117 	ldw	r16,4(sp)
   87b00:	dec00404 	addi	sp,sp,16
   87b04:	00883f01 	jmpi	883f0 <__swbuf_r>
   87b08:	8009883a 	mov	r4,r16
   87b0c:	180b883a 	mov	r5,r3
   87b10:	003ff806 	br	87af4 <_putc_r+0xc8>

00087b14 <_realloc_r>:
   87b14:	defff404 	addi	sp,sp,-48
   87b18:	dd800815 	stw	r22,32(sp)
   87b1c:	dc800415 	stw	r18,16(sp)
   87b20:	dc400315 	stw	r17,12(sp)
   87b24:	dfc00b15 	stw	ra,44(sp)
   87b28:	df000a15 	stw	fp,40(sp)
   87b2c:	ddc00915 	stw	r23,36(sp)
   87b30:	dd400715 	stw	r21,28(sp)
   87b34:	dd000615 	stw	r20,24(sp)
   87b38:	dcc00515 	stw	r19,20(sp)
   87b3c:	dc000215 	stw	r16,8(sp)
   87b40:	2825883a 	mov	r18,r5
   87b44:	3023883a 	mov	r17,r6
   87b48:	202d883a 	mov	r22,r4
   87b4c:	2800c926 	beq	r5,zero,87e74 <_realloc_r+0x360>
   87b50:	008b8340 	call	8b834 <__malloc_lock>
   87b54:	943ffe04 	addi	r16,r18,-8
   87b58:	88c002c4 	addi	r3,r17,11
   87b5c:	00800584 	movi	r2,22
   87b60:	82000117 	ldw	r8,4(r16)
   87b64:	10c01b2e 	bgeu	r2,r3,87bd4 <_realloc_r+0xc0>
   87b68:	00bffe04 	movi	r2,-8
   87b6c:	188e703a 	and	r7,r3,r2
   87b70:	3839883a 	mov	fp,r7
   87b74:	38001a16 	blt	r7,zero,87be0 <_realloc_r+0xcc>
   87b78:	e4401936 	bltu	fp,r17,87be0 <_realloc_r+0xcc>
   87b7c:	013fff04 	movi	r4,-4
   87b80:	4126703a 	and	r19,r8,r4
   87b84:	99c02616 	blt	r19,r7,87c20 <_realloc_r+0x10c>
   87b88:	802b883a 	mov	r21,r16
   87b8c:	9829883a 	mov	r20,r19
   87b90:	84000204 	addi	r16,r16,8
   87b94:	a80f883a 	mov	r7,r21
   87b98:	a70dc83a 	sub	r6,r20,fp
   87b9c:	008003c4 	movi	r2,15
   87ba0:	1180c136 	bltu	r2,r6,87ea8 <_realloc_r+0x394>
   87ba4:	38800117 	ldw	r2,4(r7)
   87ba8:	a549883a 	add	r4,r20,r21
   87bac:	1080004c 	andi	r2,r2,1
   87bb0:	a084b03a 	or	r2,r20,r2
   87bb4:	38800115 	stw	r2,4(r7)
   87bb8:	20c00117 	ldw	r3,4(r4)
   87bbc:	18c00054 	ori	r3,r3,1
   87bc0:	20c00115 	stw	r3,4(r4)
   87bc4:	b009883a 	mov	r4,r22
   87bc8:	008b8540 	call	8b854 <__malloc_unlock>
   87bcc:	8023883a 	mov	r17,r16
   87bd0:	00000606 	br	87bec <_realloc_r+0xd8>
   87bd4:	01c00404 	movi	r7,16
   87bd8:	3839883a 	mov	fp,r7
   87bdc:	e47fe72e 	bgeu	fp,r17,87b7c <_realloc_r+0x68>
   87be0:	00800304 	movi	r2,12
   87be4:	0023883a 	mov	r17,zero
   87be8:	b0800015 	stw	r2,0(r22)
   87bec:	8805883a 	mov	r2,r17
   87bf0:	dfc00b17 	ldw	ra,44(sp)
   87bf4:	df000a17 	ldw	fp,40(sp)
   87bf8:	ddc00917 	ldw	r23,36(sp)
   87bfc:	dd800817 	ldw	r22,32(sp)
   87c00:	dd400717 	ldw	r21,28(sp)
   87c04:	dd000617 	ldw	r20,24(sp)
   87c08:	dcc00517 	ldw	r19,20(sp)
   87c0c:	dc800417 	ldw	r18,16(sp)
   87c10:	dc400317 	ldw	r17,12(sp)
   87c14:	dc000217 	ldw	r16,8(sp)
   87c18:	dec00c04 	addi	sp,sp,48
   87c1c:	f800283a 	ret
   87c20:	00800274 	movhi	r2,9
   87c24:	10b8fb04 	addi	r2,r2,-7188
   87c28:	12400217 	ldw	r9,8(r2)
   87c2c:	84cd883a 	add	r6,r16,r19
   87c30:	802b883a 	mov	r21,r16
   87c34:	3240b926 	beq	r6,r9,87f1c <_realloc_r+0x408>
   87c38:	31400117 	ldw	r5,4(r6)
   87c3c:	00bfff84 	movi	r2,-2
   87c40:	2884703a 	and	r2,r5,r2
   87c44:	1185883a 	add	r2,r2,r6
   87c48:	10c00117 	ldw	r3,4(r2)
   87c4c:	18c0004c 	andi	r3,r3,1
   87c50:	1807003a 	cmpeq	r3,r3,zero
   87c54:	1800a326 	beq	r3,zero,87ee4 <_realloc_r+0x3d0>
   87c58:	2908703a 	and	r4,r5,r4
   87c5c:	9929883a 	add	r20,r19,r4
   87c60:	a1c0a30e 	bge	r20,r7,87ef0 <_realloc_r+0x3dc>
   87c64:	4080004c 	andi	r2,r8,1
   87c68:	1000551e 	bne	r2,zero,87dc0 <_realloc_r+0x2ac>
   87c6c:	80800017 	ldw	r2,0(r16)
   87c70:	80afc83a 	sub	r23,r16,r2
   87c74:	b8c00117 	ldw	r3,4(r23)
   87c78:	00bfff04 	movi	r2,-4
   87c7c:	1884703a 	and	r2,r3,r2
   87c80:	30002e26 	beq	r6,zero,87d3c <_realloc_r+0x228>
   87c84:	3240b926 	beq	r6,r9,87f6c <_realloc_r+0x458>
   87c88:	98a9883a 	add	r20,r19,r2
   87c8c:	2509883a 	add	r4,r4,r20
   87c90:	d9000015 	stw	r4,0(sp)
   87c94:	21c02a16 	blt	r4,r7,87d40 <_realloc_r+0x22c>
   87c98:	30800317 	ldw	r2,12(r6)
   87c9c:	30c00217 	ldw	r3,8(r6)
   87ca0:	01400904 	movi	r5,36
   87ca4:	99bfff04 	addi	r6,r19,-4
   87ca8:	18800315 	stw	r2,12(r3)
   87cac:	10c00215 	stw	r3,8(r2)
   87cb0:	b9000317 	ldw	r4,12(r23)
   87cb4:	b8800217 	ldw	r2,8(r23)
   87cb8:	b82b883a 	mov	r21,r23
   87cbc:	bc000204 	addi	r16,r23,8
   87cc0:	20800215 	stw	r2,8(r4)
   87cc4:	11000315 	stw	r4,12(r2)
   87cc8:	2980e436 	bltu	r5,r6,8805c <_realloc_r+0x548>
   87ccc:	008004c4 	movi	r2,19
   87cd0:	9009883a 	mov	r4,r18
   87cd4:	8011883a 	mov	r8,r16
   87cd8:	11800f2e 	bgeu	r2,r6,87d18 <_realloc_r+0x204>
   87cdc:	90800017 	ldw	r2,0(r18)
   87ce0:	ba000404 	addi	r8,r23,16
   87ce4:	91000204 	addi	r4,r18,8
   87ce8:	b8800215 	stw	r2,8(r23)
   87cec:	90c00117 	ldw	r3,4(r18)
   87cf0:	008006c4 	movi	r2,27
   87cf4:	b8c00315 	stw	r3,12(r23)
   87cf8:	1180072e 	bgeu	r2,r6,87d18 <_realloc_r+0x204>
   87cfc:	90c00217 	ldw	r3,8(r18)
   87d00:	ba000604 	addi	r8,r23,24
   87d04:	91000404 	addi	r4,r18,16
   87d08:	b8c00415 	stw	r3,16(r23)
   87d0c:	90800317 	ldw	r2,12(r18)
   87d10:	b8800515 	stw	r2,20(r23)
   87d14:	3140e726 	beq	r6,r5,880b4 <_realloc_r+0x5a0>
   87d18:	20800017 	ldw	r2,0(r4)
   87d1c:	dd000017 	ldw	r20,0(sp)
   87d20:	b80f883a 	mov	r7,r23
   87d24:	40800015 	stw	r2,0(r8)
   87d28:	20c00117 	ldw	r3,4(r4)
   87d2c:	40c00115 	stw	r3,4(r8)
   87d30:	20800217 	ldw	r2,8(r4)
   87d34:	40800215 	stw	r2,8(r8)
   87d38:	003f9706 	br	87b98 <_realloc_r+0x84>
   87d3c:	98a9883a 	add	r20,r19,r2
   87d40:	a1c01f16 	blt	r20,r7,87dc0 <_realloc_r+0x2ac>
   87d44:	b8c00317 	ldw	r3,12(r23)
   87d48:	b8800217 	ldw	r2,8(r23)
   87d4c:	99bfff04 	addi	r6,r19,-4
   87d50:	01400904 	movi	r5,36
   87d54:	b82b883a 	mov	r21,r23
   87d58:	18800215 	stw	r2,8(r3)
   87d5c:	10c00315 	stw	r3,12(r2)
   87d60:	bc000204 	addi	r16,r23,8
   87d64:	2980c336 	bltu	r5,r6,88074 <_realloc_r+0x560>
   87d68:	008004c4 	movi	r2,19
   87d6c:	9009883a 	mov	r4,r18
   87d70:	8011883a 	mov	r8,r16
   87d74:	11800f2e 	bgeu	r2,r6,87db4 <_realloc_r+0x2a0>
   87d78:	90800017 	ldw	r2,0(r18)
   87d7c:	ba000404 	addi	r8,r23,16
   87d80:	91000204 	addi	r4,r18,8
   87d84:	b8800215 	stw	r2,8(r23)
   87d88:	90c00117 	ldw	r3,4(r18)
   87d8c:	008006c4 	movi	r2,27
   87d90:	b8c00315 	stw	r3,12(r23)
   87d94:	1180072e 	bgeu	r2,r6,87db4 <_realloc_r+0x2a0>
   87d98:	90c00217 	ldw	r3,8(r18)
   87d9c:	ba000604 	addi	r8,r23,24
   87da0:	91000404 	addi	r4,r18,16
   87da4:	b8c00415 	stw	r3,16(r23)
   87da8:	90800317 	ldw	r2,12(r18)
   87dac:	b8800515 	stw	r2,20(r23)
   87db0:	3140c726 	beq	r6,r5,880d0 <_realloc_r+0x5bc>
   87db4:	20800017 	ldw	r2,0(r4)
   87db8:	b80f883a 	mov	r7,r23
   87dbc:	003fd906 	br	87d24 <_realloc_r+0x210>
   87dc0:	880b883a 	mov	r5,r17
   87dc4:	b009883a 	mov	r4,r22
   87dc8:	0085e600 	call	85e60 <_malloc_r>
   87dcc:	1023883a 	mov	r17,r2
   87dd0:	10002526 	beq	r2,zero,87e68 <_realloc_r+0x354>
   87dd4:	80800117 	ldw	r2,4(r16)
   87dd8:	00ffff84 	movi	r3,-2
   87ddc:	893ffe04 	addi	r4,r17,-8
   87de0:	10c4703a 	and	r2,r2,r3
   87de4:	8085883a 	add	r2,r16,r2
   87de8:	20809526 	beq	r4,r2,88040 <_realloc_r+0x52c>
   87dec:	99bfff04 	addi	r6,r19,-4
   87df0:	01c00904 	movi	r7,36
   87df4:	39804536 	bltu	r7,r6,87f0c <_realloc_r+0x3f8>
   87df8:	008004c4 	movi	r2,19
   87dfc:	9009883a 	mov	r4,r18
   87e00:	880b883a 	mov	r5,r17
   87e04:	11800f2e 	bgeu	r2,r6,87e44 <_realloc_r+0x330>
   87e08:	90800017 	ldw	r2,0(r18)
   87e0c:	89400204 	addi	r5,r17,8
   87e10:	91000204 	addi	r4,r18,8
   87e14:	88800015 	stw	r2,0(r17)
   87e18:	90c00117 	ldw	r3,4(r18)
   87e1c:	008006c4 	movi	r2,27
   87e20:	88c00115 	stw	r3,4(r17)
   87e24:	1180072e 	bgeu	r2,r6,87e44 <_realloc_r+0x330>
   87e28:	90c00217 	ldw	r3,8(r18)
   87e2c:	89400404 	addi	r5,r17,16
   87e30:	91000404 	addi	r4,r18,16
   87e34:	88c00215 	stw	r3,8(r17)
   87e38:	90800317 	ldw	r2,12(r18)
   87e3c:	88800315 	stw	r2,12(r17)
   87e40:	31c09126 	beq	r6,r7,88088 <_realloc_r+0x574>
   87e44:	20800017 	ldw	r2,0(r4)
   87e48:	28800015 	stw	r2,0(r5)
   87e4c:	20c00117 	ldw	r3,4(r4)
   87e50:	28c00115 	stw	r3,4(r5)
   87e54:	20800217 	ldw	r2,8(r4)
   87e58:	28800215 	stw	r2,8(r5)
   87e5c:	900b883a 	mov	r5,r18
   87e60:	b009883a 	mov	r4,r22
   87e64:	00852d80 	call	852d8 <_free_r>
   87e68:	b009883a 	mov	r4,r22
   87e6c:	008b8540 	call	8b854 <__malloc_unlock>
   87e70:	003f5e06 	br	87bec <_realloc_r+0xd8>
   87e74:	300b883a 	mov	r5,r6
   87e78:	dfc00b17 	ldw	ra,44(sp)
   87e7c:	df000a17 	ldw	fp,40(sp)
   87e80:	ddc00917 	ldw	r23,36(sp)
   87e84:	dd800817 	ldw	r22,32(sp)
   87e88:	dd400717 	ldw	r21,28(sp)
   87e8c:	dd000617 	ldw	r20,24(sp)
   87e90:	dcc00517 	ldw	r19,20(sp)
   87e94:	dc800417 	ldw	r18,16(sp)
   87e98:	dc400317 	ldw	r17,12(sp)
   87e9c:	dc000217 	ldw	r16,8(sp)
   87ea0:	dec00c04 	addi	sp,sp,48
   87ea4:	0085e601 	jmpi	85e60 <_malloc_r>
   87ea8:	38800117 	ldw	r2,4(r7)
   87eac:	e54b883a 	add	r5,fp,r21
   87eb0:	31000054 	ori	r4,r6,1
   87eb4:	1080004c 	andi	r2,r2,1
   87eb8:	1704b03a 	or	r2,r2,fp
   87ebc:	38800115 	stw	r2,4(r7)
   87ec0:	29000115 	stw	r4,4(r5)
   87ec4:	2987883a 	add	r3,r5,r6
   87ec8:	18800117 	ldw	r2,4(r3)
   87ecc:	29400204 	addi	r5,r5,8
   87ed0:	b009883a 	mov	r4,r22
   87ed4:	10800054 	ori	r2,r2,1
   87ed8:	18800115 	stw	r2,4(r3)
   87edc:	00852d80 	call	852d8 <_free_r>
   87ee0:	003f3806 	br	87bc4 <_realloc_r+0xb0>
   87ee4:	000d883a 	mov	r6,zero
   87ee8:	0009883a 	mov	r4,zero
   87eec:	003f5d06 	br	87c64 <_realloc_r+0x150>
   87ef0:	30c00217 	ldw	r3,8(r6)
   87ef4:	30800317 	ldw	r2,12(r6)
   87ef8:	800f883a 	mov	r7,r16
   87efc:	84000204 	addi	r16,r16,8
   87f00:	10c00215 	stw	r3,8(r2)
   87f04:	18800315 	stw	r2,12(r3)
   87f08:	003f2306 	br	87b98 <_realloc_r+0x84>
   87f0c:	8809883a 	mov	r4,r17
   87f10:	900b883a 	mov	r5,r18
   87f14:	00867240 	call	86724 <memmove>
   87f18:	003fd006 	br	87e5c <_realloc_r+0x348>
   87f1c:	30800117 	ldw	r2,4(r6)
   87f20:	e0c00404 	addi	r3,fp,16
   87f24:	1108703a 	and	r4,r2,r4
   87f28:	9905883a 	add	r2,r19,r4
   87f2c:	10ff4d16 	blt	r2,r3,87c64 <_realloc_r+0x150>
   87f30:	1705c83a 	sub	r2,r2,fp
   87f34:	870b883a 	add	r5,r16,fp
   87f38:	10800054 	ori	r2,r2,1
   87f3c:	28800115 	stw	r2,4(r5)
   87f40:	80c00117 	ldw	r3,4(r16)
   87f44:	00800274 	movhi	r2,9
   87f48:	10b8fb04 	addi	r2,r2,-7188
   87f4c:	b009883a 	mov	r4,r22
   87f50:	18c0004c 	andi	r3,r3,1
   87f54:	e0c6b03a 	or	r3,fp,r3
   87f58:	11400215 	stw	r5,8(r2)
   87f5c:	80c00115 	stw	r3,4(r16)
   87f60:	008b8540 	call	8b854 <__malloc_unlock>
   87f64:	84400204 	addi	r17,r16,8
   87f68:	003f2006 	br	87bec <_realloc_r+0xd8>
   87f6c:	98a9883a 	add	r20,r19,r2
   87f70:	2509883a 	add	r4,r4,r20
   87f74:	e0800404 	addi	r2,fp,16
   87f78:	d9000115 	stw	r4,4(sp)
   87f7c:	20bf7016 	blt	r4,r2,87d40 <_realloc_r+0x22c>
   87f80:	b8c00317 	ldw	r3,12(r23)
   87f84:	b8800217 	ldw	r2,8(r23)
   87f88:	99bfff04 	addi	r6,r19,-4
   87f8c:	01400904 	movi	r5,36
   87f90:	18800215 	stw	r2,8(r3)
   87f94:	10c00315 	stw	r3,12(r2)
   87f98:	bc400204 	addi	r17,r23,8
   87f9c:	29804136 	bltu	r5,r6,880a4 <_realloc_r+0x590>
   87fa0:	008004c4 	movi	r2,19
   87fa4:	9009883a 	mov	r4,r18
   87fa8:	880f883a 	mov	r7,r17
   87fac:	11800f2e 	bgeu	r2,r6,87fec <_realloc_r+0x4d8>
   87fb0:	90800017 	ldw	r2,0(r18)
   87fb4:	b9c00404 	addi	r7,r23,16
   87fb8:	91000204 	addi	r4,r18,8
   87fbc:	b8800215 	stw	r2,8(r23)
   87fc0:	90c00117 	ldw	r3,4(r18)
   87fc4:	008006c4 	movi	r2,27
   87fc8:	b8c00315 	stw	r3,12(r23)
   87fcc:	1180072e 	bgeu	r2,r6,87fec <_realloc_r+0x4d8>
   87fd0:	90c00217 	ldw	r3,8(r18)
   87fd4:	b9c00604 	addi	r7,r23,24
   87fd8:	91000404 	addi	r4,r18,16
   87fdc:	b8c00415 	stw	r3,16(r23)
   87fe0:	90800317 	ldw	r2,12(r18)
   87fe4:	b8800515 	stw	r2,20(r23)
   87fe8:	31404026 	beq	r6,r5,880ec <_realloc_r+0x5d8>
   87fec:	20800017 	ldw	r2,0(r4)
   87ff0:	38800015 	stw	r2,0(r7)
   87ff4:	20c00117 	ldw	r3,4(r4)
   87ff8:	38c00115 	stw	r3,4(r7)
   87ffc:	20800217 	ldw	r2,8(r4)
   88000:	38800215 	stw	r2,8(r7)
   88004:	d8c00117 	ldw	r3,4(sp)
   88008:	bf0b883a 	add	r5,r23,fp
   8800c:	b009883a 	mov	r4,r22
   88010:	1f05c83a 	sub	r2,r3,fp
   88014:	10800054 	ori	r2,r2,1
   88018:	28800115 	stw	r2,4(r5)
   8801c:	b8c00117 	ldw	r3,4(r23)
   88020:	00800274 	movhi	r2,9
   88024:	10b8fb04 	addi	r2,r2,-7188
   88028:	11400215 	stw	r5,8(r2)
   8802c:	18c0004c 	andi	r3,r3,1
   88030:	e0c6b03a 	or	r3,fp,r3
   88034:	b8c00115 	stw	r3,4(r23)
   88038:	008b8540 	call	8b854 <__malloc_unlock>
   8803c:	003eeb06 	br	87bec <_realloc_r+0xd8>
   88040:	20800117 	ldw	r2,4(r4)
   88044:	00ffff04 	movi	r3,-4
   88048:	800f883a 	mov	r7,r16
   8804c:	10c4703a 	and	r2,r2,r3
   88050:	98a9883a 	add	r20,r19,r2
   88054:	84000204 	addi	r16,r16,8
   88058:	003ecf06 	br	87b98 <_realloc_r+0x84>
   8805c:	900b883a 	mov	r5,r18
   88060:	8009883a 	mov	r4,r16
   88064:	00867240 	call	86724 <memmove>
   88068:	dd000017 	ldw	r20,0(sp)
   8806c:	b80f883a 	mov	r7,r23
   88070:	003ec906 	br	87b98 <_realloc_r+0x84>
   88074:	900b883a 	mov	r5,r18
   88078:	8009883a 	mov	r4,r16
   8807c:	00867240 	call	86724 <memmove>
   88080:	b80f883a 	mov	r7,r23
   88084:	003ec406 	br	87b98 <_realloc_r+0x84>
   88088:	90c00417 	ldw	r3,16(r18)
   8808c:	89400604 	addi	r5,r17,24
   88090:	91000604 	addi	r4,r18,24
   88094:	88c00415 	stw	r3,16(r17)
   88098:	90800517 	ldw	r2,20(r18)
   8809c:	88800515 	stw	r2,20(r17)
   880a0:	003f6806 	br	87e44 <_realloc_r+0x330>
   880a4:	900b883a 	mov	r5,r18
   880a8:	8809883a 	mov	r4,r17
   880ac:	00867240 	call	86724 <memmove>
   880b0:	003fd406 	br	88004 <_realloc_r+0x4f0>
   880b4:	90c00417 	ldw	r3,16(r18)
   880b8:	91000604 	addi	r4,r18,24
   880bc:	ba000804 	addi	r8,r23,32
   880c0:	b8c00615 	stw	r3,24(r23)
   880c4:	90800517 	ldw	r2,20(r18)
   880c8:	b8800715 	stw	r2,28(r23)
   880cc:	003f1206 	br	87d18 <_realloc_r+0x204>
   880d0:	90c00417 	ldw	r3,16(r18)
   880d4:	91000604 	addi	r4,r18,24
   880d8:	ba000804 	addi	r8,r23,32
   880dc:	b8c00615 	stw	r3,24(r23)
   880e0:	90800517 	ldw	r2,20(r18)
   880e4:	b8800715 	stw	r2,28(r23)
   880e8:	003f3206 	br	87db4 <_realloc_r+0x2a0>
   880ec:	90c00417 	ldw	r3,16(r18)
   880f0:	91000604 	addi	r4,r18,24
   880f4:	b9c00804 	addi	r7,r23,32
   880f8:	b8c00615 	stw	r3,24(r23)
   880fc:	90800517 	ldw	r2,20(r18)
   88100:	b8800715 	stw	r2,28(r23)
   88104:	003fb906 	br	87fec <_realloc_r+0x4d8>

00088108 <__isinfd>:
   88108:	200d883a 	mov	r6,r4
   8810c:	0109c83a 	sub	r4,zero,r4
   88110:	2188b03a 	or	r4,r4,r6
   88114:	2008d7fa 	srli	r4,r4,31
   88118:	00a00034 	movhi	r2,32768
   8811c:	10bfffc4 	addi	r2,r2,-1
   88120:	1144703a 	and	r2,r2,r5
   88124:	2088b03a 	or	r4,r4,r2
   88128:	009ffc34 	movhi	r2,32752
   8812c:	1105c83a 	sub	r2,r2,r4
   88130:	0087c83a 	sub	r3,zero,r2
   88134:	10c4b03a 	or	r2,r2,r3
   88138:	1004d7fa 	srli	r2,r2,31
   8813c:	00c00044 	movi	r3,1
   88140:	1885c83a 	sub	r2,r3,r2
   88144:	f800283a 	ret

00088148 <__isnand>:
   88148:	200d883a 	mov	r6,r4
   8814c:	0109c83a 	sub	r4,zero,r4
   88150:	2188b03a 	or	r4,r4,r6
   88154:	2008d7fa 	srli	r4,r4,31
   88158:	00a00034 	movhi	r2,32768
   8815c:	10bfffc4 	addi	r2,r2,-1
   88160:	1144703a 	and	r2,r2,r5
   88164:	2088b03a 	or	r4,r4,r2
   88168:	009ffc34 	movhi	r2,32752
   8816c:	1105c83a 	sub	r2,r2,r4
   88170:	1004d7fa 	srli	r2,r2,31
   88174:	f800283a 	ret

00088178 <_sbrk_r>:
   88178:	defffd04 	addi	sp,sp,-12
   8817c:	dc000015 	stw	r16,0(sp)
   88180:	04000274 	movhi	r16,9
   88184:	84052d04 	addi	r16,r16,5300
   88188:	dc400115 	stw	r17,4(sp)
   8818c:	80000015 	stw	zero,0(r16)
   88190:	2023883a 	mov	r17,r4
   88194:	2809883a 	mov	r4,r5
   88198:	dfc00215 	stw	ra,8(sp)
   8819c:	008ba700 	call	8ba70 <sbrk>
   881a0:	1007883a 	mov	r3,r2
   881a4:	00bfffc4 	movi	r2,-1
   881a8:	18800626 	beq	r3,r2,881c4 <_sbrk_r+0x4c>
   881ac:	1805883a 	mov	r2,r3
   881b0:	dfc00217 	ldw	ra,8(sp)
   881b4:	dc400117 	ldw	r17,4(sp)
   881b8:	dc000017 	ldw	r16,0(sp)
   881bc:	dec00304 	addi	sp,sp,12
   881c0:	f800283a 	ret
   881c4:	80800017 	ldw	r2,0(r16)
   881c8:	103ff826 	beq	r2,zero,881ac <_sbrk_r+0x34>
   881cc:	88800015 	stw	r2,0(r17)
   881d0:	1805883a 	mov	r2,r3
   881d4:	dfc00217 	ldw	ra,8(sp)
   881d8:	dc400117 	ldw	r17,4(sp)
   881dc:	dc000017 	ldw	r16,0(sp)
   881e0:	dec00304 	addi	sp,sp,12
   881e4:	f800283a 	ret

000881e8 <__sclose>:
   881e8:	2940038f 	ldh	r5,14(r5)
   881ec:	008867c1 	jmpi	8867c <_close_r>

000881f0 <__sseek>:
   881f0:	defffe04 	addi	sp,sp,-8
   881f4:	dc000015 	stw	r16,0(sp)
   881f8:	2821883a 	mov	r16,r5
   881fc:	2940038f 	ldh	r5,14(r5)
   88200:	dfc00115 	stw	ra,4(sp)
   88204:	00888f40 	call	888f4 <_lseek_r>
   88208:	1007883a 	mov	r3,r2
   8820c:	00bfffc4 	movi	r2,-1
   88210:	18800926 	beq	r3,r2,88238 <__sseek+0x48>
   88214:	8080030b 	ldhu	r2,12(r16)
   88218:	80c01415 	stw	r3,80(r16)
   8821c:	10840014 	ori	r2,r2,4096
   88220:	8080030d 	sth	r2,12(r16)
   88224:	1805883a 	mov	r2,r3
   88228:	dfc00117 	ldw	ra,4(sp)
   8822c:	dc000017 	ldw	r16,0(sp)
   88230:	dec00204 	addi	sp,sp,8
   88234:	f800283a 	ret
   88238:	8080030b 	ldhu	r2,12(r16)
   8823c:	10bbffcc 	andi	r2,r2,61439
   88240:	8080030d 	sth	r2,12(r16)
   88244:	1805883a 	mov	r2,r3
   88248:	dfc00117 	ldw	ra,4(sp)
   8824c:	dc000017 	ldw	r16,0(sp)
   88250:	dec00204 	addi	sp,sp,8
   88254:	f800283a 	ret

00088258 <__swrite>:
   88258:	2880030b 	ldhu	r2,12(r5)
   8825c:	defffb04 	addi	sp,sp,-20
   88260:	dcc00315 	stw	r19,12(sp)
   88264:	1080400c 	andi	r2,r2,256
   88268:	dc800215 	stw	r18,8(sp)
   8826c:	dc400115 	stw	r17,4(sp)
   88270:	dc000015 	stw	r16,0(sp)
   88274:	3027883a 	mov	r19,r6
   88278:	3825883a 	mov	r18,r7
   8827c:	dfc00415 	stw	ra,16(sp)
   88280:	2821883a 	mov	r16,r5
   88284:	000d883a 	mov	r6,zero
   88288:	01c00084 	movi	r7,2
   8828c:	2023883a 	mov	r17,r4
   88290:	10000226 	beq	r2,zero,8829c <__swrite+0x44>
   88294:	2940038f 	ldh	r5,14(r5)
   88298:	00888f40 	call	888f4 <_lseek_r>
   8829c:	8080030b 	ldhu	r2,12(r16)
   882a0:	8140038f 	ldh	r5,14(r16)
   882a4:	8809883a 	mov	r4,r17
   882a8:	10bbffcc 	andi	r2,r2,61439
   882ac:	980d883a 	mov	r6,r19
   882b0:	900f883a 	mov	r7,r18
   882b4:	8080030d 	sth	r2,12(r16)
   882b8:	dfc00417 	ldw	ra,16(sp)
   882bc:	dcc00317 	ldw	r19,12(sp)
   882c0:	dc800217 	ldw	r18,8(sp)
   882c4:	dc400117 	ldw	r17,4(sp)
   882c8:	dc000017 	ldw	r16,0(sp)
   882cc:	dec00504 	addi	sp,sp,20
   882d0:	008853c1 	jmpi	8853c <_write_r>

000882d4 <__sread>:
   882d4:	defffe04 	addi	sp,sp,-8
   882d8:	dc000015 	stw	r16,0(sp)
   882dc:	2821883a 	mov	r16,r5
   882e0:	2940038f 	ldh	r5,14(r5)
   882e4:	dfc00115 	stw	ra,4(sp)
   882e8:	008896c0 	call	8896c <_read_r>
   882ec:	1007883a 	mov	r3,r2
   882f0:	10000816 	blt	r2,zero,88314 <__sread+0x40>
   882f4:	80801417 	ldw	r2,80(r16)
   882f8:	10c5883a 	add	r2,r2,r3
   882fc:	80801415 	stw	r2,80(r16)
   88300:	1805883a 	mov	r2,r3
   88304:	dfc00117 	ldw	ra,4(sp)
   88308:	dc000017 	ldw	r16,0(sp)
   8830c:	dec00204 	addi	sp,sp,8
   88310:	f800283a 	ret
   88314:	8080030b 	ldhu	r2,12(r16)
   88318:	10bbffcc 	andi	r2,r2,61439
   8831c:	8080030d 	sth	r2,12(r16)
   88320:	1805883a 	mov	r2,r3
   88324:	dfc00117 	ldw	ra,4(sp)
   88328:	dc000017 	ldw	r16,0(sp)
   8832c:	dec00204 	addi	sp,sp,8
   88330:	f800283a 	ret

00088334 <strcmp>:
   88334:	2144b03a 	or	r2,r4,r5
   88338:	108000cc 	andi	r2,r2,3
   8833c:	10001d1e 	bne	r2,zero,883b4 <strcmp+0x80>
   88340:	200f883a 	mov	r7,r4
   88344:	28800017 	ldw	r2,0(r5)
   88348:	21000017 	ldw	r4,0(r4)
   8834c:	280d883a 	mov	r6,r5
   88350:	2080161e 	bne	r4,r2,883ac <strcmp+0x78>
   88354:	023fbff4 	movhi	r8,65279
   88358:	423fbfc4 	addi	r8,r8,-257
   8835c:	2207883a 	add	r3,r4,r8
   88360:	01602074 	movhi	r5,32897
   88364:	29602004 	addi	r5,r5,-32640
   88368:	1946703a 	and	r3,r3,r5
   8836c:	0104303a 	nor	r2,zero,r4
   88370:	10c4703a 	and	r2,r2,r3
   88374:	10001c1e 	bne	r2,zero,883e8 <strcmp+0xb4>
   88378:	4013883a 	mov	r9,r8
   8837c:	2811883a 	mov	r8,r5
   88380:	00000106 	br	88388 <strcmp+0x54>
   88384:	1800181e 	bne	r3,zero,883e8 <strcmp+0xb4>
   88388:	39c00104 	addi	r7,r7,4
   8838c:	39000017 	ldw	r4,0(r7)
   88390:	31800104 	addi	r6,r6,4
   88394:	31400017 	ldw	r5,0(r6)
   88398:	2245883a 	add	r2,r4,r9
   8839c:	1204703a 	and	r2,r2,r8
   883a0:	0106303a 	nor	r3,zero,r4
   883a4:	1886703a 	and	r3,r3,r2
   883a8:	217ff626 	beq	r4,r5,88384 <strcmp+0x50>
   883ac:	3809883a 	mov	r4,r7
   883b0:	300b883a 	mov	r5,r6
   883b4:	20c00007 	ldb	r3,0(r4)
   883b8:	1800051e 	bne	r3,zero,883d0 <strcmp+0x9c>
   883bc:	00000606 	br	883d8 <strcmp+0xa4>
   883c0:	21000044 	addi	r4,r4,1
   883c4:	20c00007 	ldb	r3,0(r4)
   883c8:	29400044 	addi	r5,r5,1
   883cc:	18000226 	beq	r3,zero,883d8 <strcmp+0xa4>
   883d0:	28800007 	ldb	r2,0(r5)
   883d4:	18bffa26 	beq	r3,r2,883c0 <strcmp+0x8c>
   883d8:	20c00003 	ldbu	r3,0(r4)
   883dc:	28800003 	ldbu	r2,0(r5)
   883e0:	1885c83a 	sub	r2,r3,r2
   883e4:	f800283a 	ret
   883e8:	0005883a 	mov	r2,zero
   883ec:	f800283a 	ret

000883f0 <__swbuf_r>:
   883f0:	defffc04 	addi	sp,sp,-16
   883f4:	dc400215 	stw	r17,8(sp)
   883f8:	dc000115 	stw	r16,4(sp)
   883fc:	dfc00315 	stw	ra,12(sp)
   88400:	2023883a 	mov	r17,r4
   88404:	2821883a 	mov	r16,r5
   88408:	20000226 	beq	r4,zero,88414 <__swbuf_r+0x24>
   8840c:	20800e17 	ldw	r2,56(r4)
   88410:	10002f26 	beq	r2,zero,884d0 <__swbuf_r+0xe0>
   88414:	3080030b 	ldhu	r2,12(r6)
   88418:	30c00617 	ldw	r3,24(r6)
   8841c:	1080020c 	andi	r2,r2,8
   88420:	30c00215 	stw	r3,8(r6)
   88424:	10002226 	beq	r2,zero,884b0 <__swbuf_r+0xc0>
   88428:	30c00417 	ldw	r3,16(r6)
   8842c:	18002026 	beq	r3,zero,884b0 <__swbuf_r+0xc0>
   88430:	31000017 	ldw	r4,0(r6)
   88434:	30800517 	ldw	r2,20(r6)
   88438:	20c7c83a 	sub	r3,r4,r3
   8843c:	18802f0e 	bge	r3,r2,884fc <__swbuf_r+0x10c>
   88440:	19400044 	addi	r5,r3,1
   88444:	30800217 	ldw	r2,8(r6)
   88448:	84003fcc 	andi	r16,r16,255
   8844c:	20c00044 	addi	r3,r4,1
   88450:	10bfffc4 	addi	r2,r2,-1
   88454:	30800215 	stw	r2,8(r6)
   88458:	24000005 	stb	r16,0(r4)
   8845c:	30800517 	ldw	r2,20(r6)
   88460:	30c00015 	stw	r3,0(r6)
   88464:	11400c26 	beq	r2,r5,88498 <__swbuf_r+0xa8>
   88468:	3080030b 	ldhu	r2,12(r6)
   8846c:	1080004c 	andi	r2,r2,1
   88470:	1005003a 	cmpeq	r2,r2,zero
   88474:	10000626 	beq	r2,zero,88490 <__swbuf_r+0xa0>
   88478:	8005883a 	mov	r2,r16
   8847c:	dfc00317 	ldw	ra,12(sp)
   88480:	dc400217 	ldw	r17,8(sp)
   88484:	dc000117 	ldw	r16,4(sp)
   88488:	dec00404 	addi	sp,sp,16
   8848c:	f800283a 	ret
   88490:	00800284 	movi	r2,10
   88494:	80bff81e 	bne	r16,r2,88478 <__swbuf_r+0x88>
   88498:	8809883a 	mov	r4,r17
   8849c:	300b883a 	mov	r5,r6
   884a0:	0084c880 	call	84c88 <_fflush_r>
   884a4:	103ff426 	beq	r2,zero,88478 <__swbuf_r+0x88>
   884a8:	043fffc4 	movi	r16,-1
   884ac:	003ff206 	br	88478 <__swbuf_r+0x88>
   884b0:	300b883a 	mov	r5,r6
   884b4:	8809883a 	mov	r4,r17
   884b8:	d9800015 	stw	r6,0(sp)
   884bc:	00833540 	call	83354 <__swsetup_r>
   884c0:	d9800017 	ldw	r6,0(sp)
   884c4:	1000061e 	bne	r2,zero,884e0 <__swbuf_r+0xf0>
   884c8:	30c00417 	ldw	r3,16(r6)
   884cc:	003fd806 	br	88430 <__swbuf_r+0x40>
   884d0:	d9800015 	stw	r6,0(sp)
   884d4:	0084f200 	call	84f20 <__sinit>
   884d8:	d9800017 	ldw	r6,0(sp)
   884dc:	003fcd06 	br	88414 <__swbuf_r+0x24>
   884e0:	3080030b 	ldhu	r2,12(r6)
   884e4:	00c00244 	movi	r3,9
   884e8:	043fffc4 	movi	r16,-1
   884ec:	10801014 	ori	r2,r2,64
   884f0:	3080030d 	sth	r2,12(r6)
   884f4:	88c00015 	stw	r3,0(r17)
   884f8:	003fdf06 	br	88478 <__swbuf_r+0x88>
   884fc:	300b883a 	mov	r5,r6
   88500:	8809883a 	mov	r4,r17
   88504:	d9800015 	stw	r6,0(sp)
   88508:	0084c880 	call	84c88 <_fflush_r>
   8850c:	d9800017 	ldw	r6,0(sp)
   88510:	103fe51e 	bne	r2,zero,884a8 <__swbuf_r+0xb8>
   88514:	31000017 	ldw	r4,0(r6)
   88518:	01400044 	movi	r5,1
   8851c:	003fc906 	br	88444 <__swbuf_r+0x54>

00088520 <__swbuf>:
   88520:	01800274 	movhi	r6,9
   88524:	31be7f04 	addi	r6,r6,-1540
   88528:	2007883a 	mov	r3,r4
   8852c:	31000017 	ldw	r4,0(r6)
   88530:	280d883a 	mov	r6,r5
   88534:	180b883a 	mov	r5,r3
   88538:	00883f01 	jmpi	883f0 <__swbuf_r>

0008853c <_write_r>:
   8853c:	defffd04 	addi	sp,sp,-12
   88540:	dc000015 	stw	r16,0(sp)
   88544:	04000274 	movhi	r16,9
   88548:	84052d04 	addi	r16,r16,5300
   8854c:	dc400115 	stw	r17,4(sp)
   88550:	80000015 	stw	zero,0(r16)
   88554:	2023883a 	mov	r17,r4
   88558:	2809883a 	mov	r4,r5
   8855c:	300b883a 	mov	r5,r6
   88560:	380d883a 	mov	r6,r7
   88564:	dfc00215 	stw	ra,8(sp)
   88568:	008bb2c0 	call	8bb2c <write>
   8856c:	1007883a 	mov	r3,r2
   88570:	00bfffc4 	movi	r2,-1
   88574:	18800626 	beq	r3,r2,88590 <_write_r+0x54>
   88578:	1805883a 	mov	r2,r3
   8857c:	dfc00217 	ldw	ra,8(sp)
   88580:	dc400117 	ldw	r17,4(sp)
   88584:	dc000017 	ldw	r16,0(sp)
   88588:	dec00304 	addi	sp,sp,12
   8858c:	f800283a 	ret
   88590:	80800017 	ldw	r2,0(r16)
   88594:	103ff826 	beq	r2,zero,88578 <_write_r+0x3c>
   88598:	88800015 	stw	r2,0(r17)
   8859c:	1805883a 	mov	r2,r3
   885a0:	dfc00217 	ldw	ra,8(sp)
   885a4:	dc400117 	ldw	r17,4(sp)
   885a8:	dc000017 	ldw	r16,0(sp)
   885ac:	dec00304 	addi	sp,sp,12
   885b0:	f800283a 	ret

000885b4 <_calloc_r>:
   885b4:	defffe04 	addi	sp,sp,-8
   885b8:	dc400015 	stw	r17,0(sp)
   885bc:	2023883a 	mov	r17,r4
   885c0:	2809883a 	mov	r4,r5
   885c4:	300b883a 	mov	r5,r6
   885c8:	dfc00115 	stw	ra,4(sp)
   885cc:	00812180 	call	81218 <__mulsi3>
   885d0:	100b883a 	mov	r5,r2
   885d4:	8809883a 	mov	r4,r17
   885d8:	0085e600 	call	85e60 <_malloc_r>
   885dc:	1023883a 	mov	r17,r2
   885e0:	01c00904 	movi	r7,36
   885e4:	10000d26 	beq	r2,zero,8861c <_calloc_r+0x68>
   885e8:	10ffff17 	ldw	r3,-4(r2)
   885ec:	1009883a 	mov	r4,r2
   885f0:	00bfff04 	movi	r2,-4
   885f4:	1886703a 	and	r3,r3,r2
   885f8:	1887883a 	add	r3,r3,r2
   885fc:	180d883a 	mov	r6,r3
   88600:	000b883a 	mov	r5,zero
   88604:	38c01736 	bltu	r7,r3,88664 <_calloc_r+0xb0>
   88608:	008004c4 	movi	r2,19
   8860c:	10c00836 	bltu	r2,r3,88630 <_calloc_r+0x7c>
   88610:	20000215 	stw	zero,8(r4)
   88614:	20000015 	stw	zero,0(r4)
   88618:	20000115 	stw	zero,4(r4)
   8861c:	8805883a 	mov	r2,r17
   88620:	dfc00117 	ldw	ra,4(sp)
   88624:	dc400017 	ldw	r17,0(sp)
   88628:	dec00204 	addi	sp,sp,8
   8862c:	f800283a 	ret
   88630:	008006c4 	movi	r2,27
   88634:	88000015 	stw	zero,0(r17)
   88638:	88000115 	stw	zero,4(r17)
   8863c:	89000204 	addi	r4,r17,8
   88640:	10fff32e 	bgeu	r2,r3,88610 <_calloc_r+0x5c>
   88644:	88000215 	stw	zero,8(r17)
   88648:	88000315 	stw	zero,12(r17)
   8864c:	89000404 	addi	r4,r17,16
   88650:	19ffef1e 	bne	r3,r7,88610 <_calloc_r+0x5c>
   88654:	89000604 	addi	r4,r17,24
   88658:	88000415 	stw	zero,16(r17)
   8865c:	88000515 	stw	zero,20(r17)
   88660:	003feb06 	br	88610 <_calloc_r+0x5c>
   88664:	00868040 	call	86804 <memset>
   88668:	8805883a 	mov	r2,r17
   8866c:	dfc00117 	ldw	ra,4(sp)
   88670:	dc400017 	ldw	r17,0(sp)
   88674:	dec00204 	addi	sp,sp,8
   88678:	f800283a 	ret

0008867c <_close_r>:
   8867c:	defffd04 	addi	sp,sp,-12
   88680:	dc000015 	stw	r16,0(sp)
   88684:	04000274 	movhi	r16,9
   88688:	84052d04 	addi	r16,r16,5300
   8868c:	dc400115 	stw	r17,4(sp)
   88690:	80000015 	stw	zero,0(r16)
   88694:	2023883a 	mov	r17,r4
   88698:	2809883a 	mov	r4,r5
   8869c:	dfc00215 	stw	ra,8(sp)
   886a0:	008afe00 	call	8afe0 <close>
   886a4:	1007883a 	mov	r3,r2
   886a8:	00bfffc4 	movi	r2,-1
   886ac:	18800626 	beq	r3,r2,886c8 <_close_r+0x4c>
   886b0:	1805883a 	mov	r2,r3
   886b4:	dfc00217 	ldw	ra,8(sp)
   886b8:	dc400117 	ldw	r17,4(sp)
   886bc:	dc000017 	ldw	r16,0(sp)
   886c0:	dec00304 	addi	sp,sp,12
   886c4:	f800283a 	ret
   886c8:	80800017 	ldw	r2,0(r16)
   886cc:	103ff826 	beq	r2,zero,886b0 <_close_r+0x34>
   886d0:	88800015 	stw	r2,0(r17)
   886d4:	1805883a 	mov	r2,r3
   886d8:	dfc00217 	ldw	ra,8(sp)
   886dc:	dc400117 	ldw	r17,4(sp)
   886e0:	dc000017 	ldw	r16,0(sp)
   886e4:	dec00304 	addi	sp,sp,12
   886e8:	f800283a 	ret

000886ec <_fclose_r>:
   886ec:	defffc04 	addi	sp,sp,-16
   886f0:	dc400115 	stw	r17,4(sp)
   886f4:	dc000015 	stw	r16,0(sp)
   886f8:	dfc00315 	stw	ra,12(sp)
   886fc:	dc800215 	stw	r18,8(sp)
   88700:	2821883a 	mov	r16,r5
   88704:	2023883a 	mov	r17,r4
   88708:	28002926 	beq	r5,zero,887b0 <_fclose_r+0xc4>
   8870c:	0084f100 	call	84f10 <__sfp_lock_acquire>
   88710:	88000226 	beq	r17,zero,8871c <_fclose_r+0x30>
   88714:	88800e17 	ldw	r2,56(r17)
   88718:	10002d26 	beq	r2,zero,887d0 <_fclose_r+0xe4>
   8871c:	8080030f 	ldh	r2,12(r16)
   88720:	10002226 	beq	r2,zero,887ac <_fclose_r+0xc0>
   88724:	8809883a 	mov	r4,r17
   88728:	800b883a 	mov	r5,r16
   8872c:	0084c880 	call	84c88 <_fflush_r>
   88730:	1025883a 	mov	r18,r2
   88734:	80800b17 	ldw	r2,44(r16)
   88738:	10000426 	beq	r2,zero,8874c <_fclose_r+0x60>
   8873c:	81400717 	ldw	r5,28(r16)
   88740:	8809883a 	mov	r4,r17
   88744:	103ee83a 	callr	r2
   88748:	10002a16 	blt	r2,zero,887f4 <_fclose_r+0x108>
   8874c:	8080030b 	ldhu	r2,12(r16)
   88750:	1080200c 	andi	r2,r2,128
   88754:	1000231e 	bne	r2,zero,887e4 <_fclose_r+0xf8>
   88758:	81400c17 	ldw	r5,48(r16)
   8875c:	28000526 	beq	r5,zero,88774 <_fclose_r+0x88>
   88760:	80801004 	addi	r2,r16,64
   88764:	28800226 	beq	r5,r2,88770 <_fclose_r+0x84>
   88768:	8809883a 	mov	r4,r17
   8876c:	00852d80 	call	852d8 <_free_r>
   88770:	80000c15 	stw	zero,48(r16)
   88774:	81401117 	ldw	r5,68(r16)
   88778:	28000326 	beq	r5,zero,88788 <_fclose_r+0x9c>
   8877c:	8809883a 	mov	r4,r17
   88780:	00852d80 	call	852d8 <_free_r>
   88784:	80001115 	stw	zero,68(r16)
   88788:	8000030d 	sth	zero,12(r16)
   8878c:	0084f140 	call	84f14 <__sfp_lock_release>
   88790:	9005883a 	mov	r2,r18
   88794:	dfc00317 	ldw	ra,12(sp)
   88798:	dc800217 	ldw	r18,8(sp)
   8879c:	dc400117 	ldw	r17,4(sp)
   887a0:	dc000017 	ldw	r16,0(sp)
   887a4:	dec00404 	addi	sp,sp,16
   887a8:	f800283a 	ret
   887ac:	0084f140 	call	84f14 <__sfp_lock_release>
   887b0:	0025883a 	mov	r18,zero
   887b4:	9005883a 	mov	r2,r18
   887b8:	dfc00317 	ldw	ra,12(sp)
   887bc:	dc800217 	ldw	r18,8(sp)
   887c0:	dc400117 	ldw	r17,4(sp)
   887c4:	dc000017 	ldw	r16,0(sp)
   887c8:	dec00404 	addi	sp,sp,16
   887cc:	f800283a 	ret
   887d0:	8809883a 	mov	r4,r17
   887d4:	0084f200 	call	84f20 <__sinit>
   887d8:	8080030f 	ldh	r2,12(r16)
   887dc:	103fd11e 	bne	r2,zero,88724 <_fclose_r+0x38>
   887e0:	003ff206 	br	887ac <_fclose_r+0xc0>
   887e4:	81400417 	ldw	r5,16(r16)
   887e8:	8809883a 	mov	r4,r17
   887ec:	00852d80 	call	852d8 <_free_r>
   887f0:	003fd906 	br	88758 <_fclose_r+0x6c>
   887f4:	04bfffc4 	movi	r18,-1
   887f8:	003fd406 	br	8874c <_fclose_r+0x60>

000887fc <fclose>:
   887fc:	00800274 	movhi	r2,9
   88800:	10be7f04 	addi	r2,r2,-1540
   88804:	200b883a 	mov	r5,r4
   88808:	11000017 	ldw	r4,0(r2)
   8880c:	00886ec1 	jmpi	886ec <_fclose_r>

00088810 <_fstat_r>:
   88810:	defffd04 	addi	sp,sp,-12
   88814:	dc000015 	stw	r16,0(sp)
   88818:	04000274 	movhi	r16,9
   8881c:	84052d04 	addi	r16,r16,5300
   88820:	dc400115 	stw	r17,4(sp)
   88824:	80000015 	stw	zero,0(r16)
   88828:	2023883a 	mov	r17,r4
   8882c:	2809883a 	mov	r4,r5
   88830:	300b883a 	mov	r5,r6
   88834:	dfc00215 	stw	ra,8(sp)
   88838:	008b16c0 	call	8b16c <fstat>
   8883c:	1007883a 	mov	r3,r2
   88840:	00bfffc4 	movi	r2,-1
   88844:	18800626 	beq	r3,r2,88860 <_fstat_r+0x50>
   88848:	1805883a 	mov	r2,r3
   8884c:	dfc00217 	ldw	ra,8(sp)
   88850:	dc400117 	ldw	r17,4(sp)
   88854:	dc000017 	ldw	r16,0(sp)
   88858:	dec00304 	addi	sp,sp,12
   8885c:	f800283a 	ret
   88860:	80800017 	ldw	r2,0(r16)
   88864:	103ff826 	beq	r2,zero,88848 <_fstat_r+0x38>
   88868:	88800015 	stw	r2,0(r17)
   8886c:	1805883a 	mov	r2,r3
   88870:	dfc00217 	ldw	ra,8(sp)
   88874:	dc400117 	ldw	r17,4(sp)
   88878:	dc000017 	ldw	r16,0(sp)
   8887c:	dec00304 	addi	sp,sp,12
   88880:	f800283a 	ret

00088884 <_isatty_r>:
   88884:	defffd04 	addi	sp,sp,-12
   88888:	dc000015 	stw	r16,0(sp)
   8888c:	04000274 	movhi	r16,9
   88890:	84052d04 	addi	r16,r16,5300
   88894:	dc400115 	stw	r17,4(sp)
   88898:	80000015 	stw	zero,0(r16)
   8889c:	2023883a 	mov	r17,r4
   888a0:	2809883a 	mov	r4,r5
   888a4:	dfc00215 	stw	ra,8(sp)
   888a8:	008b4640 	call	8b464 <isatty>
   888ac:	1007883a 	mov	r3,r2
   888b0:	00bfffc4 	movi	r2,-1
   888b4:	18800626 	beq	r3,r2,888d0 <_isatty_r+0x4c>
   888b8:	1805883a 	mov	r2,r3
   888bc:	dfc00217 	ldw	ra,8(sp)
   888c0:	dc400117 	ldw	r17,4(sp)
   888c4:	dc000017 	ldw	r16,0(sp)
   888c8:	dec00304 	addi	sp,sp,12
   888cc:	f800283a 	ret
   888d0:	80800017 	ldw	r2,0(r16)
   888d4:	103ff826 	beq	r2,zero,888b8 <_isatty_r+0x34>
   888d8:	88800015 	stw	r2,0(r17)
   888dc:	1805883a 	mov	r2,r3
   888e0:	dfc00217 	ldw	ra,8(sp)
   888e4:	dc400117 	ldw	r17,4(sp)
   888e8:	dc000017 	ldw	r16,0(sp)
   888ec:	dec00304 	addi	sp,sp,12
   888f0:	f800283a 	ret

000888f4 <_lseek_r>:
   888f4:	defffd04 	addi	sp,sp,-12
   888f8:	dc000015 	stw	r16,0(sp)
   888fc:	04000274 	movhi	r16,9
   88900:	84052d04 	addi	r16,r16,5300
   88904:	dc400115 	stw	r17,4(sp)
   88908:	80000015 	stw	zero,0(r16)
   8890c:	2023883a 	mov	r17,r4
   88910:	2809883a 	mov	r4,r5
   88914:	300b883a 	mov	r5,r6
   88918:	380d883a 	mov	r6,r7
   8891c:	dfc00215 	stw	ra,8(sp)
   88920:	008b6740 	call	8b674 <lseek>
   88924:	1007883a 	mov	r3,r2
   88928:	00bfffc4 	movi	r2,-1
   8892c:	18800626 	beq	r3,r2,88948 <_lseek_r+0x54>
   88930:	1805883a 	mov	r2,r3
   88934:	dfc00217 	ldw	ra,8(sp)
   88938:	dc400117 	ldw	r17,4(sp)
   8893c:	dc000017 	ldw	r16,0(sp)
   88940:	dec00304 	addi	sp,sp,12
   88944:	f800283a 	ret
   88948:	80800017 	ldw	r2,0(r16)
   8894c:	103ff826 	beq	r2,zero,88930 <_lseek_r+0x3c>
   88950:	88800015 	stw	r2,0(r17)
   88954:	1805883a 	mov	r2,r3
   88958:	dfc00217 	ldw	ra,8(sp)
   8895c:	dc400117 	ldw	r17,4(sp)
   88960:	dc000017 	ldw	r16,0(sp)
   88964:	dec00304 	addi	sp,sp,12
   88968:	f800283a 	ret

0008896c <_read_r>:
   8896c:	defffd04 	addi	sp,sp,-12
   88970:	dc000015 	stw	r16,0(sp)
   88974:	04000274 	movhi	r16,9
   88978:	84052d04 	addi	r16,r16,5300
   8897c:	dc400115 	stw	r17,4(sp)
   88980:	80000015 	stw	zero,0(r16)
   88984:	2023883a 	mov	r17,r4
   88988:	2809883a 	mov	r4,r5
   8898c:	300b883a 	mov	r5,r6
   88990:	380d883a 	mov	r6,r7
   88994:	dfc00215 	stw	ra,8(sp)
   88998:	008b8740 	call	8b874 <read>
   8899c:	1007883a 	mov	r3,r2
   889a0:	00bfffc4 	movi	r2,-1
   889a4:	18800626 	beq	r3,r2,889c0 <_read_r+0x54>
   889a8:	1805883a 	mov	r2,r3
   889ac:	dfc00217 	ldw	ra,8(sp)
   889b0:	dc400117 	ldw	r17,4(sp)
   889b4:	dc000017 	ldw	r16,0(sp)
   889b8:	dec00304 	addi	sp,sp,12
   889bc:	f800283a 	ret
   889c0:	80800017 	ldw	r2,0(r16)
   889c4:	103ff826 	beq	r2,zero,889a8 <_read_r+0x3c>
   889c8:	88800015 	stw	r2,0(r17)
   889cc:	1805883a 	mov	r2,r3
   889d0:	dfc00217 	ldw	ra,8(sp)
   889d4:	dc400117 	ldw	r17,4(sp)
   889d8:	dc000017 	ldw	r16,0(sp)
   889dc:	dec00304 	addi	sp,sp,12
   889e0:	f800283a 	ret

000889e4 <__udivdi3>:
   889e4:	defff104 	addi	sp,sp,-60
   889e8:	0015883a 	mov	r10,zero
   889ec:	2005883a 	mov	r2,r4
   889f0:	3011883a 	mov	r8,r6
   889f4:	df000d15 	stw	fp,52(sp)
   889f8:	dd400a15 	stw	r21,40(sp)
   889fc:	dcc00815 	stw	r19,32(sp)
   88a00:	dfc00e15 	stw	ra,56(sp)
   88a04:	ddc00c15 	stw	r23,48(sp)
   88a08:	dd800b15 	stw	r22,44(sp)
   88a0c:	dd000915 	stw	r20,36(sp)
   88a10:	dc800715 	stw	r18,28(sp)
   88a14:	dc400615 	stw	r17,24(sp)
   88a18:	dc000515 	stw	r16,20(sp)
   88a1c:	da800315 	stw	r10,12(sp)
   88a20:	4027883a 	mov	r19,r8
   88a24:	1039883a 	mov	fp,r2
   88a28:	282b883a 	mov	r21,r5
   88a2c:	da800415 	stw	r10,16(sp)
   88a30:	3800401e 	bne	r7,zero,88b34 <__udivdi3+0x150>
   88a34:	2a006536 	bltu	r5,r8,88bcc <__udivdi3+0x1e8>
   88a38:	4000b526 	beq	r8,zero,88d10 <__udivdi3+0x32c>
   88a3c:	00bfffd4 	movui	r2,65535
   88a40:	14c0ad36 	bltu	r2,r19,88cf8 <__udivdi3+0x314>
   88a44:	00803fc4 	movi	r2,255
   88a48:	14c15e36 	bltu	r2,r19,88fc4 <__udivdi3+0x5e0>
   88a4c:	000b883a 	mov	r5,zero
   88a50:	0005883a 	mov	r2,zero
   88a54:	9884d83a 	srl	r2,r19,r2
   88a58:	01000274 	movhi	r4,9
   88a5c:	2137ab04 	addi	r4,r4,-8532
   88a60:	01800804 	movi	r6,32
   88a64:	1105883a 	add	r2,r2,r4
   88a68:	10c00003 	ldbu	r3,0(r2)
   88a6c:	28c7883a 	add	r3,r5,r3
   88a70:	30e9c83a 	sub	r20,r6,r3
   88a74:	a0010a1e 	bne	r20,zero,88ea0 <__udivdi3+0x4bc>
   88a78:	982ed43a 	srli	r23,r19,16
   88a7c:	acebc83a 	sub	r21,r21,r19
   88a80:	9dbfffcc 	andi	r22,r19,65535
   88a84:	05000044 	movi	r20,1
   88a88:	a809883a 	mov	r4,r21
   88a8c:	b80b883a 	mov	r5,r23
   88a90:	008a9180 	call	8a918 <__udivsi3>
   88a94:	100b883a 	mov	r5,r2
   88a98:	b009883a 	mov	r4,r22
   88a9c:	1021883a 	mov	r16,r2
   88aa0:	00812180 	call	81218 <__mulsi3>
   88aa4:	a809883a 	mov	r4,r21
   88aa8:	b80b883a 	mov	r5,r23
   88aac:	1023883a 	mov	r17,r2
   88ab0:	008a9200 	call	8a920 <__umodsi3>
   88ab4:	1004943a 	slli	r2,r2,16
   88ab8:	e006d43a 	srli	r3,fp,16
   88abc:	10c4b03a 	or	r2,r2,r3
   88ac0:	1440042e 	bgeu	r2,r17,88ad4 <__udivdi3+0xf0>
   88ac4:	14c5883a 	add	r2,r2,r19
   88ac8:	843fffc4 	addi	r16,r16,-1
   88acc:	14c00136 	bltu	r2,r19,88ad4 <__udivdi3+0xf0>
   88ad0:	14415c36 	bltu	r2,r17,89044 <__udivdi3+0x660>
   88ad4:	1463c83a 	sub	r17,r2,r17
   88ad8:	8809883a 	mov	r4,r17
   88adc:	b80b883a 	mov	r5,r23
   88ae0:	008a9180 	call	8a918 <__udivsi3>
   88ae4:	100b883a 	mov	r5,r2
   88ae8:	b009883a 	mov	r4,r22
   88aec:	102b883a 	mov	r21,r2
   88af0:	00812180 	call	81218 <__mulsi3>
   88af4:	8809883a 	mov	r4,r17
   88af8:	b80b883a 	mov	r5,r23
   88afc:	1025883a 	mov	r18,r2
   88b00:	008a9200 	call	8a920 <__umodsi3>
   88b04:	1004943a 	slli	r2,r2,16
   88b08:	e0ffffcc 	andi	r3,fp,65535
   88b0c:	10c4b03a 	or	r2,r2,r3
   88b10:	1480042e 	bgeu	r2,r18,88b24 <__udivdi3+0x140>
   88b14:	9885883a 	add	r2,r19,r2
   88b18:	ad7fffc4 	addi	r21,r21,-1
   88b1c:	14c00136 	bltu	r2,r19,88b24 <__udivdi3+0x140>
   88b20:	14813c36 	bltu	r2,r18,89014 <__udivdi3+0x630>
   88b24:	8004943a 	slli	r2,r16,16
   88b28:	a009883a 	mov	r4,r20
   88b2c:	a884b03a 	or	r2,r21,r2
   88b30:	00001506 	br	88b88 <__udivdi3+0x1a4>
   88b34:	380d883a 	mov	r6,r7
   88b38:	29c06c36 	bltu	r5,r7,88cec <__udivdi3+0x308>
   88b3c:	00bfffd4 	movui	r2,65535
   88b40:	11c06436 	bltu	r2,r7,88cd4 <__udivdi3+0x2f0>
   88b44:	00803fc4 	movi	r2,255
   88b48:	11c11836 	bltu	r2,r7,88fac <__udivdi3+0x5c8>
   88b4c:	000b883a 	mov	r5,zero
   88b50:	0005883a 	mov	r2,zero
   88b54:	3084d83a 	srl	r2,r6,r2
   88b58:	01000274 	movhi	r4,9
   88b5c:	2137ab04 	addi	r4,r4,-8532
   88b60:	01c00804 	movi	r7,32
   88b64:	1105883a 	add	r2,r2,r4
   88b68:	10c00003 	ldbu	r3,0(r2)
   88b6c:	28c7883a 	add	r3,r5,r3
   88b70:	38edc83a 	sub	r22,r7,r3
   88b74:	b000731e 	bne	r22,zero,88d44 <__udivdi3+0x360>
   88b78:	35400136 	bltu	r6,r21,88b80 <__udivdi3+0x19c>
   88b7c:	e4c05b36 	bltu	fp,r19,88cec <__udivdi3+0x308>
   88b80:	00800044 	movi	r2,1
   88b84:	0009883a 	mov	r4,zero
   88b88:	d8800315 	stw	r2,12(sp)
   88b8c:	d9400317 	ldw	r5,12(sp)
   88b90:	d9000415 	stw	r4,16(sp)
   88b94:	2007883a 	mov	r3,r4
   88b98:	2805883a 	mov	r2,r5
   88b9c:	dfc00e17 	ldw	ra,56(sp)
   88ba0:	df000d17 	ldw	fp,52(sp)
   88ba4:	ddc00c17 	ldw	r23,48(sp)
   88ba8:	dd800b17 	ldw	r22,44(sp)
   88bac:	dd400a17 	ldw	r21,40(sp)
   88bb0:	dd000917 	ldw	r20,36(sp)
   88bb4:	dcc00817 	ldw	r19,32(sp)
   88bb8:	dc800717 	ldw	r18,28(sp)
   88bbc:	dc400617 	ldw	r17,24(sp)
   88bc0:	dc000517 	ldw	r16,20(sp)
   88bc4:	dec00f04 	addi	sp,sp,60
   88bc8:	f800283a 	ret
   88bcc:	00bfffd4 	movui	r2,65535
   88bd0:	12005636 	bltu	r2,r8,88d2c <__udivdi3+0x348>
   88bd4:	00803fc4 	movi	r2,255
   88bd8:	12010036 	bltu	r2,r8,88fdc <__udivdi3+0x5f8>
   88bdc:	000b883a 	mov	r5,zero
   88be0:	0005883a 	mov	r2,zero
   88be4:	9884d83a 	srl	r2,r19,r2
   88be8:	01000274 	movhi	r4,9
   88bec:	2137ab04 	addi	r4,r4,-8532
   88bf0:	01800804 	movi	r6,32
   88bf4:	1105883a 	add	r2,r2,r4
   88bf8:	10c00003 	ldbu	r3,0(r2)
   88bfc:	28c7883a 	add	r3,r5,r3
   88c00:	30cbc83a 	sub	r5,r6,r3
   88c04:	28000626 	beq	r5,zero,88c20 <__udivdi3+0x23c>
   88c08:	3145c83a 	sub	r2,r6,r5
   88c0c:	e084d83a 	srl	r2,fp,r2
   88c10:	a946983a 	sll	r3,r21,r5
   88c14:	e178983a 	sll	fp,fp,r5
   88c18:	9966983a 	sll	r19,r19,r5
   88c1c:	18aab03a 	or	r21,r3,r2
   88c20:	982ed43a 	srli	r23,r19,16
   88c24:	a809883a 	mov	r4,r21
   88c28:	9cbfffcc 	andi	r18,r19,65535
   88c2c:	b80b883a 	mov	r5,r23
   88c30:	008a9180 	call	8a918 <__udivsi3>
   88c34:	100b883a 	mov	r5,r2
   88c38:	9009883a 	mov	r4,r18
   88c3c:	1021883a 	mov	r16,r2
   88c40:	00812180 	call	81218 <__mulsi3>
   88c44:	a809883a 	mov	r4,r21
   88c48:	b80b883a 	mov	r5,r23
   88c4c:	1023883a 	mov	r17,r2
   88c50:	008a9200 	call	8a920 <__umodsi3>
   88c54:	1004943a 	slli	r2,r2,16
   88c58:	e006d43a 	srli	r3,fp,16
   88c5c:	10c4b03a 	or	r2,r2,r3
   88c60:	1440042e 	bgeu	r2,r17,88c74 <__udivdi3+0x290>
   88c64:	14c5883a 	add	r2,r2,r19
   88c68:	843fffc4 	addi	r16,r16,-1
   88c6c:	14c00136 	bltu	r2,r19,88c74 <__udivdi3+0x290>
   88c70:	1440ea36 	bltu	r2,r17,8901c <__udivdi3+0x638>
   88c74:	1463c83a 	sub	r17,r2,r17
   88c78:	8809883a 	mov	r4,r17
   88c7c:	b80b883a 	mov	r5,r23
   88c80:	008a9180 	call	8a918 <__udivsi3>
   88c84:	100b883a 	mov	r5,r2
   88c88:	9009883a 	mov	r4,r18
   88c8c:	102b883a 	mov	r21,r2
   88c90:	00812180 	call	81218 <__mulsi3>
   88c94:	8809883a 	mov	r4,r17
   88c98:	b80b883a 	mov	r5,r23
   88c9c:	1025883a 	mov	r18,r2
   88ca0:	008a9200 	call	8a920 <__umodsi3>
   88ca4:	1004943a 	slli	r2,r2,16
   88ca8:	e0ffffcc 	andi	r3,fp,65535
   88cac:	10c4b03a 	or	r2,r2,r3
   88cb0:	1480042e 	bgeu	r2,r18,88cc4 <__udivdi3+0x2e0>
   88cb4:	9885883a 	add	r2,r19,r2
   88cb8:	ad7fffc4 	addi	r21,r21,-1
   88cbc:	14c00136 	bltu	r2,r19,88cc4 <__udivdi3+0x2e0>
   88cc0:	1480d936 	bltu	r2,r18,89028 <__udivdi3+0x644>
   88cc4:	8004943a 	slli	r2,r16,16
   88cc8:	0009883a 	mov	r4,zero
   88ccc:	a884b03a 	or	r2,r21,r2
   88cd0:	003fad06 	br	88b88 <__udivdi3+0x1a4>
   88cd4:	00804034 	movhi	r2,256
   88cd8:	10bfffc4 	addi	r2,r2,-1
   88cdc:	11c0b636 	bltu	r2,r7,88fb8 <__udivdi3+0x5d4>
   88ce0:	01400404 	movi	r5,16
   88ce4:	2805883a 	mov	r2,r5
   88ce8:	003f9a06 	br	88b54 <__udivdi3+0x170>
   88cec:	0005883a 	mov	r2,zero
   88cf0:	0009883a 	mov	r4,zero
   88cf4:	003fa406 	br	88b88 <__udivdi3+0x1a4>
   88cf8:	00804034 	movhi	r2,256
   88cfc:	10bfffc4 	addi	r2,r2,-1
   88d00:	14c0b336 	bltu	r2,r19,88fd0 <__udivdi3+0x5ec>
   88d04:	01400404 	movi	r5,16
   88d08:	2805883a 	mov	r2,r5
   88d0c:	003f5106 	br	88a54 <__udivdi3+0x70>
   88d10:	01000044 	movi	r4,1
   88d14:	000b883a 	mov	r5,zero
   88d18:	008a9180 	call	8a918 <__udivsi3>
   88d1c:	1027883a 	mov	r19,r2
   88d20:	00bfffd4 	movui	r2,65535
   88d24:	14fff436 	bltu	r2,r19,88cf8 <__udivdi3+0x314>
   88d28:	003f4606 	br	88a44 <__udivdi3+0x60>
   88d2c:	00804034 	movhi	r2,256
   88d30:	10bfffc4 	addi	r2,r2,-1
   88d34:	1200ac36 	bltu	r2,r8,88fe8 <__udivdi3+0x604>
   88d38:	01400404 	movi	r5,16
   88d3c:	2805883a 	mov	r2,r5
   88d40:	003fa806 	br	88be4 <__udivdi3+0x200>
   88d44:	3d85c83a 	sub	r2,r7,r22
   88d48:	3588983a 	sll	r4,r6,r22
   88d4c:	9886d83a 	srl	r3,r19,r2
   88d50:	a8a2d83a 	srl	r17,r21,r2
   88d54:	e084d83a 	srl	r2,fp,r2
   88d58:	20eeb03a 	or	r23,r4,r3
   88d5c:	b824d43a 	srli	r18,r23,16
   88d60:	ad86983a 	sll	r3,r21,r22
   88d64:	8809883a 	mov	r4,r17
   88d68:	900b883a 	mov	r5,r18
   88d6c:	1886b03a 	or	r3,r3,r2
   88d70:	d8c00115 	stw	r3,4(sp)
   88d74:	bc3fffcc 	andi	r16,r23,65535
   88d78:	008a9180 	call	8a918 <__udivsi3>
   88d7c:	100b883a 	mov	r5,r2
   88d80:	8009883a 	mov	r4,r16
   88d84:	1029883a 	mov	r20,r2
   88d88:	00812180 	call	81218 <__mulsi3>
   88d8c:	900b883a 	mov	r5,r18
   88d90:	8809883a 	mov	r4,r17
   88d94:	102b883a 	mov	r21,r2
   88d98:	008a9200 	call	8a920 <__umodsi3>
   88d9c:	d9400117 	ldw	r5,4(sp)
   88da0:	1004943a 	slli	r2,r2,16
   88da4:	9da6983a 	sll	r19,r19,r22
   88da8:	2806d43a 	srli	r3,r5,16
   88dac:	10c4b03a 	or	r2,r2,r3
   88db0:	1540032e 	bgeu	r2,r21,88dc0 <__udivdi3+0x3dc>
   88db4:	15c5883a 	add	r2,r2,r23
   88db8:	a53fffc4 	addi	r20,r20,-1
   88dbc:	15c0912e 	bgeu	r2,r23,89004 <__udivdi3+0x620>
   88dc0:	1563c83a 	sub	r17,r2,r21
   88dc4:	8809883a 	mov	r4,r17
   88dc8:	900b883a 	mov	r5,r18
   88dcc:	008a9180 	call	8a918 <__udivsi3>
   88dd0:	100b883a 	mov	r5,r2
   88dd4:	8009883a 	mov	r4,r16
   88dd8:	102b883a 	mov	r21,r2
   88ddc:	00812180 	call	81218 <__mulsi3>
   88de0:	8809883a 	mov	r4,r17
   88de4:	900b883a 	mov	r5,r18
   88de8:	1021883a 	mov	r16,r2
   88dec:	008a9200 	call	8a920 <__umodsi3>
   88df0:	da800117 	ldw	r10,4(sp)
   88df4:	1004943a 	slli	r2,r2,16
   88df8:	50ffffcc 	andi	r3,r10,65535
   88dfc:	10c6b03a 	or	r3,r2,r3
   88e00:	1c00032e 	bgeu	r3,r16,88e10 <__udivdi3+0x42c>
   88e04:	1dc7883a 	add	r3,r3,r23
   88e08:	ad7fffc4 	addi	r21,r21,-1
   88e0c:	1dc0792e 	bgeu	r3,r23,88ff4 <__udivdi3+0x610>
   88e10:	a004943a 	slli	r2,r20,16
   88e14:	982ed43a 	srli	r23,r19,16
   88e18:	9cffffcc 	andi	r19,r19,65535
   88e1c:	a8a4b03a 	or	r18,r21,r2
   88e20:	947fffcc 	andi	r17,r18,65535
   88e24:	902ad43a 	srli	r21,r18,16
   88e28:	8809883a 	mov	r4,r17
   88e2c:	980b883a 	mov	r5,r19
   88e30:	1c21c83a 	sub	r16,r3,r16
   88e34:	00812180 	call	81218 <__mulsi3>
   88e38:	8809883a 	mov	r4,r17
   88e3c:	b80b883a 	mov	r5,r23
   88e40:	1029883a 	mov	r20,r2
   88e44:	00812180 	call	81218 <__mulsi3>
   88e48:	980b883a 	mov	r5,r19
   88e4c:	a809883a 	mov	r4,r21
   88e50:	1023883a 	mov	r17,r2
   88e54:	00812180 	call	81218 <__mulsi3>
   88e58:	a809883a 	mov	r4,r21
   88e5c:	b80b883a 	mov	r5,r23
   88e60:	1027883a 	mov	r19,r2
   88e64:	00812180 	call	81218 <__mulsi3>
   88e68:	1009883a 	mov	r4,r2
   88e6c:	a004d43a 	srli	r2,r20,16
   88e70:	8ce3883a 	add	r17,r17,r19
   88e74:	1447883a 	add	r3,r2,r17
   88e78:	1cc0022e 	bgeu	r3,r19,88e84 <__udivdi3+0x4a0>
   88e7c:	00800074 	movhi	r2,1
   88e80:	2089883a 	add	r4,r4,r2
   88e84:	1804d43a 	srli	r2,r3,16
   88e88:	2085883a 	add	r2,r4,r2
   88e8c:	80804436 	bltu	r16,r2,88fa0 <__udivdi3+0x5bc>
   88e90:	80803e26 	beq	r16,r2,88f8c <__udivdi3+0x5a8>
   88e94:	9005883a 	mov	r2,r18
   88e98:	0009883a 	mov	r4,zero
   88e9c:	003f3a06 	br	88b88 <__udivdi3+0x1a4>
   88ea0:	9d26983a 	sll	r19,r19,r20
   88ea4:	3505c83a 	sub	r2,r6,r20
   88ea8:	a8a2d83a 	srl	r17,r21,r2
   88eac:	982ed43a 	srli	r23,r19,16
   88eb0:	e084d83a 	srl	r2,fp,r2
   88eb4:	ad06983a 	sll	r3,r21,r20
   88eb8:	8809883a 	mov	r4,r17
   88ebc:	b80b883a 	mov	r5,r23
   88ec0:	1886b03a 	or	r3,r3,r2
   88ec4:	d8c00015 	stw	r3,0(sp)
   88ec8:	9dbfffcc 	andi	r22,r19,65535
   88ecc:	008a9180 	call	8a918 <__udivsi3>
   88ed0:	100b883a 	mov	r5,r2
   88ed4:	b009883a 	mov	r4,r22
   88ed8:	d8800215 	stw	r2,8(sp)
   88edc:	00812180 	call	81218 <__mulsi3>
   88ee0:	8809883a 	mov	r4,r17
   88ee4:	b80b883a 	mov	r5,r23
   88ee8:	102b883a 	mov	r21,r2
   88eec:	008a9200 	call	8a920 <__umodsi3>
   88ef0:	d9000017 	ldw	r4,0(sp)
   88ef4:	1004943a 	slli	r2,r2,16
   88ef8:	2006d43a 	srli	r3,r4,16
   88efc:	10c4b03a 	or	r2,r2,r3
   88f00:	1540052e 	bgeu	r2,r21,88f18 <__udivdi3+0x534>
   88f04:	d9400217 	ldw	r5,8(sp)
   88f08:	14c5883a 	add	r2,r2,r19
   88f0c:	297fffc4 	addi	r5,r5,-1
   88f10:	d9400215 	stw	r5,8(sp)
   88f14:	14c0462e 	bgeu	r2,r19,89030 <__udivdi3+0x64c>
   88f18:	1563c83a 	sub	r17,r2,r21
   88f1c:	8809883a 	mov	r4,r17
   88f20:	b80b883a 	mov	r5,r23
   88f24:	008a9180 	call	8a918 <__udivsi3>
   88f28:	100b883a 	mov	r5,r2
   88f2c:	b009883a 	mov	r4,r22
   88f30:	1025883a 	mov	r18,r2
   88f34:	00812180 	call	81218 <__mulsi3>
   88f38:	8809883a 	mov	r4,r17
   88f3c:	b80b883a 	mov	r5,r23
   88f40:	1021883a 	mov	r16,r2
   88f44:	008a9200 	call	8a920 <__umodsi3>
   88f48:	da800017 	ldw	r10,0(sp)
   88f4c:	1004943a 	slli	r2,r2,16
   88f50:	50ffffcc 	andi	r3,r10,65535
   88f54:	10c6b03a 	or	r3,r2,r3
   88f58:	1c00062e 	bgeu	r3,r16,88f74 <__udivdi3+0x590>
   88f5c:	1cc7883a 	add	r3,r3,r19
   88f60:	94bfffc4 	addi	r18,r18,-1
   88f64:	1cc00336 	bltu	r3,r19,88f74 <__udivdi3+0x590>
   88f68:	1c00022e 	bgeu	r3,r16,88f74 <__udivdi3+0x590>
   88f6c:	94bfffc4 	addi	r18,r18,-1
   88f70:	1cc7883a 	add	r3,r3,r19
   88f74:	d9000217 	ldw	r4,8(sp)
   88f78:	e538983a 	sll	fp,fp,r20
   88f7c:	1c2bc83a 	sub	r21,r3,r16
   88f80:	2004943a 	slli	r2,r4,16
   88f84:	90a8b03a 	or	r20,r18,r2
   88f88:	003ebf06 	br	88a88 <__udivdi3+0xa4>
   88f8c:	1804943a 	slli	r2,r3,16
   88f90:	e588983a 	sll	r4,fp,r22
   88f94:	a0ffffcc 	andi	r3,r20,65535
   88f98:	10c5883a 	add	r2,r2,r3
   88f9c:	20bfbd2e 	bgeu	r4,r2,88e94 <__udivdi3+0x4b0>
   88fa0:	90bfffc4 	addi	r2,r18,-1
   88fa4:	0009883a 	mov	r4,zero
   88fa8:	003ef706 	br	88b88 <__udivdi3+0x1a4>
   88fac:	01400204 	movi	r5,8
   88fb0:	2805883a 	mov	r2,r5
   88fb4:	003ee706 	br	88b54 <__udivdi3+0x170>
   88fb8:	01400604 	movi	r5,24
   88fbc:	2805883a 	mov	r2,r5
   88fc0:	003ee406 	br	88b54 <__udivdi3+0x170>
   88fc4:	01400204 	movi	r5,8
   88fc8:	2805883a 	mov	r2,r5
   88fcc:	003ea106 	br	88a54 <__udivdi3+0x70>
   88fd0:	01400604 	movi	r5,24
   88fd4:	2805883a 	mov	r2,r5
   88fd8:	003e9e06 	br	88a54 <__udivdi3+0x70>
   88fdc:	01400204 	movi	r5,8
   88fe0:	2805883a 	mov	r2,r5
   88fe4:	003eff06 	br	88be4 <__udivdi3+0x200>
   88fe8:	01400604 	movi	r5,24
   88fec:	2805883a 	mov	r2,r5
   88ff0:	003efc06 	br	88be4 <__udivdi3+0x200>
   88ff4:	1c3f862e 	bgeu	r3,r16,88e10 <__udivdi3+0x42c>
   88ff8:	1dc7883a 	add	r3,r3,r23
   88ffc:	ad7fffc4 	addi	r21,r21,-1
   89000:	003f8306 	br	88e10 <__udivdi3+0x42c>
   89004:	157f6e2e 	bgeu	r2,r21,88dc0 <__udivdi3+0x3dc>
   89008:	a53fffc4 	addi	r20,r20,-1
   8900c:	15c5883a 	add	r2,r2,r23
   89010:	003f6b06 	br	88dc0 <__udivdi3+0x3dc>
   89014:	ad7fffc4 	addi	r21,r21,-1
   89018:	003ec206 	br	88b24 <__udivdi3+0x140>
   8901c:	843fffc4 	addi	r16,r16,-1
   89020:	14c5883a 	add	r2,r2,r19
   89024:	003f1306 	br	88c74 <__udivdi3+0x290>
   89028:	ad7fffc4 	addi	r21,r21,-1
   8902c:	003f2506 	br	88cc4 <__udivdi3+0x2e0>
   89030:	157fb92e 	bgeu	r2,r21,88f18 <__udivdi3+0x534>
   89034:	297fffc4 	addi	r5,r5,-1
   89038:	14c5883a 	add	r2,r2,r19
   8903c:	d9400215 	stw	r5,8(sp)
   89040:	003fb506 	br	88f18 <__udivdi3+0x534>
   89044:	843fffc4 	addi	r16,r16,-1
   89048:	14c5883a 	add	r2,r2,r19
   8904c:	003ea106 	br	88ad4 <__udivdi3+0xf0>

00089050 <__umoddi3>:
   89050:	defff004 	addi	sp,sp,-64
   89054:	3011883a 	mov	r8,r6
   89058:	000d883a 	mov	r6,zero
   8905c:	dd400b15 	stw	r21,44(sp)
   89060:	dcc00915 	stw	r19,36(sp)
   89064:	dc000615 	stw	r16,24(sp)
   89068:	dfc00f15 	stw	ra,60(sp)
   8906c:	df000e15 	stw	fp,56(sp)
   89070:	ddc00d15 	stw	r23,52(sp)
   89074:	dd800c15 	stw	r22,48(sp)
   89078:	dd000a15 	stw	r20,40(sp)
   8907c:	dc800815 	stw	r18,32(sp)
   89080:	dc400715 	stw	r17,28(sp)
   89084:	2817883a 	mov	r11,r5
   89088:	d9800415 	stw	r6,16(sp)
   8908c:	4027883a 	mov	r19,r8
   89090:	d9800515 	stw	r6,20(sp)
   89094:	2021883a 	mov	r16,r4
   89098:	282b883a 	mov	r21,r5
   8909c:	38002c1e 	bne	r7,zero,89150 <__umoddi3+0x100>
   890a0:	2a005636 	bltu	r5,r8,891fc <__umoddi3+0x1ac>
   890a4:	40009a26 	beq	r8,zero,89310 <__umoddi3+0x2c0>
   890a8:	00bfffd4 	movui	r2,65535
   890ac:	14c09236 	bltu	r2,r19,892f8 <__umoddi3+0x2a8>
   890b0:	00803fc4 	movi	r2,255
   890b4:	14c15c36 	bltu	r2,r19,89628 <__umoddi3+0x5d8>
   890b8:	000b883a 	mov	r5,zero
   890bc:	0005883a 	mov	r2,zero
   890c0:	9884d83a 	srl	r2,r19,r2
   890c4:	01000274 	movhi	r4,9
   890c8:	2137ab04 	addi	r4,r4,-8532
   890cc:	01800804 	movi	r6,32
   890d0:	1105883a 	add	r2,r2,r4
   890d4:	10c00003 	ldbu	r3,0(r2)
   890d8:	28c7883a 	add	r3,r5,r3
   890dc:	30e5c83a 	sub	r18,r6,r3
   890e0:	9000a41e 	bne	r18,zero,89374 <__umoddi3+0x324>
   890e4:	982ed43a 	srli	r23,r19,16
   890e8:	acebc83a 	sub	r21,r21,r19
   890ec:	9d3fffcc 	andi	r20,r19,65535
   890f0:	002d883a 	mov	r22,zero
   890f4:	a809883a 	mov	r4,r21
   890f8:	b80b883a 	mov	r5,r23
   890fc:	008a9180 	call	8a918 <__udivsi3>
   89100:	100b883a 	mov	r5,r2
   89104:	a009883a 	mov	r4,r20
   89108:	00812180 	call	81218 <__mulsi3>
   8910c:	a809883a 	mov	r4,r21
   89110:	b80b883a 	mov	r5,r23
   89114:	1023883a 	mov	r17,r2
   89118:	008a9200 	call	8a920 <__umodsi3>
   8911c:	1004943a 	slli	r2,r2,16
   89120:	8006d43a 	srli	r3,r16,16
   89124:	10c4b03a 	or	r2,r2,r3
   89128:	1440032e 	bgeu	r2,r17,89138 <__umoddi3+0xe8>
   8912c:	14c5883a 	add	r2,r2,r19
   89130:	14c00136 	bltu	r2,r19,89138 <__umoddi3+0xe8>
   89134:	14415836 	bltu	r2,r17,89698 <__umoddi3+0x648>
   89138:	1463c83a 	sub	r17,r2,r17
   8913c:	8809883a 	mov	r4,r17
   89140:	b80b883a 	mov	r5,r23
   89144:	008a9180 	call	8a918 <__udivsi3>
   89148:	a009883a 	mov	r4,r20
   8914c:	00005306 	br	8929c <__umoddi3+0x24c>
   89150:	380d883a 	mov	r6,r7
   89154:	29c0132e 	bgeu	r5,r7,891a4 <__umoddi3+0x154>
   89158:	d9000415 	stw	r4,16(sp)
   8915c:	d9400515 	stw	r5,20(sp)
   89160:	d9400417 	ldw	r5,16(sp)
   89164:	5813883a 	mov	r9,r11
   89168:	2811883a 	mov	r8,r5
   8916c:	4005883a 	mov	r2,r8
   89170:	4807883a 	mov	r3,r9
   89174:	dfc00f17 	ldw	ra,60(sp)
   89178:	df000e17 	ldw	fp,56(sp)
   8917c:	ddc00d17 	ldw	r23,52(sp)
   89180:	dd800c17 	ldw	r22,48(sp)
   89184:	dd400b17 	ldw	r21,44(sp)
   89188:	dd000a17 	ldw	r20,40(sp)
   8918c:	dcc00917 	ldw	r19,36(sp)
   89190:	dc800817 	ldw	r18,32(sp)
   89194:	dc400717 	ldw	r17,28(sp)
   89198:	dc000617 	ldw	r16,24(sp)
   8919c:	dec01004 	addi	sp,sp,64
   891a0:	f800283a 	ret
   891a4:	00bfffd4 	movui	r2,65535
   891a8:	11c06636 	bltu	r2,r7,89344 <__umoddi3+0x2f4>
   891ac:	00803fc4 	movi	r2,255
   891b0:	11c12036 	bltu	r2,r7,89634 <__umoddi3+0x5e4>
   891b4:	000b883a 	mov	r5,zero
   891b8:	0005883a 	mov	r2,zero
   891bc:	3084d83a 	srl	r2,r6,r2
   891c0:	01000274 	movhi	r4,9
   891c4:	2137ab04 	addi	r4,r4,-8532
   891c8:	01c00804 	movi	r7,32
   891cc:	1105883a 	add	r2,r2,r4
   891d0:	10c00003 	ldbu	r3,0(r2)
   891d4:	28c7883a 	add	r3,r5,r3
   891d8:	38e5c83a 	sub	r18,r7,r3
   891dc:	9000941e 	bne	r18,zero,89430 <__umoddi3+0x3e0>
   891e0:	35405e36 	bltu	r6,r21,8935c <__umoddi3+0x30c>
   891e4:	84c05d2e 	bgeu	r16,r19,8935c <__umoddi3+0x30c>
   891e8:	8011883a 	mov	r8,r16
   891ec:	a813883a 	mov	r9,r21
   891f0:	dc000415 	stw	r16,16(sp)
   891f4:	dd400515 	stw	r21,20(sp)
   891f8:	003fdc06 	br	8916c <__umoddi3+0x11c>
   891fc:	00bfffd4 	movui	r2,65535
   89200:	12004a36 	bltu	r2,r8,8932c <__umoddi3+0x2dc>
   89204:	00803fc4 	movi	r2,255
   89208:	12010d36 	bltu	r2,r8,89640 <__umoddi3+0x5f0>
   8920c:	000b883a 	mov	r5,zero
   89210:	0005883a 	mov	r2,zero
   89214:	9884d83a 	srl	r2,r19,r2
   89218:	01000274 	movhi	r4,9
   8921c:	2137ab04 	addi	r4,r4,-8532
   89220:	01800804 	movi	r6,32
   89224:	1105883a 	add	r2,r2,r4
   89228:	10c00003 	ldbu	r3,0(r2)
   8922c:	28c7883a 	add	r3,r5,r3
   89230:	30c7c83a 	sub	r3,r6,r3
   89234:	1800dc1e 	bne	r3,zero,895a8 <__umoddi3+0x558>
   89238:	002d883a 	mov	r22,zero
   8923c:	982ed43a 	srli	r23,r19,16
   89240:	a809883a 	mov	r4,r21
   89244:	9cbfffcc 	andi	r18,r19,65535
   89248:	b80b883a 	mov	r5,r23
   8924c:	008a9180 	call	8a918 <__udivsi3>
   89250:	100b883a 	mov	r5,r2
   89254:	9009883a 	mov	r4,r18
   89258:	00812180 	call	81218 <__mulsi3>
   8925c:	a809883a 	mov	r4,r21
   89260:	b80b883a 	mov	r5,r23
   89264:	1023883a 	mov	r17,r2
   89268:	008a9200 	call	8a920 <__umodsi3>
   8926c:	1004943a 	slli	r2,r2,16
   89270:	8006d43a 	srli	r3,r16,16
   89274:	10c4b03a 	or	r2,r2,r3
   89278:	1440032e 	bgeu	r2,r17,89288 <__umoddi3+0x238>
   8927c:	14c5883a 	add	r2,r2,r19
   89280:	14c00136 	bltu	r2,r19,89288 <__umoddi3+0x238>
   89284:	14410236 	bltu	r2,r17,89690 <__umoddi3+0x640>
   89288:	1463c83a 	sub	r17,r2,r17
   8928c:	8809883a 	mov	r4,r17
   89290:	b80b883a 	mov	r5,r23
   89294:	008a9180 	call	8a918 <__udivsi3>
   89298:	9009883a 	mov	r4,r18
   8929c:	100b883a 	mov	r5,r2
   892a0:	00812180 	call	81218 <__mulsi3>
   892a4:	8809883a 	mov	r4,r17
   892a8:	b80b883a 	mov	r5,r23
   892ac:	102b883a 	mov	r21,r2
   892b0:	008a9200 	call	8a920 <__umodsi3>
   892b4:	1004943a 	slli	r2,r2,16
   892b8:	80ffffcc 	andi	r3,r16,65535
   892bc:	10c4b03a 	or	r2,r2,r3
   892c0:	1540042e 	bgeu	r2,r21,892d4 <__umoddi3+0x284>
   892c4:	14c5883a 	add	r2,r2,r19
   892c8:	14c00236 	bltu	r2,r19,892d4 <__umoddi3+0x284>
   892cc:	1540012e 	bgeu	r2,r21,892d4 <__umoddi3+0x284>
   892d0:	14c5883a 	add	r2,r2,r19
   892d4:	1545c83a 	sub	r2,r2,r21
   892d8:	1584d83a 	srl	r2,r2,r22
   892dc:	0013883a 	mov	r9,zero
   892e0:	d8800415 	stw	r2,16(sp)
   892e4:	d8c00417 	ldw	r3,16(sp)
   892e8:	0005883a 	mov	r2,zero
   892ec:	d8800515 	stw	r2,20(sp)
   892f0:	1811883a 	mov	r8,r3
   892f4:	003f9d06 	br	8916c <__umoddi3+0x11c>
   892f8:	00804034 	movhi	r2,256
   892fc:	10bfffc4 	addi	r2,r2,-1
   89300:	14c0c636 	bltu	r2,r19,8961c <__umoddi3+0x5cc>
   89304:	01400404 	movi	r5,16
   89308:	2805883a 	mov	r2,r5
   8930c:	003f6c06 	br	890c0 <__umoddi3+0x70>
   89310:	01000044 	movi	r4,1
   89314:	000b883a 	mov	r5,zero
   89318:	008a9180 	call	8a918 <__udivsi3>
   8931c:	1027883a 	mov	r19,r2
   89320:	00bfffd4 	movui	r2,65535
   89324:	14fff436 	bltu	r2,r19,892f8 <__umoddi3+0x2a8>
   89328:	003f6106 	br	890b0 <__umoddi3+0x60>
   8932c:	00804034 	movhi	r2,256
   89330:	10bfffc4 	addi	r2,r2,-1
   89334:	1200c536 	bltu	r2,r8,8964c <__umoddi3+0x5fc>
   89338:	01400404 	movi	r5,16
   8933c:	2805883a 	mov	r2,r5
   89340:	003fb406 	br	89214 <__umoddi3+0x1c4>
   89344:	00804034 	movhi	r2,256
   89348:	10bfffc4 	addi	r2,r2,-1
   8934c:	11c0c236 	bltu	r2,r7,89658 <__umoddi3+0x608>
   89350:	01400404 	movi	r5,16
   89354:	2805883a 	mov	r2,r5
   89358:	003f9806 	br	891bc <__umoddi3+0x16c>
   8935c:	84c9c83a 	sub	r4,r16,r19
   89360:	8105803a 	cmpltu	r2,r16,r4
   89364:	a987c83a 	sub	r3,r21,r6
   89368:	18abc83a 	sub	r21,r3,r2
   8936c:	2021883a 	mov	r16,r4
   89370:	003f9d06 	br	891e8 <__umoddi3+0x198>
   89374:	9ca6983a 	sll	r19,r19,r18
   89378:	3485c83a 	sub	r2,r6,r18
   8937c:	a8a2d83a 	srl	r17,r21,r2
   89380:	982ed43a 	srli	r23,r19,16
   89384:	ac86983a 	sll	r3,r21,r18
   89388:	8084d83a 	srl	r2,r16,r2
   8938c:	8809883a 	mov	r4,r17
   89390:	b80b883a 	mov	r5,r23
   89394:	18b8b03a 	or	fp,r3,r2
   89398:	9d3fffcc 	andi	r20,r19,65535
   8939c:	008a9180 	call	8a918 <__udivsi3>
   893a0:	100b883a 	mov	r5,r2
   893a4:	a009883a 	mov	r4,r20
   893a8:	00812180 	call	81218 <__mulsi3>
   893ac:	8809883a 	mov	r4,r17
   893b0:	b80b883a 	mov	r5,r23
   893b4:	102b883a 	mov	r21,r2
   893b8:	008a9200 	call	8a920 <__umodsi3>
   893bc:	1004943a 	slli	r2,r2,16
   893c0:	e006d43a 	srli	r3,fp,16
   893c4:	902d883a 	mov	r22,r18
   893c8:	10c4b03a 	or	r2,r2,r3
   893cc:	1540022e 	bgeu	r2,r21,893d8 <__umoddi3+0x388>
   893d0:	14c5883a 	add	r2,r2,r19
   893d4:	14c0ab2e 	bgeu	r2,r19,89684 <__umoddi3+0x634>
   893d8:	1563c83a 	sub	r17,r2,r21
   893dc:	8809883a 	mov	r4,r17
   893e0:	b80b883a 	mov	r5,r23
   893e4:	008a9180 	call	8a918 <__udivsi3>
   893e8:	100b883a 	mov	r5,r2
   893ec:	a009883a 	mov	r4,r20
   893f0:	00812180 	call	81218 <__mulsi3>
   893f4:	8809883a 	mov	r4,r17
   893f8:	b80b883a 	mov	r5,r23
   893fc:	102b883a 	mov	r21,r2
   89400:	008a9200 	call	8a920 <__umodsi3>
   89404:	1004943a 	slli	r2,r2,16
   89408:	e0ffffcc 	andi	r3,fp,65535
   8940c:	10c4b03a 	or	r2,r2,r3
   89410:	1540042e 	bgeu	r2,r21,89424 <__umoddi3+0x3d4>
   89414:	14c5883a 	add	r2,r2,r19
   89418:	14c00236 	bltu	r2,r19,89424 <__umoddi3+0x3d4>
   8941c:	1540012e 	bgeu	r2,r21,89424 <__umoddi3+0x3d4>
   89420:	14c5883a 	add	r2,r2,r19
   89424:	84a0983a 	sll	r16,r16,r18
   89428:	156bc83a 	sub	r21,r2,r21
   8942c:	003f3106 	br	890f4 <__umoddi3+0xa4>
   89430:	3c8fc83a 	sub	r7,r7,r18
   89434:	3486983a 	sll	r3,r6,r18
   89438:	99c4d83a 	srl	r2,r19,r7
   8943c:	a9e2d83a 	srl	r17,r21,r7
   89440:	ac8c983a 	sll	r6,r21,r18
   89444:	18acb03a 	or	r22,r3,r2
   89448:	b02ed43a 	srli	r23,r22,16
   8944c:	81c4d83a 	srl	r2,r16,r7
   89450:	8809883a 	mov	r4,r17
   89454:	b80b883a 	mov	r5,r23
   89458:	308cb03a 	or	r6,r6,r2
   8945c:	d9c00315 	stw	r7,12(sp)
   89460:	d9800215 	stw	r6,8(sp)
   89464:	b53fffcc 	andi	r20,r22,65535
   89468:	008a9180 	call	8a918 <__udivsi3>
   8946c:	100b883a 	mov	r5,r2
   89470:	a009883a 	mov	r4,r20
   89474:	1039883a 	mov	fp,r2
   89478:	00812180 	call	81218 <__mulsi3>
   8947c:	8809883a 	mov	r4,r17
   89480:	b80b883a 	mov	r5,r23
   89484:	102b883a 	mov	r21,r2
   89488:	008a9200 	call	8a920 <__umodsi3>
   8948c:	d9000217 	ldw	r4,8(sp)
   89490:	1004943a 	slli	r2,r2,16
   89494:	9ca6983a 	sll	r19,r19,r18
   89498:	2006d43a 	srli	r3,r4,16
   8949c:	84a0983a 	sll	r16,r16,r18
   894a0:	dcc00015 	stw	r19,0(sp)
   894a4:	10c4b03a 	or	r2,r2,r3
   894a8:	dc000115 	stw	r16,4(sp)
   894ac:	1540032e 	bgeu	r2,r21,894bc <__umoddi3+0x46c>
   894b0:	1585883a 	add	r2,r2,r22
   894b4:	e73fffc4 	addi	fp,fp,-1
   894b8:	15806e2e 	bgeu	r2,r22,89674 <__umoddi3+0x624>
   894bc:	1563c83a 	sub	r17,r2,r21
   894c0:	8809883a 	mov	r4,r17
   894c4:	b80b883a 	mov	r5,r23
   894c8:	008a9180 	call	8a918 <__udivsi3>
   894cc:	100b883a 	mov	r5,r2
   894d0:	a009883a 	mov	r4,r20
   894d4:	1021883a 	mov	r16,r2
   894d8:	00812180 	call	81218 <__mulsi3>
   894dc:	b80b883a 	mov	r5,r23
   894e0:	8809883a 	mov	r4,r17
   894e4:	1029883a 	mov	r20,r2
   894e8:	008a9200 	call	8a920 <__umodsi3>
   894ec:	d9400217 	ldw	r5,8(sp)
   894f0:	1004943a 	slli	r2,r2,16
   894f4:	28ffffcc 	andi	r3,r5,65535
   894f8:	10c4b03a 	or	r2,r2,r3
   894fc:	1500032e 	bgeu	r2,r20,8950c <__umoddi3+0x4bc>
   89500:	1585883a 	add	r2,r2,r22
   89504:	843fffc4 	addi	r16,r16,-1
   89508:	1580562e 	bgeu	r2,r22,89664 <__umoddi3+0x614>
   8950c:	d9800017 	ldw	r6,0(sp)
   89510:	e022943a 	slli	r17,fp,16
   89514:	302ed43a 	srli	r23,r6,16
   89518:	8462b03a 	or	r17,r16,r17
   8951c:	34ffffcc 	andi	r19,r6,65535
   89520:	882ad43a 	srli	r21,r17,16
   89524:	8c7fffcc 	andi	r17,r17,65535
   89528:	8809883a 	mov	r4,r17
   8952c:	980b883a 	mov	r5,r19
   89530:	1521c83a 	sub	r16,r2,r20
   89534:	00812180 	call	81218 <__mulsi3>
   89538:	8809883a 	mov	r4,r17
   8953c:	b80b883a 	mov	r5,r23
   89540:	1029883a 	mov	r20,r2
   89544:	00812180 	call	81218 <__mulsi3>
   89548:	980b883a 	mov	r5,r19
   8954c:	a809883a 	mov	r4,r21
   89550:	1023883a 	mov	r17,r2
   89554:	00812180 	call	81218 <__mulsi3>
   89558:	a809883a 	mov	r4,r21
   8955c:	b80b883a 	mov	r5,r23
   89560:	1027883a 	mov	r19,r2
   89564:	00812180 	call	81218 <__mulsi3>
   89568:	100b883a 	mov	r5,r2
   8956c:	a004d43a 	srli	r2,r20,16
   89570:	8ce3883a 	add	r17,r17,r19
   89574:	1449883a 	add	r4,r2,r17
   89578:	24c0022e 	bgeu	r4,r19,89584 <__umoddi3+0x534>
   8957c:	00800074 	movhi	r2,1
   89580:	288b883a 	add	r5,r5,r2
   89584:	2004d43a 	srli	r2,r4,16
   89588:	2008943a 	slli	r4,r4,16
   8958c:	a0ffffcc 	andi	r3,r20,65535
   89590:	288d883a 	add	r6,r5,r2
   89594:	20c9883a 	add	r4,r4,r3
   89598:	81800b36 	bltu	r16,r6,895c8 <__umoddi3+0x578>
   8959c:	81804026 	beq	r16,r6,896a0 <__umoddi3+0x650>
   895a0:	818dc83a 	sub	r6,r16,r6
   895a4:	00000f06 	br	895e4 <__umoddi3+0x594>
   895a8:	30c5c83a 	sub	r2,r6,r3
   895ac:	182d883a 	mov	r22,r3
   895b0:	8084d83a 	srl	r2,r16,r2
   895b4:	a8c6983a 	sll	r3,r21,r3
   895b8:	9da6983a 	sll	r19,r19,r22
   895bc:	85a0983a 	sll	r16,r16,r22
   895c0:	18aab03a 	or	r21,r3,r2
   895c4:	003f1d06 	br	8923c <__umoddi3+0x1ec>
   895c8:	d8c00017 	ldw	r3,0(sp)
   895cc:	20c5c83a 	sub	r2,r4,r3
   895d0:	2089803a 	cmpltu	r4,r4,r2
   895d4:	3587c83a 	sub	r3,r6,r22
   895d8:	1907c83a 	sub	r3,r3,r4
   895dc:	80cdc83a 	sub	r6,r16,r3
   895e0:	1009883a 	mov	r4,r2
   895e4:	d9400117 	ldw	r5,4(sp)
   895e8:	2905c83a 	sub	r2,r5,r4
   895ec:	2887803a 	cmpltu	r3,r5,r2
   895f0:	30c7c83a 	sub	r3,r6,r3
   895f4:	d9800317 	ldw	r6,12(sp)
   895f8:	1484d83a 	srl	r2,r2,r18
   895fc:	1988983a 	sll	r4,r3,r6
   89600:	1c86d83a 	srl	r3,r3,r18
   89604:	2088b03a 	or	r4,r4,r2
   89608:	2011883a 	mov	r8,r4
   8960c:	1813883a 	mov	r9,r3
   89610:	d9000415 	stw	r4,16(sp)
   89614:	d8c00515 	stw	r3,20(sp)
   89618:	003ed406 	br	8916c <__umoddi3+0x11c>
   8961c:	01400604 	movi	r5,24
   89620:	2805883a 	mov	r2,r5
   89624:	003ea606 	br	890c0 <__umoddi3+0x70>
   89628:	01400204 	movi	r5,8
   8962c:	2805883a 	mov	r2,r5
   89630:	003ea306 	br	890c0 <__umoddi3+0x70>
   89634:	01400204 	movi	r5,8
   89638:	2805883a 	mov	r2,r5
   8963c:	003edf06 	br	891bc <__umoddi3+0x16c>
   89640:	01400204 	movi	r5,8
   89644:	2805883a 	mov	r2,r5
   89648:	003ef206 	br	89214 <__umoddi3+0x1c4>
   8964c:	01400604 	movi	r5,24
   89650:	2805883a 	mov	r2,r5
   89654:	003eef06 	br	89214 <__umoddi3+0x1c4>
   89658:	01400604 	movi	r5,24
   8965c:	2805883a 	mov	r2,r5
   89660:	003ed606 	br	891bc <__umoddi3+0x16c>
   89664:	153fa92e 	bgeu	r2,r20,8950c <__umoddi3+0x4bc>
   89668:	843fffc4 	addi	r16,r16,-1
   8966c:	1585883a 	add	r2,r2,r22
   89670:	003fa606 	br	8950c <__umoddi3+0x4bc>
   89674:	157f912e 	bgeu	r2,r21,894bc <__umoddi3+0x46c>
   89678:	e73fffc4 	addi	fp,fp,-1
   8967c:	1585883a 	add	r2,r2,r22
   89680:	003f8e06 	br	894bc <__umoddi3+0x46c>
   89684:	157f542e 	bgeu	r2,r21,893d8 <__umoddi3+0x388>
   89688:	14c5883a 	add	r2,r2,r19
   8968c:	003f5206 	br	893d8 <__umoddi3+0x388>
   89690:	14c5883a 	add	r2,r2,r19
   89694:	003efc06 	br	89288 <__umoddi3+0x238>
   89698:	14c5883a 	add	r2,r2,r19
   8969c:	003ea606 	br	89138 <__umoddi3+0xe8>
   896a0:	d8800117 	ldw	r2,4(sp)
   896a4:	113fc836 	bltu	r2,r4,895c8 <__umoddi3+0x578>
   896a8:	000d883a 	mov	r6,zero
   896ac:	003fcd06 	br	895e4 <__umoddi3+0x594>

000896b0 <_fpadd_parts>:
   896b0:	defff804 	addi	sp,sp,-32
   896b4:	dcc00315 	stw	r19,12(sp)
   896b8:	2027883a 	mov	r19,r4
   896bc:	21000017 	ldw	r4,0(r4)
   896c0:	00c00044 	movi	r3,1
   896c4:	dd400515 	stw	r21,20(sp)
   896c8:	dd000415 	stw	r20,16(sp)
   896cc:	ddc00715 	stw	r23,28(sp)
   896d0:	dd800615 	stw	r22,24(sp)
   896d4:	dc800215 	stw	r18,8(sp)
   896d8:	dc400115 	stw	r17,4(sp)
   896dc:	dc000015 	stw	r16,0(sp)
   896e0:	282b883a 	mov	r21,r5
   896e4:	3029883a 	mov	r20,r6
   896e8:	1900632e 	bgeu	r3,r4,89878 <_fpadd_parts+0x1c8>
   896ec:	28800017 	ldw	r2,0(r5)
   896f0:	1880812e 	bgeu	r3,r2,898f8 <_fpadd_parts+0x248>
   896f4:	00c00104 	movi	r3,4
   896f8:	20c0dc26 	beq	r4,r3,89a6c <_fpadd_parts+0x3bc>
   896fc:	10c07e26 	beq	r2,r3,898f8 <_fpadd_parts+0x248>
   89700:	00c00084 	movi	r3,2
   89704:	10c06726 	beq	r2,r3,898a4 <_fpadd_parts+0x1f4>
   89708:	20c07b26 	beq	r4,r3,898f8 <_fpadd_parts+0x248>
   8970c:	9dc00217 	ldw	r23,8(r19)
   89710:	28c00217 	ldw	r3,8(r5)
   89714:	9c400317 	ldw	r17,12(r19)
   89718:	2bc00317 	ldw	r15,12(r5)
   8971c:	b8cdc83a 	sub	r6,r23,r3
   89720:	9c800417 	ldw	r18,16(r19)
   89724:	2c000417 	ldw	r16,16(r5)
   89728:	3009883a 	mov	r4,r6
   8972c:	30009716 	blt	r6,zero,8998c <_fpadd_parts+0x2dc>
   89730:	00800fc4 	movi	r2,63
   89734:	11806b16 	blt	r2,r6,898e4 <_fpadd_parts+0x234>
   89738:	0100a40e 	bge	zero,r4,899cc <_fpadd_parts+0x31c>
   8973c:	35bff804 	addi	r22,r6,-32
   89740:	b000bc16 	blt	r22,zero,89a34 <_fpadd_parts+0x384>
   89744:	8596d83a 	srl	r11,r16,r22
   89748:	0019883a 	mov	r12,zero
   8974c:	0013883a 	mov	r9,zero
   89750:	01000044 	movi	r4,1
   89754:	0015883a 	mov	r10,zero
   89758:	b000be16 	blt	r22,zero,89a54 <_fpadd_parts+0x3a4>
   8975c:	2590983a 	sll	r8,r4,r22
   89760:	000f883a 	mov	r7,zero
   89764:	00bfffc4 	movi	r2,-1
   89768:	3889883a 	add	r4,r7,r2
   8976c:	408b883a 	add	r5,r8,r2
   89770:	21cd803a 	cmpltu	r6,r4,r7
   89774:	314b883a 	add	r5,r6,r5
   89778:	7904703a 	and	r2,r15,r4
   8977c:	8146703a 	and	r3,r16,r5
   89780:	10c4b03a 	or	r2,r2,r3
   89784:	10000226 	beq	r2,zero,89790 <_fpadd_parts+0xe0>
   89788:	02400044 	movi	r9,1
   8978c:	0015883a 	mov	r10,zero
   89790:	5a5eb03a 	or	r15,r11,r9
   89794:	62a0b03a 	or	r16,r12,r10
   89798:	99400117 	ldw	r5,4(r19)
   8979c:	a8800117 	ldw	r2,4(r21)
   897a0:	28806e26 	beq	r5,r2,8995c <_fpadd_parts+0x2ac>
   897a4:	28006626 	beq	r5,zero,89940 <_fpadd_parts+0x290>
   897a8:	7c45c83a 	sub	r2,r15,r17
   897ac:	7889803a 	cmpltu	r4,r15,r2
   897b0:	8487c83a 	sub	r3,r16,r18
   897b4:	1909c83a 	sub	r4,r3,r4
   897b8:	100d883a 	mov	r6,r2
   897bc:	200f883a 	mov	r7,r4
   897c0:	38007716 	blt	r7,zero,899a0 <_fpadd_parts+0x2f0>
   897c4:	a5c00215 	stw	r23,8(r20)
   897c8:	a1c00415 	stw	r7,16(r20)
   897cc:	a0000115 	stw	zero,4(r20)
   897d0:	a1800315 	stw	r6,12(r20)
   897d4:	a2000317 	ldw	r8,12(r20)
   897d8:	a2400417 	ldw	r9,16(r20)
   897dc:	00bfffc4 	movi	r2,-1
   897e0:	408b883a 	add	r5,r8,r2
   897e4:	2a09803a 	cmpltu	r4,r5,r8
   897e8:	488d883a 	add	r6,r9,r2
   897ec:	01c40034 	movhi	r7,4096
   897f0:	39ffffc4 	addi	r7,r7,-1
   897f4:	218d883a 	add	r6,r4,r6
   897f8:	39801736 	bltu	r7,r6,89858 <_fpadd_parts+0x1a8>
   897fc:	31c06526 	beq	r6,r7,89994 <_fpadd_parts+0x2e4>
   89800:	a3000217 	ldw	r12,8(r20)
   89804:	4209883a 	add	r4,r8,r8
   89808:	00bfffc4 	movi	r2,-1
   8980c:	220f803a 	cmpltu	r7,r4,r8
   89810:	4a4b883a 	add	r5,r9,r9
   89814:	394f883a 	add	r7,r7,r5
   89818:	2095883a 	add	r10,r4,r2
   8981c:	3897883a 	add	r11,r7,r2
   89820:	510d803a 	cmpltu	r6,r10,r4
   89824:	6099883a 	add	r12,r12,r2
   89828:	32d7883a 	add	r11,r6,r11
   8982c:	00840034 	movhi	r2,4096
   89830:	10bfffc4 	addi	r2,r2,-1
   89834:	2011883a 	mov	r8,r4
   89838:	3813883a 	mov	r9,r7
   8983c:	a1000315 	stw	r4,12(r20)
   89840:	a1c00415 	stw	r7,16(r20)
   89844:	a3000215 	stw	r12,8(r20)
   89848:	12c00336 	bltu	r2,r11,89858 <_fpadd_parts+0x1a8>
   8984c:	58bfed1e 	bne	r11,r2,89804 <_fpadd_parts+0x154>
   89850:	00bfff84 	movi	r2,-2
   89854:	12bfeb2e 	bgeu	r2,r10,89804 <_fpadd_parts+0x154>
   89858:	a2800417 	ldw	r10,16(r20)
   8985c:	008000c4 	movi	r2,3
   89860:	00c80034 	movhi	r3,8192
   89864:	18ffffc4 	addi	r3,r3,-1
   89868:	a2400317 	ldw	r9,12(r20)
   8986c:	a0800015 	stw	r2,0(r20)
   89870:	1a802336 	bltu	r3,r10,89900 <_fpadd_parts+0x250>
   89874:	a027883a 	mov	r19,r20
   89878:	9805883a 	mov	r2,r19
   8987c:	ddc00717 	ldw	r23,28(sp)
   89880:	dd800617 	ldw	r22,24(sp)
   89884:	dd400517 	ldw	r21,20(sp)
   89888:	dd000417 	ldw	r20,16(sp)
   8988c:	dcc00317 	ldw	r19,12(sp)
   89890:	dc800217 	ldw	r18,8(sp)
   89894:	dc400117 	ldw	r17,4(sp)
   89898:	dc000017 	ldw	r16,0(sp)
   8989c:	dec00804 	addi	sp,sp,32
   898a0:	f800283a 	ret
   898a4:	20fff41e 	bne	r4,r3,89878 <_fpadd_parts+0x1c8>
   898a8:	31000015 	stw	r4,0(r6)
   898ac:	98800117 	ldw	r2,4(r19)
   898b0:	30800115 	stw	r2,4(r6)
   898b4:	98c00217 	ldw	r3,8(r19)
   898b8:	30c00215 	stw	r3,8(r6)
   898bc:	98800317 	ldw	r2,12(r19)
   898c0:	30800315 	stw	r2,12(r6)
   898c4:	98c00417 	ldw	r3,16(r19)
   898c8:	30c00415 	stw	r3,16(r6)
   898cc:	98800117 	ldw	r2,4(r19)
   898d0:	28c00117 	ldw	r3,4(r5)
   898d4:	3027883a 	mov	r19,r6
   898d8:	10c4703a 	and	r2,r2,r3
   898dc:	30800115 	stw	r2,4(r6)
   898e0:	003fe506 	br	89878 <_fpadd_parts+0x1c8>
   898e4:	1dc02616 	blt	r3,r23,89980 <_fpadd_parts+0x2d0>
   898e8:	0023883a 	mov	r17,zero
   898ec:	182f883a 	mov	r23,r3
   898f0:	0025883a 	mov	r18,zero
   898f4:	003fa806 	br	89798 <_fpadd_parts+0xe8>
   898f8:	a827883a 	mov	r19,r21
   898fc:	003fde06 	br	89878 <_fpadd_parts+0x1c8>
   89900:	01800044 	movi	r6,1
   89904:	500497fa 	slli	r2,r10,31
   89908:	4808d07a 	srli	r4,r9,1
   8990c:	518ad83a 	srl	r5,r10,r6
   89910:	a2000217 	ldw	r8,8(r20)
   89914:	1108b03a 	or	r4,r2,r4
   89918:	0007883a 	mov	r3,zero
   8991c:	4984703a 	and	r2,r9,r6
   89920:	208cb03a 	or	r6,r4,r2
   89924:	28ceb03a 	or	r7,r5,r3
   89928:	42000044 	addi	r8,r8,1
   8992c:	a027883a 	mov	r19,r20
   89930:	a1c00415 	stw	r7,16(r20)
   89934:	a2000215 	stw	r8,8(r20)
   89938:	a1800315 	stw	r6,12(r20)
   8993c:	003fce06 	br	89878 <_fpadd_parts+0x1c8>
   89940:	8bc5c83a 	sub	r2,r17,r15
   89944:	8889803a 	cmpltu	r4,r17,r2
   89948:	9407c83a 	sub	r3,r18,r16
   8994c:	1909c83a 	sub	r4,r3,r4
   89950:	100d883a 	mov	r6,r2
   89954:	200f883a 	mov	r7,r4
   89958:	003f9906 	br	897c0 <_fpadd_parts+0x110>
   8995c:	7c45883a 	add	r2,r15,r17
   89960:	13c9803a 	cmpltu	r4,r2,r15
   89964:	8487883a 	add	r3,r16,r18
   89968:	20c9883a 	add	r4,r4,r3
   8996c:	a1400115 	stw	r5,4(r20)
   89970:	a5c00215 	stw	r23,8(r20)
   89974:	a0800315 	stw	r2,12(r20)
   89978:	a1000415 	stw	r4,16(r20)
   8997c:	003fb606 	br	89858 <_fpadd_parts+0x1a8>
   89980:	001f883a 	mov	r15,zero
   89984:	0021883a 	mov	r16,zero
   89988:	003f8306 	br	89798 <_fpadd_parts+0xe8>
   8998c:	018dc83a 	sub	r6,zero,r6
   89990:	003f6706 	br	89730 <_fpadd_parts+0x80>
   89994:	00bfff84 	movi	r2,-2
   89998:	117faf36 	bltu	r2,r5,89858 <_fpadd_parts+0x1a8>
   8999c:	003f9806 	br	89800 <_fpadd_parts+0x150>
   899a0:	0005883a 	mov	r2,zero
   899a4:	1189c83a 	sub	r4,r2,r6
   899a8:	1105803a 	cmpltu	r2,r2,r4
   899ac:	01cbc83a 	sub	r5,zero,r7
   899b0:	2885c83a 	sub	r2,r5,r2
   899b4:	01800044 	movi	r6,1
   899b8:	a1800115 	stw	r6,4(r20)
   899bc:	a5c00215 	stw	r23,8(r20)
   899c0:	a1000315 	stw	r4,12(r20)
   899c4:	a0800415 	stw	r2,16(r20)
   899c8:	003f8206 	br	897d4 <_fpadd_parts+0x124>
   899cc:	203f7226 	beq	r4,zero,89798 <_fpadd_parts+0xe8>
   899d0:	35bff804 	addi	r22,r6,-32
   899d4:	b9af883a 	add	r23,r23,r6
   899d8:	b0003116 	blt	r22,zero,89aa0 <_fpadd_parts+0x3f0>
   899dc:	959ad83a 	srl	r13,r18,r22
   899e0:	001d883a 	mov	r14,zero
   899e4:	000f883a 	mov	r7,zero
   899e8:	01000044 	movi	r4,1
   899ec:	0011883a 	mov	r8,zero
   899f0:	b0002516 	blt	r22,zero,89a88 <_fpadd_parts+0x3d8>
   899f4:	2594983a 	sll	r10,r4,r22
   899f8:	0013883a 	mov	r9,zero
   899fc:	00bfffc4 	movi	r2,-1
   89a00:	4889883a 	add	r4,r9,r2
   89a04:	508b883a 	add	r5,r10,r2
   89a08:	224d803a 	cmpltu	r6,r4,r9
   89a0c:	314b883a 	add	r5,r6,r5
   89a10:	8904703a 	and	r2,r17,r4
   89a14:	9146703a 	and	r3,r18,r5
   89a18:	10c4b03a 	or	r2,r2,r3
   89a1c:	10000226 	beq	r2,zero,89a28 <_fpadd_parts+0x378>
   89a20:	01c00044 	movi	r7,1
   89a24:	0011883a 	mov	r8,zero
   89a28:	69e2b03a 	or	r17,r13,r7
   89a2c:	7224b03a 	or	r18,r14,r8
   89a30:	003f5906 	br	89798 <_fpadd_parts+0xe8>
   89a34:	8407883a 	add	r3,r16,r16
   89a38:	008007c4 	movi	r2,31
   89a3c:	1185c83a 	sub	r2,r2,r6
   89a40:	1886983a 	sll	r3,r3,r2
   89a44:	7996d83a 	srl	r11,r15,r6
   89a48:	8198d83a 	srl	r12,r16,r6
   89a4c:	1ad6b03a 	or	r11,r3,r11
   89a50:	003f3e06 	br	8974c <_fpadd_parts+0x9c>
   89a54:	2006d07a 	srli	r3,r4,1
   89a58:	008007c4 	movi	r2,31
   89a5c:	1185c83a 	sub	r2,r2,r6
   89a60:	1890d83a 	srl	r8,r3,r2
   89a64:	218e983a 	sll	r7,r4,r6
   89a68:	003f3e06 	br	89764 <_fpadd_parts+0xb4>
   89a6c:	113f821e 	bne	r2,r4,89878 <_fpadd_parts+0x1c8>
   89a70:	28c00117 	ldw	r3,4(r5)
   89a74:	98800117 	ldw	r2,4(r19)
   89a78:	10ff7f26 	beq	r2,r3,89878 <_fpadd_parts+0x1c8>
   89a7c:	04c00274 	movhi	r19,9
   89a80:	9cf7a604 	addi	r19,r19,-8552
   89a84:	003f7c06 	br	89878 <_fpadd_parts+0x1c8>
   89a88:	2006d07a 	srli	r3,r4,1
   89a8c:	008007c4 	movi	r2,31
   89a90:	1185c83a 	sub	r2,r2,r6
   89a94:	1894d83a 	srl	r10,r3,r2
   89a98:	2192983a 	sll	r9,r4,r6
   89a9c:	003fd706 	br	899fc <_fpadd_parts+0x34c>
   89aa0:	9487883a 	add	r3,r18,r18
   89aa4:	008007c4 	movi	r2,31
   89aa8:	1185c83a 	sub	r2,r2,r6
   89aac:	1886983a 	sll	r3,r3,r2
   89ab0:	899ad83a 	srl	r13,r17,r6
   89ab4:	919cd83a 	srl	r14,r18,r6
   89ab8:	1b5ab03a 	or	r13,r3,r13
   89abc:	003fc906 	br	899e4 <_fpadd_parts+0x334>

00089ac0 <__subdf3>:
   89ac0:	deffea04 	addi	sp,sp,-88
   89ac4:	dcc01415 	stw	r19,80(sp)
   89ac8:	dcc00404 	addi	r19,sp,16
   89acc:	2011883a 	mov	r8,r4
   89ad0:	2813883a 	mov	r9,r5
   89ad4:	dc401315 	stw	r17,76(sp)
   89ad8:	d809883a 	mov	r4,sp
   89adc:	980b883a 	mov	r5,r19
   89ae0:	dc400904 	addi	r17,sp,36
   89ae4:	dfc01515 	stw	ra,84(sp)
   89ae8:	da400115 	stw	r9,4(sp)
   89aec:	d9c00315 	stw	r7,12(sp)
   89af0:	da000015 	stw	r8,0(sp)
   89af4:	d9800215 	stw	r6,8(sp)
   89af8:	008ade00 	call	8ade0 <__unpack_d>
   89afc:	d9000204 	addi	r4,sp,8
   89b00:	880b883a 	mov	r5,r17
   89b04:	008ade00 	call	8ade0 <__unpack_d>
   89b08:	d8800a17 	ldw	r2,40(sp)
   89b0c:	880b883a 	mov	r5,r17
   89b10:	9809883a 	mov	r4,r19
   89b14:	d9800e04 	addi	r6,sp,56
   89b18:	1080005c 	xori	r2,r2,1
   89b1c:	d8800a15 	stw	r2,40(sp)
   89b20:	00896b00 	call	896b0 <_fpadd_parts>
   89b24:	1009883a 	mov	r4,r2
   89b28:	008aacc0 	call	8aacc <__pack_d>
   89b2c:	dfc01517 	ldw	ra,84(sp)
   89b30:	dcc01417 	ldw	r19,80(sp)
   89b34:	dc401317 	ldw	r17,76(sp)
   89b38:	dec01604 	addi	sp,sp,88
   89b3c:	f800283a 	ret

00089b40 <__adddf3>:
   89b40:	deffea04 	addi	sp,sp,-88
   89b44:	dcc01415 	stw	r19,80(sp)
   89b48:	dcc00404 	addi	r19,sp,16
   89b4c:	2011883a 	mov	r8,r4
   89b50:	2813883a 	mov	r9,r5
   89b54:	dc401315 	stw	r17,76(sp)
   89b58:	d809883a 	mov	r4,sp
   89b5c:	980b883a 	mov	r5,r19
   89b60:	dc400904 	addi	r17,sp,36
   89b64:	dfc01515 	stw	ra,84(sp)
   89b68:	da400115 	stw	r9,4(sp)
   89b6c:	d9c00315 	stw	r7,12(sp)
   89b70:	da000015 	stw	r8,0(sp)
   89b74:	d9800215 	stw	r6,8(sp)
   89b78:	008ade00 	call	8ade0 <__unpack_d>
   89b7c:	d9000204 	addi	r4,sp,8
   89b80:	880b883a 	mov	r5,r17
   89b84:	008ade00 	call	8ade0 <__unpack_d>
   89b88:	d9800e04 	addi	r6,sp,56
   89b8c:	9809883a 	mov	r4,r19
   89b90:	880b883a 	mov	r5,r17
   89b94:	00896b00 	call	896b0 <_fpadd_parts>
   89b98:	1009883a 	mov	r4,r2
   89b9c:	008aacc0 	call	8aacc <__pack_d>
   89ba0:	dfc01517 	ldw	ra,84(sp)
   89ba4:	dcc01417 	ldw	r19,80(sp)
   89ba8:	dc401317 	ldw	r17,76(sp)
   89bac:	dec01604 	addi	sp,sp,88
   89bb0:	f800283a 	ret

00089bb4 <__muldf3>:
   89bb4:	deffe004 	addi	sp,sp,-128
   89bb8:	dc401815 	stw	r17,96(sp)
   89bbc:	dc400404 	addi	r17,sp,16
   89bc0:	2011883a 	mov	r8,r4
   89bc4:	2813883a 	mov	r9,r5
   89bc8:	dc001715 	stw	r16,92(sp)
   89bcc:	d809883a 	mov	r4,sp
   89bd0:	880b883a 	mov	r5,r17
   89bd4:	dc000904 	addi	r16,sp,36
   89bd8:	dfc01f15 	stw	ra,124(sp)
   89bdc:	da400115 	stw	r9,4(sp)
   89be0:	d9c00315 	stw	r7,12(sp)
   89be4:	da000015 	stw	r8,0(sp)
   89be8:	d9800215 	stw	r6,8(sp)
   89bec:	ddc01e15 	stw	r23,120(sp)
   89bf0:	dd801d15 	stw	r22,116(sp)
   89bf4:	dd401c15 	stw	r21,112(sp)
   89bf8:	dd001b15 	stw	r20,108(sp)
   89bfc:	dcc01a15 	stw	r19,104(sp)
   89c00:	dc801915 	stw	r18,100(sp)
   89c04:	008ade00 	call	8ade0 <__unpack_d>
   89c08:	d9000204 	addi	r4,sp,8
   89c0c:	800b883a 	mov	r5,r16
   89c10:	008ade00 	call	8ade0 <__unpack_d>
   89c14:	d9000417 	ldw	r4,16(sp)
   89c18:	00800044 	movi	r2,1
   89c1c:	1100102e 	bgeu	r2,r4,89c60 <__muldf3+0xac>
   89c20:	d8c00917 	ldw	r3,36(sp)
   89c24:	10c0062e 	bgeu	r2,r3,89c40 <__muldf3+0x8c>
   89c28:	00800104 	movi	r2,4
   89c2c:	20800a26 	beq	r4,r2,89c58 <__muldf3+0xa4>
   89c30:	1880cc26 	beq	r3,r2,89f64 <__muldf3+0x3b0>
   89c34:	00800084 	movi	r2,2
   89c38:	20800926 	beq	r4,r2,89c60 <__muldf3+0xac>
   89c3c:	1880191e 	bne	r3,r2,89ca4 <__muldf3+0xf0>
   89c40:	d8c00a17 	ldw	r3,40(sp)
   89c44:	d8800517 	ldw	r2,20(sp)
   89c48:	8009883a 	mov	r4,r16
   89c4c:	10c4c03a 	cmpne	r2,r2,r3
   89c50:	d8800a15 	stw	r2,40(sp)
   89c54:	00000706 	br	89c74 <__muldf3+0xc0>
   89c58:	00800084 	movi	r2,2
   89c5c:	1880c326 	beq	r3,r2,89f6c <__muldf3+0x3b8>
   89c60:	d8800517 	ldw	r2,20(sp)
   89c64:	d8c00a17 	ldw	r3,40(sp)
   89c68:	8809883a 	mov	r4,r17
   89c6c:	10c4c03a 	cmpne	r2,r2,r3
   89c70:	d8800515 	stw	r2,20(sp)
   89c74:	008aacc0 	call	8aacc <__pack_d>
   89c78:	dfc01f17 	ldw	ra,124(sp)
   89c7c:	ddc01e17 	ldw	r23,120(sp)
   89c80:	dd801d17 	ldw	r22,116(sp)
   89c84:	dd401c17 	ldw	r21,112(sp)
   89c88:	dd001b17 	ldw	r20,108(sp)
   89c8c:	dcc01a17 	ldw	r19,104(sp)
   89c90:	dc801917 	ldw	r18,100(sp)
   89c94:	dc401817 	ldw	r17,96(sp)
   89c98:	dc001717 	ldw	r16,92(sp)
   89c9c:	dec02004 	addi	sp,sp,128
   89ca0:	f800283a 	ret
   89ca4:	dd800717 	ldw	r22,28(sp)
   89ca8:	dc800c17 	ldw	r18,48(sp)
   89cac:	002b883a 	mov	r21,zero
   89cb0:	0023883a 	mov	r17,zero
   89cb4:	a80b883a 	mov	r5,r21
   89cb8:	b00d883a 	mov	r6,r22
   89cbc:	880f883a 	mov	r7,r17
   89cc0:	ddc00817 	ldw	r23,32(sp)
   89cc4:	dcc00d17 	ldw	r19,52(sp)
   89cc8:	9009883a 	mov	r4,r18
   89ccc:	008a9280 	call	8a928 <__muldi3>
   89cd0:	001b883a 	mov	r13,zero
   89cd4:	680f883a 	mov	r7,r13
   89cd8:	b009883a 	mov	r4,r22
   89cdc:	000b883a 	mov	r5,zero
   89ce0:	980d883a 	mov	r6,r19
   89ce4:	b82d883a 	mov	r22,r23
   89ce8:	002f883a 	mov	r23,zero
   89cec:	db401615 	stw	r13,88(sp)
   89cf0:	d8801315 	stw	r2,76(sp)
   89cf4:	d8c01415 	stw	r3,80(sp)
   89cf8:	dcc01515 	stw	r19,84(sp)
   89cfc:	008a9280 	call	8a928 <__muldi3>
   89d00:	b00d883a 	mov	r6,r22
   89d04:	000b883a 	mov	r5,zero
   89d08:	9009883a 	mov	r4,r18
   89d0c:	b80f883a 	mov	r7,r23
   89d10:	1021883a 	mov	r16,r2
   89d14:	1823883a 	mov	r17,r3
   89d18:	008a9280 	call	8a928 <__muldi3>
   89d1c:	8085883a 	add	r2,r16,r2
   89d20:	140d803a 	cmpltu	r6,r2,r16
   89d24:	88c7883a 	add	r3,r17,r3
   89d28:	30cd883a 	add	r6,r6,r3
   89d2c:	1029883a 	mov	r20,r2
   89d30:	302b883a 	mov	r21,r6
   89d34:	da801317 	ldw	r10,76(sp)
   89d38:	dac01417 	ldw	r11,80(sp)
   89d3c:	db001517 	ldw	r12,84(sp)
   89d40:	db401617 	ldw	r13,88(sp)
   89d44:	3440612e 	bgeu	r6,r17,89ecc <__muldf3+0x318>
   89d48:	0009883a 	mov	r4,zero
   89d4c:	5105883a 	add	r2,r10,r4
   89d50:	128d803a 	cmpltu	r6,r2,r10
   89d54:	5d07883a 	add	r3,r11,r20
   89d58:	30cd883a 	add	r6,r6,r3
   89d5c:	0021883a 	mov	r16,zero
   89d60:	04400044 	movi	r17,1
   89d64:	1025883a 	mov	r18,r2
   89d68:	3027883a 	mov	r19,r6
   89d6c:	32c06236 	bltu	r6,r11,89ef8 <__muldf3+0x344>
   89d70:	59807a26 	beq	r11,r6,89f5c <__muldf3+0x3a8>
   89d74:	680b883a 	mov	r5,r13
   89d78:	b80f883a 	mov	r7,r23
   89d7c:	6009883a 	mov	r4,r12
   89d80:	b00d883a 	mov	r6,r22
   89d84:	008a9280 	call	8a928 <__muldi3>
   89d88:	1009883a 	mov	r4,r2
   89d8c:	000f883a 	mov	r7,zero
   89d90:	1545883a 	add	r2,r2,r21
   89d94:	1111803a 	cmpltu	r8,r2,r4
   89d98:	19c7883a 	add	r3,r3,r7
   89d9c:	40c7883a 	add	r3,r8,r3
   89da0:	88cb883a 	add	r5,r17,r3
   89da4:	d8c00617 	ldw	r3,24(sp)
   89da8:	8089883a 	add	r4,r16,r2
   89dac:	d8800b17 	ldw	r2,44(sp)
   89db0:	18c00104 	addi	r3,r3,4
   89db4:	240d803a 	cmpltu	r6,r4,r16
   89db8:	10c7883a 	add	r3,r2,r3
   89dbc:	2013883a 	mov	r9,r4
   89dc0:	d8800a17 	ldw	r2,40(sp)
   89dc4:	d9000517 	ldw	r4,20(sp)
   89dc8:	314d883a 	add	r6,r6,r5
   89dcc:	3015883a 	mov	r10,r6
   89dd0:	2088c03a 	cmpne	r4,r4,r2
   89dd4:	00880034 	movhi	r2,8192
   89dd8:	10bfffc4 	addi	r2,r2,-1
   89ddc:	d9000f15 	stw	r4,60(sp)
   89de0:	d8c01015 	stw	r3,64(sp)
   89de4:	1180162e 	bgeu	r2,r6,89e40 <__muldf3+0x28c>
   89de8:	1811883a 	mov	r8,r3
   89dec:	101f883a 	mov	r15,r2
   89df0:	980497fa 	slli	r2,r19,31
   89df4:	9016d07a 	srli	r11,r18,1
   89df8:	500697fa 	slli	r3,r10,31
   89dfc:	480cd07a 	srli	r6,r9,1
   89e00:	500ed07a 	srli	r7,r10,1
   89e04:	12d6b03a 	or	r11,r2,r11
   89e08:	00800044 	movi	r2,1
   89e0c:	198cb03a 	or	r6,r3,r6
   89e10:	4888703a 	and	r4,r9,r2
   89e14:	9818d07a 	srli	r12,r19,1
   89e18:	001b883a 	mov	r13,zero
   89e1c:	03a00034 	movhi	r14,32768
   89e20:	3013883a 	mov	r9,r6
   89e24:	3815883a 	mov	r10,r7
   89e28:	4091883a 	add	r8,r8,r2
   89e2c:	20000226 	beq	r4,zero,89e38 <__muldf3+0x284>
   89e30:	5b64b03a 	or	r18,r11,r13
   89e34:	63a6b03a 	or	r19,r12,r14
   89e38:	7abfed36 	bltu	r15,r10,89df0 <__muldf3+0x23c>
   89e3c:	da001015 	stw	r8,64(sp)
   89e40:	00840034 	movhi	r2,4096
   89e44:	10bfffc4 	addi	r2,r2,-1
   89e48:	12801436 	bltu	r2,r10,89e9c <__muldf3+0x2e8>
   89e4c:	da001017 	ldw	r8,64(sp)
   89e50:	101f883a 	mov	r15,r2
   89e54:	4a45883a 	add	r2,r9,r9
   89e58:	124d803a 	cmpltu	r6,r2,r9
   89e5c:	5287883a 	add	r3,r10,r10
   89e60:	9497883a 	add	r11,r18,r18
   89e64:	5c8f803a 	cmpltu	r7,r11,r18
   89e68:	9cd9883a 	add	r12,r19,r19
   89e6c:	01000044 	movi	r4,1
   89e70:	30cd883a 	add	r6,r6,r3
   89e74:	3b0f883a 	add	r7,r7,r12
   89e78:	423fffc4 	addi	r8,r8,-1
   89e7c:	1013883a 	mov	r9,r2
   89e80:	3015883a 	mov	r10,r6
   89e84:	111ab03a 	or	r13,r2,r4
   89e88:	98003016 	blt	r19,zero,89f4c <__muldf3+0x398>
   89e8c:	5825883a 	mov	r18,r11
   89e90:	3827883a 	mov	r19,r7
   89e94:	7abfef2e 	bgeu	r15,r10,89e54 <__muldf3+0x2a0>
   89e98:	da001015 	stw	r8,64(sp)
   89e9c:	00803fc4 	movi	r2,255
   89ea0:	488e703a 	and	r7,r9,r2
   89ea4:	00802004 	movi	r2,128
   89ea8:	0007883a 	mov	r3,zero
   89eac:	0011883a 	mov	r8,zero
   89eb0:	38801826 	beq	r7,r2,89f14 <__muldf3+0x360>
   89eb4:	008000c4 	movi	r2,3
   89eb8:	d9000e04 	addi	r4,sp,56
   89ebc:	da801215 	stw	r10,72(sp)
   89ec0:	d8800e15 	stw	r2,56(sp)
   89ec4:	da401115 	stw	r9,68(sp)
   89ec8:	003f6a06 	br	89c74 <__muldf3+0xc0>
   89ecc:	89802126 	beq	r17,r6,89f54 <__muldf3+0x3a0>
   89ed0:	0009883a 	mov	r4,zero
   89ed4:	5105883a 	add	r2,r10,r4
   89ed8:	128d803a 	cmpltu	r6,r2,r10
   89edc:	5d07883a 	add	r3,r11,r20
   89ee0:	30cd883a 	add	r6,r6,r3
   89ee4:	0021883a 	mov	r16,zero
   89ee8:	0023883a 	mov	r17,zero
   89eec:	1025883a 	mov	r18,r2
   89ef0:	3027883a 	mov	r19,r6
   89ef4:	32ff9e2e 	bgeu	r6,r11,89d70 <__muldf3+0x1bc>
   89ef8:	00800044 	movi	r2,1
   89efc:	8089883a 	add	r4,r16,r2
   89f00:	240d803a 	cmpltu	r6,r4,r16
   89f04:	344d883a 	add	r6,r6,r17
   89f08:	2021883a 	mov	r16,r4
   89f0c:	3023883a 	mov	r17,r6
   89f10:	003f9806 	br	89d74 <__muldf3+0x1c0>
   89f14:	403fe71e 	bne	r8,zero,89eb4 <__muldf3+0x300>
   89f18:	01004004 	movi	r4,256
   89f1c:	4904703a 	and	r2,r9,r4
   89f20:	10c4b03a 	or	r2,r2,r3
   89f24:	103fe31e 	bne	r2,zero,89eb4 <__muldf3+0x300>
   89f28:	94c4b03a 	or	r2,r18,r19
   89f2c:	103fe126 	beq	r2,zero,89eb4 <__muldf3+0x300>
   89f30:	49c5883a 	add	r2,r9,r7
   89f34:	1251803a 	cmpltu	r8,r2,r9
   89f38:	4291883a 	add	r8,r8,r10
   89f3c:	013fc004 	movi	r4,-256
   89f40:	1112703a 	and	r9,r2,r4
   89f44:	4015883a 	mov	r10,r8
   89f48:	003fda06 	br	89eb4 <__muldf3+0x300>
   89f4c:	6813883a 	mov	r9,r13
   89f50:	003fce06 	br	89e8c <__muldf3+0x2d8>
   89f54:	143f7c36 	bltu	r2,r16,89d48 <__muldf3+0x194>
   89f58:	003fdd06 	br	89ed0 <__muldf3+0x31c>
   89f5c:	12bf852e 	bgeu	r2,r10,89d74 <__muldf3+0x1c0>
   89f60:	003fe506 	br	89ef8 <__muldf3+0x344>
   89f64:	00800084 	movi	r2,2
   89f68:	20bf351e 	bne	r4,r2,89c40 <__muldf3+0x8c>
   89f6c:	01000274 	movhi	r4,9
   89f70:	2137a604 	addi	r4,r4,-8552
   89f74:	003f3f06 	br	89c74 <__muldf3+0xc0>

00089f78 <__divdf3>:
   89f78:	deffed04 	addi	sp,sp,-76
   89f7c:	dcc01115 	stw	r19,68(sp)
   89f80:	dcc00404 	addi	r19,sp,16
   89f84:	2011883a 	mov	r8,r4
   89f88:	2813883a 	mov	r9,r5
   89f8c:	dc000e15 	stw	r16,56(sp)
   89f90:	d809883a 	mov	r4,sp
   89f94:	980b883a 	mov	r5,r19
   89f98:	dc000904 	addi	r16,sp,36
   89f9c:	dfc01215 	stw	ra,72(sp)
   89fa0:	da400115 	stw	r9,4(sp)
   89fa4:	d9c00315 	stw	r7,12(sp)
   89fa8:	da000015 	stw	r8,0(sp)
   89fac:	d9800215 	stw	r6,8(sp)
   89fb0:	dc801015 	stw	r18,64(sp)
   89fb4:	dc400f15 	stw	r17,60(sp)
   89fb8:	008ade00 	call	8ade0 <__unpack_d>
   89fbc:	d9000204 	addi	r4,sp,8
   89fc0:	800b883a 	mov	r5,r16
   89fc4:	008ade00 	call	8ade0 <__unpack_d>
   89fc8:	d9000417 	ldw	r4,16(sp)
   89fcc:	00800044 	movi	r2,1
   89fd0:	11000b2e 	bgeu	r2,r4,8a000 <__divdf3+0x88>
   89fd4:	d9400917 	ldw	r5,36(sp)
   89fd8:	1140762e 	bgeu	r2,r5,8a1b4 <__divdf3+0x23c>
   89fdc:	d8800517 	ldw	r2,20(sp)
   89fe0:	d8c00a17 	ldw	r3,40(sp)
   89fe4:	01800104 	movi	r6,4
   89fe8:	10c4f03a 	xor	r2,r2,r3
   89fec:	d8800515 	stw	r2,20(sp)
   89ff0:	21800226 	beq	r4,r6,89ffc <__divdf3+0x84>
   89ff4:	00800084 	movi	r2,2
   89ff8:	2080141e 	bne	r4,r2,8a04c <__divdf3+0xd4>
   89ffc:	29000926 	beq	r5,r4,8a024 <__divdf3+0xac>
   8a000:	9809883a 	mov	r4,r19
   8a004:	008aacc0 	call	8aacc <__pack_d>
   8a008:	dfc01217 	ldw	ra,72(sp)
   8a00c:	dcc01117 	ldw	r19,68(sp)
   8a010:	dc801017 	ldw	r18,64(sp)
   8a014:	dc400f17 	ldw	r17,60(sp)
   8a018:	dc000e17 	ldw	r16,56(sp)
   8a01c:	dec01304 	addi	sp,sp,76
   8a020:	f800283a 	ret
   8a024:	01000274 	movhi	r4,9
   8a028:	2137a604 	addi	r4,r4,-8552
   8a02c:	008aacc0 	call	8aacc <__pack_d>
   8a030:	dfc01217 	ldw	ra,72(sp)
   8a034:	dcc01117 	ldw	r19,68(sp)
   8a038:	dc801017 	ldw	r18,64(sp)
   8a03c:	dc400f17 	ldw	r17,60(sp)
   8a040:	dc000e17 	ldw	r16,56(sp)
   8a044:	dec01304 	addi	sp,sp,76
   8a048:	f800283a 	ret
   8a04c:	29805b26 	beq	r5,r6,8a1bc <__divdf3+0x244>
   8a050:	28802d26 	beq	r5,r2,8a108 <__divdf3+0x190>
   8a054:	d8c00617 	ldw	r3,24(sp)
   8a058:	d8800b17 	ldw	r2,44(sp)
   8a05c:	d9c00817 	ldw	r7,32(sp)
   8a060:	dc400d17 	ldw	r17,52(sp)
   8a064:	188bc83a 	sub	r5,r3,r2
   8a068:	d9800717 	ldw	r6,28(sp)
   8a06c:	dc000c17 	ldw	r16,48(sp)
   8a070:	d9400615 	stw	r5,24(sp)
   8a074:	3c403836 	bltu	r7,r17,8a158 <__divdf3+0x1e0>
   8a078:	89c03626 	beq	r17,r7,8a154 <__divdf3+0x1dc>
   8a07c:	0015883a 	mov	r10,zero
   8a080:	001d883a 	mov	r14,zero
   8a084:	02c40034 	movhi	r11,4096
   8a088:	001f883a 	mov	r15,zero
   8a08c:	003f883a 	mov	ra,zero
   8a090:	04800f44 	movi	r18,61
   8a094:	00000f06 	br	8a0d4 <__divdf3+0x15c>
   8a098:	601d883a 	mov	r14,r12
   8a09c:	681f883a 	mov	r15,r13
   8a0a0:	400d883a 	mov	r6,r8
   8a0a4:	100f883a 	mov	r7,r2
   8a0a8:	3191883a 	add	r8,r6,r6
   8a0ac:	5808d07a 	srli	r4,r11,1
   8a0b0:	4185803a 	cmpltu	r2,r8,r6
   8a0b4:	39d3883a 	add	r9,r7,r7
   8a0b8:	28c6b03a 	or	r3,r5,r3
   8a0bc:	1245883a 	add	r2,r2,r9
   8a0c0:	1815883a 	mov	r10,r3
   8a0c4:	2017883a 	mov	r11,r4
   8a0c8:	400d883a 	mov	r6,r8
   8a0cc:	100f883a 	mov	r7,r2
   8a0d0:	fc801726 	beq	ra,r18,8a130 <__divdf3+0x1b8>
   8a0d4:	580a97fa 	slli	r5,r11,31
   8a0d8:	5006d07a 	srli	r3,r10,1
   8a0dc:	ffc00044 	addi	ra,ra,1
   8a0e0:	3c7ff136 	bltu	r7,r17,8a0a8 <__divdf3+0x130>
   8a0e4:	3411c83a 	sub	r8,r6,r16
   8a0e8:	3205803a 	cmpltu	r2,r6,r8
   8a0ec:	3c53c83a 	sub	r9,r7,r17
   8a0f0:	7298b03a 	or	r12,r14,r10
   8a0f4:	7adab03a 	or	r13,r15,r11
   8a0f8:	4885c83a 	sub	r2,r9,r2
   8a0fc:	89ffe61e 	bne	r17,r7,8a098 <__divdf3+0x120>
   8a100:	343fe936 	bltu	r6,r16,8a0a8 <__divdf3+0x130>
   8a104:	003fe406 	br	8a098 <__divdf3+0x120>
   8a108:	9809883a 	mov	r4,r19
   8a10c:	d9800415 	stw	r6,16(sp)
   8a110:	008aacc0 	call	8aacc <__pack_d>
   8a114:	dfc01217 	ldw	ra,72(sp)
   8a118:	dcc01117 	ldw	r19,68(sp)
   8a11c:	dc801017 	ldw	r18,64(sp)
   8a120:	dc400f17 	ldw	r17,60(sp)
   8a124:	dc000e17 	ldw	r16,56(sp)
   8a128:	dec01304 	addi	sp,sp,76
   8a12c:	f800283a 	ret
   8a130:	00803fc4 	movi	r2,255
   8a134:	7090703a 	and	r8,r14,r2
   8a138:	00802004 	movi	r2,128
   8a13c:	0007883a 	mov	r3,zero
   8a140:	0013883a 	mov	r9,zero
   8a144:	40800d26 	beq	r8,r2,8a17c <__divdf3+0x204>
   8a148:	dbc00815 	stw	r15,32(sp)
   8a14c:	db800715 	stw	r14,28(sp)
   8a150:	003fab06 	br	8a000 <__divdf3+0x88>
   8a154:	343fc92e 	bgeu	r6,r16,8a07c <__divdf3+0x104>
   8a158:	3185883a 	add	r2,r6,r6
   8a15c:	1189803a 	cmpltu	r4,r2,r6
   8a160:	39c7883a 	add	r3,r7,r7
   8a164:	20c9883a 	add	r4,r4,r3
   8a168:	297fffc4 	addi	r5,r5,-1
   8a16c:	100d883a 	mov	r6,r2
   8a170:	200f883a 	mov	r7,r4
   8a174:	d9400615 	stw	r5,24(sp)
   8a178:	003fc006 	br	8a07c <__divdf3+0x104>
   8a17c:	483ff21e 	bne	r9,zero,8a148 <__divdf3+0x1d0>
   8a180:	01004004 	movi	r4,256
   8a184:	7104703a 	and	r2,r14,r4
   8a188:	10c4b03a 	or	r2,r2,r3
   8a18c:	103fee1e 	bne	r2,zero,8a148 <__divdf3+0x1d0>
   8a190:	31c4b03a 	or	r2,r6,r7
   8a194:	103fec26 	beq	r2,zero,8a148 <__divdf3+0x1d0>
   8a198:	7205883a 	add	r2,r14,r8
   8a19c:	1391803a 	cmpltu	r8,r2,r14
   8a1a0:	43d1883a 	add	r8,r8,r15
   8a1a4:	013fc004 	movi	r4,-256
   8a1a8:	111c703a 	and	r14,r2,r4
   8a1ac:	401f883a 	mov	r15,r8
   8a1b0:	003fe506 	br	8a148 <__divdf3+0x1d0>
   8a1b4:	8009883a 	mov	r4,r16
   8a1b8:	003f9206 	br	8a004 <__divdf3+0x8c>
   8a1bc:	9809883a 	mov	r4,r19
   8a1c0:	d8000715 	stw	zero,28(sp)
   8a1c4:	d8000815 	stw	zero,32(sp)
   8a1c8:	d8000615 	stw	zero,24(sp)
   8a1cc:	003f8d06 	br	8a004 <__divdf3+0x8c>

0008a1d0 <__eqdf2>:
   8a1d0:	deffef04 	addi	sp,sp,-68
   8a1d4:	dc400f15 	stw	r17,60(sp)
   8a1d8:	dc400404 	addi	r17,sp,16
   8a1dc:	2005883a 	mov	r2,r4
   8a1e0:	2807883a 	mov	r3,r5
   8a1e4:	dc000e15 	stw	r16,56(sp)
   8a1e8:	d809883a 	mov	r4,sp
   8a1ec:	880b883a 	mov	r5,r17
   8a1f0:	dc000904 	addi	r16,sp,36
   8a1f4:	d8c00115 	stw	r3,4(sp)
   8a1f8:	d8800015 	stw	r2,0(sp)
   8a1fc:	d9800215 	stw	r6,8(sp)
   8a200:	dfc01015 	stw	ra,64(sp)
   8a204:	d9c00315 	stw	r7,12(sp)
   8a208:	008ade00 	call	8ade0 <__unpack_d>
   8a20c:	d9000204 	addi	r4,sp,8
   8a210:	800b883a 	mov	r5,r16
   8a214:	008ade00 	call	8ade0 <__unpack_d>
   8a218:	d8800417 	ldw	r2,16(sp)
   8a21c:	00c00044 	movi	r3,1
   8a220:	180d883a 	mov	r6,r3
   8a224:	1880062e 	bgeu	r3,r2,8a240 <__eqdf2+0x70>
   8a228:	d8800917 	ldw	r2,36(sp)
   8a22c:	8809883a 	mov	r4,r17
   8a230:	800b883a 	mov	r5,r16
   8a234:	1880022e 	bgeu	r3,r2,8a240 <__eqdf2+0x70>
   8a238:	008af180 	call	8af18 <__fpcmp_parts_d>
   8a23c:	100d883a 	mov	r6,r2
   8a240:	3005883a 	mov	r2,r6
   8a244:	dfc01017 	ldw	ra,64(sp)
   8a248:	dc400f17 	ldw	r17,60(sp)
   8a24c:	dc000e17 	ldw	r16,56(sp)
   8a250:	dec01104 	addi	sp,sp,68
   8a254:	f800283a 	ret

0008a258 <__nedf2>:
   8a258:	deffef04 	addi	sp,sp,-68
   8a25c:	dc400f15 	stw	r17,60(sp)
   8a260:	dc400404 	addi	r17,sp,16
   8a264:	2005883a 	mov	r2,r4
   8a268:	2807883a 	mov	r3,r5
   8a26c:	dc000e15 	stw	r16,56(sp)
   8a270:	d809883a 	mov	r4,sp
   8a274:	880b883a 	mov	r5,r17
   8a278:	dc000904 	addi	r16,sp,36
   8a27c:	d8c00115 	stw	r3,4(sp)
   8a280:	d8800015 	stw	r2,0(sp)
   8a284:	d9800215 	stw	r6,8(sp)
   8a288:	dfc01015 	stw	ra,64(sp)
   8a28c:	d9c00315 	stw	r7,12(sp)
   8a290:	008ade00 	call	8ade0 <__unpack_d>
   8a294:	d9000204 	addi	r4,sp,8
   8a298:	800b883a 	mov	r5,r16
   8a29c:	008ade00 	call	8ade0 <__unpack_d>
   8a2a0:	d8800417 	ldw	r2,16(sp)
   8a2a4:	00c00044 	movi	r3,1
   8a2a8:	180d883a 	mov	r6,r3
   8a2ac:	1880062e 	bgeu	r3,r2,8a2c8 <__nedf2+0x70>
   8a2b0:	d8800917 	ldw	r2,36(sp)
   8a2b4:	8809883a 	mov	r4,r17
   8a2b8:	800b883a 	mov	r5,r16
   8a2bc:	1880022e 	bgeu	r3,r2,8a2c8 <__nedf2+0x70>
   8a2c0:	008af180 	call	8af18 <__fpcmp_parts_d>
   8a2c4:	100d883a 	mov	r6,r2
   8a2c8:	3005883a 	mov	r2,r6
   8a2cc:	dfc01017 	ldw	ra,64(sp)
   8a2d0:	dc400f17 	ldw	r17,60(sp)
   8a2d4:	dc000e17 	ldw	r16,56(sp)
   8a2d8:	dec01104 	addi	sp,sp,68
   8a2dc:	f800283a 	ret

0008a2e0 <__gtdf2>:
   8a2e0:	deffef04 	addi	sp,sp,-68
   8a2e4:	dc400f15 	stw	r17,60(sp)
   8a2e8:	dc400404 	addi	r17,sp,16
   8a2ec:	2005883a 	mov	r2,r4
   8a2f0:	2807883a 	mov	r3,r5
   8a2f4:	dc000e15 	stw	r16,56(sp)
   8a2f8:	d809883a 	mov	r4,sp
   8a2fc:	880b883a 	mov	r5,r17
   8a300:	dc000904 	addi	r16,sp,36
   8a304:	d8c00115 	stw	r3,4(sp)
   8a308:	d8800015 	stw	r2,0(sp)
   8a30c:	d9800215 	stw	r6,8(sp)
   8a310:	dfc01015 	stw	ra,64(sp)
   8a314:	d9c00315 	stw	r7,12(sp)
   8a318:	008ade00 	call	8ade0 <__unpack_d>
   8a31c:	d9000204 	addi	r4,sp,8
   8a320:	800b883a 	mov	r5,r16
   8a324:	008ade00 	call	8ade0 <__unpack_d>
   8a328:	d8800417 	ldw	r2,16(sp)
   8a32c:	00c00044 	movi	r3,1
   8a330:	01bfffc4 	movi	r6,-1
   8a334:	1880062e 	bgeu	r3,r2,8a350 <__gtdf2+0x70>
   8a338:	d8800917 	ldw	r2,36(sp)
   8a33c:	8809883a 	mov	r4,r17
   8a340:	800b883a 	mov	r5,r16
   8a344:	1880022e 	bgeu	r3,r2,8a350 <__gtdf2+0x70>
   8a348:	008af180 	call	8af18 <__fpcmp_parts_d>
   8a34c:	100d883a 	mov	r6,r2
   8a350:	3005883a 	mov	r2,r6
   8a354:	dfc01017 	ldw	ra,64(sp)
   8a358:	dc400f17 	ldw	r17,60(sp)
   8a35c:	dc000e17 	ldw	r16,56(sp)
   8a360:	dec01104 	addi	sp,sp,68
   8a364:	f800283a 	ret

0008a368 <__gedf2>:
   8a368:	deffef04 	addi	sp,sp,-68
   8a36c:	dc400f15 	stw	r17,60(sp)
   8a370:	dc400404 	addi	r17,sp,16
   8a374:	2005883a 	mov	r2,r4
   8a378:	2807883a 	mov	r3,r5
   8a37c:	dc000e15 	stw	r16,56(sp)
   8a380:	d809883a 	mov	r4,sp
   8a384:	880b883a 	mov	r5,r17
   8a388:	dc000904 	addi	r16,sp,36
   8a38c:	d8c00115 	stw	r3,4(sp)
   8a390:	d8800015 	stw	r2,0(sp)
   8a394:	d9800215 	stw	r6,8(sp)
   8a398:	dfc01015 	stw	ra,64(sp)
   8a39c:	d9c00315 	stw	r7,12(sp)
   8a3a0:	008ade00 	call	8ade0 <__unpack_d>
   8a3a4:	d9000204 	addi	r4,sp,8
   8a3a8:	800b883a 	mov	r5,r16
   8a3ac:	008ade00 	call	8ade0 <__unpack_d>
   8a3b0:	d8800417 	ldw	r2,16(sp)
   8a3b4:	00c00044 	movi	r3,1
   8a3b8:	01bfffc4 	movi	r6,-1
   8a3bc:	1880062e 	bgeu	r3,r2,8a3d8 <__gedf2+0x70>
   8a3c0:	d8800917 	ldw	r2,36(sp)
   8a3c4:	8809883a 	mov	r4,r17
   8a3c8:	800b883a 	mov	r5,r16
   8a3cc:	1880022e 	bgeu	r3,r2,8a3d8 <__gedf2+0x70>
   8a3d0:	008af180 	call	8af18 <__fpcmp_parts_d>
   8a3d4:	100d883a 	mov	r6,r2
   8a3d8:	3005883a 	mov	r2,r6
   8a3dc:	dfc01017 	ldw	ra,64(sp)
   8a3e0:	dc400f17 	ldw	r17,60(sp)
   8a3e4:	dc000e17 	ldw	r16,56(sp)
   8a3e8:	dec01104 	addi	sp,sp,68
   8a3ec:	f800283a 	ret

0008a3f0 <__ltdf2>:
   8a3f0:	deffef04 	addi	sp,sp,-68
   8a3f4:	dc400f15 	stw	r17,60(sp)
   8a3f8:	dc400404 	addi	r17,sp,16
   8a3fc:	2005883a 	mov	r2,r4
   8a400:	2807883a 	mov	r3,r5
   8a404:	dc000e15 	stw	r16,56(sp)
   8a408:	d809883a 	mov	r4,sp
   8a40c:	880b883a 	mov	r5,r17
   8a410:	dc000904 	addi	r16,sp,36
   8a414:	d8c00115 	stw	r3,4(sp)
   8a418:	d8800015 	stw	r2,0(sp)
   8a41c:	d9800215 	stw	r6,8(sp)
   8a420:	dfc01015 	stw	ra,64(sp)
   8a424:	d9c00315 	stw	r7,12(sp)
   8a428:	008ade00 	call	8ade0 <__unpack_d>
   8a42c:	d9000204 	addi	r4,sp,8
   8a430:	800b883a 	mov	r5,r16
   8a434:	008ade00 	call	8ade0 <__unpack_d>
   8a438:	d8800417 	ldw	r2,16(sp)
   8a43c:	00c00044 	movi	r3,1
   8a440:	180d883a 	mov	r6,r3
   8a444:	1880062e 	bgeu	r3,r2,8a460 <__ltdf2+0x70>
   8a448:	d8800917 	ldw	r2,36(sp)
   8a44c:	8809883a 	mov	r4,r17
   8a450:	800b883a 	mov	r5,r16
   8a454:	1880022e 	bgeu	r3,r2,8a460 <__ltdf2+0x70>
   8a458:	008af180 	call	8af18 <__fpcmp_parts_d>
   8a45c:	100d883a 	mov	r6,r2
   8a460:	3005883a 	mov	r2,r6
   8a464:	dfc01017 	ldw	ra,64(sp)
   8a468:	dc400f17 	ldw	r17,60(sp)
   8a46c:	dc000e17 	ldw	r16,56(sp)
   8a470:	dec01104 	addi	sp,sp,68
   8a474:	f800283a 	ret

0008a478 <__floatsidf>:
   8a478:	2006d7fa 	srli	r3,r4,31
   8a47c:	defff604 	addi	sp,sp,-40
   8a480:	008000c4 	movi	r2,3
   8a484:	dfc00915 	stw	ra,36(sp)
   8a488:	dcc00815 	stw	r19,32(sp)
   8a48c:	dc800715 	stw	r18,28(sp)
   8a490:	dc400615 	stw	r17,24(sp)
   8a494:	dc000515 	stw	r16,20(sp)
   8a498:	d8800015 	stw	r2,0(sp)
   8a49c:	d8c00115 	stw	r3,4(sp)
   8a4a0:	20000f1e 	bne	r4,zero,8a4e0 <__floatsidf+0x68>
   8a4a4:	00800084 	movi	r2,2
   8a4a8:	d8800015 	stw	r2,0(sp)
   8a4ac:	d809883a 	mov	r4,sp
   8a4b0:	008aacc0 	call	8aacc <__pack_d>
   8a4b4:	1009883a 	mov	r4,r2
   8a4b8:	180b883a 	mov	r5,r3
   8a4bc:	2005883a 	mov	r2,r4
   8a4c0:	2807883a 	mov	r3,r5
   8a4c4:	dfc00917 	ldw	ra,36(sp)
   8a4c8:	dcc00817 	ldw	r19,32(sp)
   8a4cc:	dc800717 	ldw	r18,28(sp)
   8a4d0:	dc400617 	ldw	r17,24(sp)
   8a4d4:	dc000517 	ldw	r16,20(sp)
   8a4d8:	dec00a04 	addi	sp,sp,40
   8a4dc:	f800283a 	ret
   8a4e0:	00800f04 	movi	r2,60
   8a4e4:	1807003a 	cmpeq	r3,r3,zero
   8a4e8:	d8800215 	stw	r2,8(sp)
   8a4ec:	18001126 	beq	r3,zero,8a534 <__floatsidf+0xbc>
   8a4f0:	0027883a 	mov	r19,zero
   8a4f4:	2025883a 	mov	r18,r4
   8a4f8:	d9000315 	stw	r4,12(sp)
   8a4fc:	dcc00415 	stw	r19,16(sp)
   8a500:	008aa4c0 	call	8aa4c <__clzsi2>
   8a504:	11000744 	addi	r4,r2,29
   8a508:	013fe80e 	bge	zero,r4,8a4ac <__floatsidf+0x34>
   8a50c:	10bfff44 	addi	r2,r2,-3
   8a510:	10000c16 	blt	r2,zero,8a544 <__floatsidf+0xcc>
   8a514:	90a2983a 	sll	r17,r18,r2
   8a518:	0021883a 	mov	r16,zero
   8a51c:	d8800217 	ldw	r2,8(sp)
   8a520:	dc400415 	stw	r17,16(sp)
   8a524:	dc000315 	stw	r16,12(sp)
   8a528:	1105c83a 	sub	r2,r2,r4
   8a52c:	d8800215 	stw	r2,8(sp)
   8a530:	003fde06 	br	8a4ac <__floatsidf+0x34>
   8a534:	00a00034 	movhi	r2,32768
   8a538:	20800a26 	beq	r4,r2,8a564 <__floatsidf+0xec>
   8a53c:	0109c83a 	sub	r4,zero,r4
   8a540:	003feb06 	br	8a4f0 <__floatsidf+0x78>
   8a544:	9006d07a 	srli	r3,r18,1
   8a548:	008007c4 	movi	r2,31
   8a54c:	1105c83a 	sub	r2,r2,r4
   8a550:	1886d83a 	srl	r3,r3,r2
   8a554:	9922983a 	sll	r17,r19,r4
   8a558:	9120983a 	sll	r16,r18,r4
   8a55c:	1c62b03a 	or	r17,r3,r17
   8a560:	003fee06 	br	8a51c <__floatsidf+0xa4>
   8a564:	0009883a 	mov	r4,zero
   8a568:	01707834 	movhi	r5,49632
   8a56c:	003fd306 	br	8a4bc <__floatsidf+0x44>

0008a570 <__fixdfsi>:
   8a570:	defff804 	addi	sp,sp,-32
   8a574:	2005883a 	mov	r2,r4
   8a578:	2807883a 	mov	r3,r5
   8a57c:	d809883a 	mov	r4,sp
   8a580:	d9400204 	addi	r5,sp,8
   8a584:	d8c00115 	stw	r3,4(sp)
   8a588:	d8800015 	stw	r2,0(sp)
   8a58c:	dfc00715 	stw	ra,28(sp)
   8a590:	008ade00 	call	8ade0 <__unpack_d>
   8a594:	d8c00217 	ldw	r3,8(sp)
   8a598:	00800084 	movi	r2,2
   8a59c:	1880051e 	bne	r3,r2,8a5b4 <__fixdfsi+0x44>
   8a5a0:	0007883a 	mov	r3,zero
   8a5a4:	1805883a 	mov	r2,r3
   8a5a8:	dfc00717 	ldw	ra,28(sp)
   8a5ac:	dec00804 	addi	sp,sp,32
   8a5b0:	f800283a 	ret
   8a5b4:	00800044 	movi	r2,1
   8a5b8:	10fff92e 	bgeu	r2,r3,8a5a0 <__fixdfsi+0x30>
   8a5bc:	00800104 	movi	r2,4
   8a5c0:	18800426 	beq	r3,r2,8a5d4 <__fixdfsi+0x64>
   8a5c4:	d8c00417 	ldw	r3,16(sp)
   8a5c8:	183ff516 	blt	r3,zero,8a5a0 <__fixdfsi+0x30>
   8a5cc:	00800784 	movi	r2,30
   8a5d0:	10c0080e 	bge	r2,r3,8a5f4 <__fixdfsi+0x84>
   8a5d4:	d8800317 	ldw	r2,12(sp)
   8a5d8:	1000121e 	bne	r2,zero,8a624 <__fixdfsi+0xb4>
   8a5dc:	00e00034 	movhi	r3,32768
   8a5e0:	18ffffc4 	addi	r3,r3,-1
   8a5e4:	1805883a 	mov	r2,r3
   8a5e8:	dfc00717 	ldw	ra,28(sp)
   8a5ec:	dec00804 	addi	sp,sp,32
   8a5f0:	f800283a 	ret
   8a5f4:	00800f04 	movi	r2,60
   8a5f8:	10d1c83a 	sub	r8,r2,r3
   8a5fc:	40bff804 	addi	r2,r8,-32
   8a600:	d9800517 	ldw	r6,20(sp)
   8a604:	d9c00617 	ldw	r7,24(sp)
   8a608:	10000816 	blt	r2,zero,8a62c <__fixdfsi+0xbc>
   8a60c:	3888d83a 	srl	r4,r7,r2
   8a610:	d8800317 	ldw	r2,12(sp)
   8a614:	2007883a 	mov	r3,r4
   8a618:	103fe226 	beq	r2,zero,8a5a4 <__fixdfsi+0x34>
   8a61c:	0107c83a 	sub	r3,zero,r4
   8a620:	003fe006 	br	8a5a4 <__fixdfsi+0x34>
   8a624:	00e00034 	movhi	r3,32768
   8a628:	003fde06 	br	8a5a4 <__fixdfsi+0x34>
   8a62c:	39c7883a 	add	r3,r7,r7
   8a630:	008007c4 	movi	r2,31
   8a634:	1205c83a 	sub	r2,r2,r8
   8a638:	1886983a 	sll	r3,r3,r2
   8a63c:	3208d83a 	srl	r4,r6,r8
   8a640:	1908b03a 	or	r4,r3,r4
   8a644:	003ff206 	br	8a610 <__fixdfsi+0xa0>

0008a648 <__floatunsidf>:
   8a648:	defff204 	addi	sp,sp,-56
   8a64c:	dfc00d15 	stw	ra,52(sp)
   8a650:	ddc00c15 	stw	r23,48(sp)
   8a654:	dd800b15 	stw	r22,44(sp)
   8a658:	dd400a15 	stw	r21,40(sp)
   8a65c:	dd000915 	stw	r20,36(sp)
   8a660:	dcc00815 	stw	r19,32(sp)
   8a664:	dc800715 	stw	r18,28(sp)
   8a668:	dc400615 	stw	r17,24(sp)
   8a66c:	dc000515 	stw	r16,20(sp)
   8a670:	d8000115 	stw	zero,4(sp)
   8a674:	20000f1e 	bne	r4,zero,8a6b4 <__floatunsidf+0x6c>
   8a678:	00800084 	movi	r2,2
   8a67c:	d8800015 	stw	r2,0(sp)
   8a680:	d809883a 	mov	r4,sp
   8a684:	008aacc0 	call	8aacc <__pack_d>
   8a688:	dfc00d17 	ldw	ra,52(sp)
   8a68c:	ddc00c17 	ldw	r23,48(sp)
   8a690:	dd800b17 	ldw	r22,44(sp)
   8a694:	dd400a17 	ldw	r21,40(sp)
   8a698:	dd000917 	ldw	r20,36(sp)
   8a69c:	dcc00817 	ldw	r19,32(sp)
   8a6a0:	dc800717 	ldw	r18,28(sp)
   8a6a4:	dc400617 	ldw	r17,24(sp)
   8a6a8:	dc000517 	ldw	r16,20(sp)
   8a6ac:	dec00e04 	addi	sp,sp,56
   8a6b0:	f800283a 	ret
   8a6b4:	008000c4 	movi	r2,3
   8a6b8:	00c00f04 	movi	r3,60
   8a6bc:	002f883a 	mov	r23,zero
   8a6c0:	202d883a 	mov	r22,r4
   8a6c4:	d8800015 	stw	r2,0(sp)
   8a6c8:	d8c00215 	stw	r3,8(sp)
   8a6cc:	d9000315 	stw	r4,12(sp)
   8a6d0:	ddc00415 	stw	r23,16(sp)
   8a6d4:	008aa4c0 	call	8aa4c <__clzsi2>
   8a6d8:	12400744 	addi	r9,r2,29
   8a6dc:	48000b16 	blt	r9,zero,8a70c <__floatunsidf+0xc4>
   8a6e0:	483fe726 	beq	r9,zero,8a680 <__floatunsidf+0x38>
   8a6e4:	10bfff44 	addi	r2,r2,-3
   8a6e8:	10002e16 	blt	r2,zero,8a7a4 <__floatunsidf+0x15c>
   8a6ec:	b0a2983a 	sll	r17,r22,r2
   8a6f0:	0021883a 	mov	r16,zero
   8a6f4:	d8800217 	ldw	r2,8(sp)
   8a6f8:	dc400415 	stw	r17,16(sp)
   8a6fc:	dc000315 	stw	r16,12(sp)
   8a700:	1245c83a 	sub	r2,r2,r9
   8a704:	d8800215 	stw	r2,8(sp)
   8a708:	003fdd06 	br	8a680 <__floatunsidf+0x38>
   8a70c:	0255c83a 	sub	r10,zero,r9
   8a710:	51bff804 	addi	r6,r10,-32
   8a714:	30001b16 	blt	r6,zero,8a784 <__floatunsidf+0x13c>
   8a718:	b9a8d83a 	srl	r20,r23,r6
   8a71c:	002b883a 	mov	r21,zero
   8a720:	000f883a 	mov	r7,zero
   8a724:	01000044 	movi	r4,1
   8a728:	0011883a 	mov	r8,zero
   8a72c:	30002516 	blt	r6,zero,8a7c4 <__floatunsidf+0x17c>
   8a730:	21a6983a 	sll	r19,r4,r6
   8a734:	0025883a 	mov	r18,zero
   8a738:	00bfffc4 	movi	r2,-1
   8a73c:	9089883a 	add	r4,r18,r2
   8a740:	988b883a 	add	r5,r19,r2
   8a744:	248d803a 	cmpltu	r6,r4,r18
   8a748:	314b883a 	add	r5,r6,r5
   8a74c:	b104703a 	and	r2,r22,r4
   8a750:	b946703a 	and	r3,r23,r5
   8a754:	10c4b03a 	or	r2,r2,r3
   8a758:	10000226 	beq	r2,zero,8a764 <__floatunsidf+0x11c>
   8a75c:	01c00044 	movi	r7,1
   8a760:	0011883a 	mov	r8,zero
   8a764:	d9000217 	ldw	r4,8(sp)
   8a768:	a1c4b03a 	or	r2,r20,r7
   8a76c:	aa06b03a 	or	r3,r21,r8
   8a770:	2249c83a 	sub	r4,r4,r9
   8a774:	d8c00415 	stw	r3,16(sp)
   8a778:	d9000215 	stw	r4,8(sp)
   8a77c:	d8800315 	stw	r2,12(sp)
   8a780:	003fbf06 	br	8a680 <__floatunsidf+0x38>
   8a784:	bdc7883a 	add	r3,r23,r23
   8a788:	008007c4 	movi	r2,31
   8a78c:	1285c83a 	sub	r2,r2,r10
   8a790:	1886983a 	sll	r3,r3,r2
   8a794:	b2a8d83a 	srl	r20,r22,r10
   8a798:	baaad83a 	srl	r21,r23,r10
   8a79c:	1d28b03a 	or	r20,r3,r20
   8a7a0:	003fdf06 	br	8a720 <__floatunsidf+0xd8>
   8a7a4:	b006d07a 	srli	r3,r22,1
   8a7a8:	008007c4 	movi	r2,31
   8a7ac:	1245c83a 	sub	r2,r2,r9
   8a7b0:	1886d83a 	srl	r3,r3,r2
   8a7b4:	ba62983a 	sll	r17,r23,r9
   8a7b8:	b260983a 	sll	r16,r22,r9
   8a7bc:	1c62b03a 	or	r17,r3,r17
   8a7c0:	003fcc06 	br	8a6f4 <__floatunsidf+0xac>
   8a7c4:	2006d07a 	srli	r3,r4,1
   8a7c8:	008007c4 	movi	r2,31
   8a7cc:	1285c83a 	sub	r2,r2,r10
   8a7d0:	18a6d83a 	srl	r19,r3,r2
   8a7d4:	22a4983a 	sll	r18,r4,r10
   8a7d8:	003fd706 	br	8a738 <__floatunsidf+0xf0>

0008a7dc <udivmodsi4>:
   8a7dc:	29001b2e 	bgeu	r5,r4,8a84c <udivmodsi4+0x70>
   8a7e0:	28001a16 	blt	r5,zero,8a84c <udivmodsi4+0x70>
   8a7e4:	00800044 	movi	r2,1
   8a7e8:	0007883a 	mov	r3,zero
   8a7ec:	01c007c4 	movi	r7,31
   8a7f0:	00000306 	br	8a800 <udivmodsi4+0x24>
   8a7f4:	19c01326 	beq	r3,r7,8a844 <udivmodsi4+0x68>
   8a7f8:	18c00044 	addi	r3,r3,1
   8a7fc:	28000416 	blt	r5,zero,8a810 <udivmodsi4+0x34>
   8a800:	294b883a 	add	r5,r5,r5
   8a804:	1085883a 	add	r2,r2,r2
   8a808:	293ffa36 	bltu	r5,r4,8a7f4 <udivmodsi4+0x18>
   8a80c:	10000d26 	beq	r2,zero,8a844 <udivmodsi4+0x68>
   8a810:	0007883a 	mov	r3,zero
   8a814:	21400236 	bltu	r4,r5,8a820 <udivmodsi4+0x44>
   8a818:	2149c83a 	sub	r4,r4,r5
   8a81c:	1886b03a 	or	r3,r3,r2
   8a820:	1004d07a 	srli	r2,r2,1
   8a824:	280ad07a 	srli	r5,r5,1
   8a828:	103ffa1e 	bne	r2,zero,8a814 <udivmodsi4+0x38>
   8a82c:	30000226 	beq	r6,zero,8a838 <udivmodsi4+0x5c>
   8a830:	2005883a 	mov	r2,r4
   8a834:	f800283a 	ret
   8a838:	1809883a 	mov	r4,r3
   8a83c:	2005883a 	mov	r2,r4
   8a840:	f800283a 	ret
   8a844:	0007883a 	mov	r3,zero
   8a848:	003ff806 	br	8a82c <udivmodsi4+0x50>
   8a84c:	00800044 	movi	r2,1
   8a850:	0007883a 	mov	r3,zero
   8a854:	003fef06 	br	8a814 <udivmodsi4+0x38>

0008a858 <__divsi3>:
   8a858:	defffe04 	addi	sp,sp,-8
   8a85c:	dc000015 	stw	r16,0(sp)
   8a860:	dfc00115 	stw	ra,4(sp)
   8a864:	0021883a 	mov	r16,zero
   8a868:	20000c16 	blt	r4,zero,8a89c <__divsi3+0x44>
   8a86c:	000d883a 	mov	r6,zero
   8a870:	28000e16 	blt	r5,zero,8a8ac <__divsi3+0x54>
   8a874:	008a7dc0 	call	8a7dc <udivmodsi4>
   8a878:	1007883a 	mov	r3,r2
   8a87c:	8005003a 	cmpeq	r2,r16,zero
   8a880:	1000011e 	bne	r2,zero,8a888 <__divsi3+0x30>
   8a884:	00c7c83a 	sub	r3,zero,r3
   8a888:	1805883a 	mov	r2,r3
   8a88c:	dfc00117 	ldw	ra,4(sp)
   8a890:	dc000017 	ldw	r16,0(sp)
   8a894:	dec00204 	addi	sp,sp,8
   8a898:	f800283a 	ret
   8a89c:	0109c83a 	sub	r4,zero,r4
   8a8a0:	04000044 	movi	r16,1
   8a8a4:	000d883a 	mov	r6,zero
   8a8a8:	283ff20e 	bge	r5,zero,8a874 <__divsi3+0x1c>
   8a8ac:	014bc83a 	sub	r5,zero,r5
   8a8b0:	8021003a 	cmpeq	r16,r16,zero
   8a8b4:	003fef06 	br	8a874 <__divsi3+0x1c>

0008a8b8 <__modsi3>:
   8a8b8:	deffff04 	addi	sp,sp,-4
   8a8bc:	dfc00015 	stw	ra,0(sp)
   8a8c0:	01800044 	movi	r6,1
   8a8c4:	2807883a 	mov	r3,r5
   8a8c8:	20000416 	blt	r4,zero,8a8dc <__modsi3+0x24>
   8a8cc:	28000c16 	blt	r5,zero,8a900 <__modsi3+0x48>
   8a8d0:	dfc00017 	ldw	ra,0(sp)
   8a8d4:	dec00104 	addi	sp,sp,4
   8a8d8:	008a7dc1 	jmpi	8a7dc <udivmodsi4>
   8a8dc:	0109c83a 	sub	r4,zero,r4
   8a8e0:	28000b16 	blt	r5,zero,8a910 <__modsi3+0x58>
   8a8e4:	180b883a 	mov	r5,r3
   8a8e8:	01800044 	movi	r6,1
   8a8ec:	008a7dc0 	call	8a7dc <udivmodsi4>
   8a8f0:	0085c83a 	sub	r2,zero,r2
   8a8f4:	dfc00017 	ldw	ra,0(sp)
   8a8f8:	dec00104 	addi	sp,sp,4
   8a8fc:	f800283a 	ret
   8a900:	014bc83a 	sub	r5,zero,r5
   8a904:	dfc00017 	ldw	ra,0(sp)
   8a908:	dec00104 	addi	sp,sp,4
   8a90c:	008a7dc1 	jmpi	8a7dc <udivmodsi4>
   8a910:	0147c83a 	sub	r3,zero,r5
   8a914:	003ff306 	br	8a8e4 <__modsi3+0x2c>

0008a918 <__udivsi3>:
   8a918:	000d883a 	mov	r6,zero
   8a91c:	008a7dc1 	jmpi	8a7dc <udivmodsi4>

0008a920 <__umodsi3>:
   8a920:	01800044 	movi	r6,1
   8a924:	008a7dc1 	jmpi	8a7dc <udivmodsi4>

0008a928 <__muldi3>:
   8a928:	defff204 	addi	sp,sp,-56
   8a92c:	df000c15 	stw	fp,48(sp)
   8a930:	3038d43a 	srli	fp,r6,16
   8a934:	dd000815 	stw	r20,32(sp)
   8a938:	dc400515 	stw	r17,20(sp)
   8a93c:	2028d43a 	srli	r20,r4,16
   8a940:	247fffcc 	andi	r17,r4,65535
   8a944:	dc000415 	stw	r16,16(sp)
   8a948:	343fffcc 	andi	r16,r6,65535
   8a94c:	dcc00715 	stw	r19,28(sp)
   8a950:	d9000015 	stw	r4,0(sp)
   8a954:	2827883a 	mov	r19,r5
   8a958:	8809883a 	mov	r4,r17
   8a95c:	d9400115 	stw	r5,4(sp)
   8a960:	800b883a 	mov	r5,r16
   8a964:	d9800215 	stw	r6,8(sp)
   8a968:	dfc00d15 	stw	ra,52(sp)
   8a96c:	d9c00315 	stw	r7,12(sp)
   8a970:	dd800a15 	stw	r22,40(sp)
   8a974:	dd400915 	stw	r21,36(sp)
   8a978:	302d883a 	mov	r22,r6
   8a97c:	ddc00b15 	stw	r23,44(sp)
   8a980:	dc800615 	stw	r18,24(sp)
   8a984:	00812180 	call	81218 <__mulsi3>
   8a988:	8809883a 	mov	r4,r17
   8a98c:	e00b883a 	mov	r5,fp
   8a990:	102b883a 	mov	r21,r2
   8a994:	00812180 	call	81218 <__mulsi3>
   8a998:	800b883a 	mov	r5,r16
   8a99c:	a009883a 	mov	r4,r20
   8a9a0:	1023883a 	mov	r17,r2
   8a9a4:	00812180 	call	81218 <__mulsi3>
   8a9a8:	a009883a 	mov	r4,r20
   8a9ac:	e00b883a 	mov	r5,fp
   8a9b0:	1021883a 	mov	r16,r2
   8a9b4:	00812180 	call	81218 <__mulsi3>
   8a9b8:	a8ffffcc 	andi	r3,r21,65535
   8a9bc:	a82ad43a 	srli	r21,r21,16
   8a9c0:	8c23883a 	add	r17,r17,r16
   8a9c4:	1011883a 	mov	r8,r2
   8a9c8:	ac6b883a 	add	r21,r21,r17
   8a9cc:	a804943a 	slli	r2,r21,16
   8a9d0:	b009883a 	mov	r4,r22
   8a9d4:	980b883a 	mov	r5,r19
   8a9d8:	10c7883a 	add	r3,r2,r3
   8a9dc:	a812d43a 	srli	r9,r21,16
   8a9e0:	180d883a 	mov	r6,r3
   8a9e4:	ac00022e 	bgeu	r21,r16,8a9f0 <__muldi3+0xc8>
   8a9e8:	00800074 	movhi	r2,1
   8a9ec:	4091883a 	add	r8,r8,r2
   8a9f0:	4267883a 	add	r19,r8,r9
   8a9f4:	302d883a 	mov	r22,r6
   8a9f8:	00812180 	call	81218 <__mulsi3>
   8a9fc:	d9400317 	ldw	r5,12(sp)
   8aa00:	d9000017 	ldw	r4,0(sp)
   8aa04:	1023883a 	mov	r17,r2
   8aa08:	00812180 	call	81218 <__mulsi3>
   8aa0c:	14cb883a 	add	r5,r2,r19
   8aa10:	894b883a 	add	r5,r17,r5
   8aa14:	b005883a 	mov	r2,r22
   8aa18:	2807883a 	mov	r3,r5
   8aa1c:	dfc00d17 	ldw	ra,52(sp)
   8aa20:	df000c17 	ldw	fp,48(sp)
   8aa24:	ddc00b17 	ldw	r23,44(sp)
   8aa28:	dd800a17 	ldw	r22,40(sp)
   8aa2c:	dd400917 	ldw	r21,36(sp)
   8aa30:	dd000817 	ldw	r20,32(sp)
   8aa34:	dcc00717 	ldw	r19,28(sp)
   8aa38:	dc800617 	ldw	r18,24(sp)
   8aa3c:	dc400517 	ldw	r17,20(sp)
   8aa40:	dc000417 	ldw	r16,16(sp)
   8aa44:	dec00e04 	addi	sp,sp,56
   8aa48:	f800283a 	ret

0008aa4c <__clzsi2>:
   8aa4c:	00bfffd4 	movui	r2,65535
   8aa50:	11000e36 	bltu	r2,r4,8aa8c <__clzsi2+0x40>
   8aa54:	00803fc4 	movi	r2,255
   8aa58:	01400204 	movi	r5,8
   8aa5c:	0007883a 	mov	r3,zero
   8aa60:	11001036 	bltu	r2,r4,8aaa4 <__clzsi2+0x58>
   8aa64:	000b883a 	mov	r5,zero
   8aa68:	20c6d83a 	srl	r3,r4,r3
   8aa6c:	00800274 	movhi	r2,9
   8aa70:	10b7ab04 	addi	r2,r2,-8532
   8aa74:	1887883a 	add	r3,r3,r2
   8aa78:	18800003 	ldbu	r2,0(r3)
   8aa7c:	00c00804 	movi	r3,32
   8aa80:	2885883a 	add	r2,r5,r2
   8aa84:	1885c83a 	sub	r2,r3,r2
   8aa88:	f800283a 	ret
   8aa8c:	01400404 	movi	r5,16
   8aa90:	00804034 	movhi	r2,256
   8aa94:	10bfffc4 	addi	r2,r2,-1
   8aa98:	2807883a 	mov	r3,r5
   8aa9c:	113ff22e 	bgeu	r2,r4,8aa68 <__clzsi2+0x1c>
   8aaa0:	01400604 	movi	r5,24
   8aaa4:	2807883a 	mov	r3,r5
   8aaa8:	20c6d83a 	srl	r3,r4,r3
   8aaac:	00800274 	movhi	r2,9
   8aab0:	10b7ab04 	addi	r2,r2,-8532
   8aab4:	1887883a 	add	r3,r3,r2
   8aab8:	18800003 	ldbu	r2,0(r3)
   8aabc:	00c00804 	movi	r3,32
   8aac0:	2885883a 	add	r2,r5,r2
   8aac4:	1885c83a 	sub	r2,r3,r2
   8aac8:	f800283a 	ret

0008aacc <__pack_d>:
   8aacc:	20c00017 	ldw	r3,0(r4)
   8aad0:	defffd04 	addi	sp,sp,-12
   8aad4:	dc000015 	stw	r16,0(sp)
   8aad8:	dc800215 	stw	r18,8(sp)
   8aadc:	dc400115 	stw	r17,4(sp)
   8aae0:	00800044 	movi	r2,1
   8aae4:	22000317 	ldw	r8,12(r4)
   8aae8:	001f883a 	mov	r15,zero
   8aaec:	22400417 	ldw	r9,16(r4)
   8aaf0:	24000117 	ldw	r16,4(r4)
   8aaf4:	10c0552e 	bgeu	r2,r3,8ac4c <__pack_d+0x180>
   8aaf8:	00800104 	movi	r2,4
   8aafc:	18804f26 	beq	r3,r2,8ac3c <__pack_d+0x170>
   8ab00:	00800084 	movi	r2,2
   8ab04:	18800226 	beq	r3,r2,8ab10 <__pack_d+0x44>
   8ab08:	4244b03a 	or	r2,r8,r9
   8ab0c:	10001a1e 	bne	r2,zero,8ab78 <__pack_d+0xac>
   8ab10:	000d883a 	mov	r6,zero
   8ab14:	000f883a 	mov	r7,zero
   8ab18:	0011883a 	mov	r8,zero
   8ab1c:	00800434 	movhi	r2,16
   8ab20:	10bfffc4 	addi	r2,r2,-1
   8ab24:	301d883a 	mov	r14,r6
   8ab28:	3884703a 	and	r2,r7,r2
   8ab2c:	400a953a 	slli	r5,r8,20
   8ab30:	79bffc2c 	andhi	r6,r15,65520
   8ab34:	308cb03a 	or	r6,r6,r2
   8ab38:	00e00434 	movhi	r3,32784
   8ab3c:	18ffffc4 	addi	r3,r3,-1
   8ab40:	800497fa 	slli	r2,r16,31
   8ab44:	30c6703a 	and	r3,r6,r3
   8ab48:	1946b03a 	or	r3,r3,r5
   8ab4c:	01600034 	movhi	r5,32768
   8ab50:	297fffc4 	addi	r5,r5,-1
   8ab54:	194a703a 	and	r5,r3,r5
   8ab58:	288ab03a 	or	r5,r5,r2
   8ab5c:	2807883a 	mov	r3,r5
   8ab60:	7005883a 	mov	r2,r14
   8ab64:	dc800217 	ldw	r18,8(sp)
   8ab68:	dc400117 	ldw	r17,4(sp)
   8ab6c:	dc000017 	ldw	r16,0(sp)
   8ab70:	dec00304 	addi	sp,sp,12
   8ab74:	f800283a 	ret
   8ab78:	21000217 	ldw	r4,8(r4)
   8ab7c:	00bf0084 	movi	r2,-1022
   8ab80:	20803f16 	blt	r4,r2,8ac80 <__pack_d+0x1b4>
   8ab84:	0080ffc4 	movi	r2,1023
   8ab88:	11002c16 	blt	r2,r4,8ac3c <__pack_d+0x170>
   8ab8c:	00803fc4 	movi	r2,255
   8ab90:	408c703a 	and	r6,r8,r2
   8ab94:	00802004 	movi	r2,128
   8ab98:	0007883a 	mov	r3,zero
   8ab9c:	000f883a 	mov	r7,zero
   8aba0:	2280ffc4 	addi	r10,r4,1023
   8aba4:	30801e26 	beq	r6,r2,8ac20 <__pack_d+0x154>
   8aba8:	00801fc4 	movi	r2,127
   8abac:	4089883a 	add	r4,r8,r2
   8abb0:	220d803a 	cmpltu	r6,r4,r8
   8abb4:	324d883a 	add	r6,r6,r9
   8abb8:	2011883a 	mov	r8,r4
   8abbc:	3013883a 	mov	r9,r6
   8abc0:	00880034 	movhi	r2,8192
   8abc4:	10bfffc4 	addi	r2,r2,-1
   8abc8:	12400d36 	bltu	r2,r9,8ac00 <__pack_d+0x134>
   8abcc:	4804963a 	slli	r2,r9,24
   8abd0:	400cd23a 	srli	r6,r8,8
   8abd4:	480ed23a 	srli	r7,r9,8
   8abd8:	013fffc4 	movi	r4,-1
   8abdc:	118cb03a 	or	r6,r2,r6
   8abe0:	01400434 	movhi	r5,16
   8abe4:	297fffc4 	addi	r5,r5,-1
   8abe8:	3104703a 	and	r2,r6,r4
   8abec:	3946703a 	and	r3,r7,r5
   8abf0:	5201ffcc 	andi	r8,r10,2047
   8abf4:	100d883a 	mov	r6,r2
   8abf8:	180f883a 	mov	r7,r3
   8abfc:	003fc706 	br	8ab1c <__pack_d+0x50>
   8ac00:	480897fa 	slli	r4,r9,31
   8ac04:	4004d07a 	srli	r2,r8,1
   8ac08:	4806d07a 	srli	r3,r9,1
   8ac0c:	52800044 	addi	r10,r10,1
   8ac10:	2084b03a 	or	r2,r4,r2
   8ac14:	1011883a 	mov	r8,r2
   8ac18:	1813883a 	mov	r9,r3
   8ac1c:	003feb06 	br	8abcc <__pack_d+0x100>
   8ac20:	383fe11e 	bne	r7,zero,8aba8 <__pack_d+0xdc>
   8ac24:	01004004 	movi	r4,256
   8ac28:	4104703a 	and	r2,r8,r4
   8ac2c:	10c4b03a 	or	r2,r2,r3
   8ac30:	103fe326 	beq	r2,zero,8abc0 <__pack_d+0xf4>
   8ac34:	3005883a 	mov	r2,r6
   8ac38:	003fdc06 	br	8abac <__pack_d+0xe0>
   8ac3c:	000d883a 	mov	r6,zero
   8ac40:	000f883a 	mov	r7,zero
   8ac44:	0201ffc4 	movi	r8,2047
   8ac48:	003fb406 	br	8ab1c <__pack_d+0x50>
   8ac4c:	0005883a 	mov	r2,zero
   8ac50:	00c00234 	movhi	r3,8
   8ac54:	408cb03a 	or	r6,r8,r2
   8ac58:	48ceb03a 	or	r7,r9,r3
   8ac5c:	013fffc4 	movi	r4,-1
   8ac60:	01400434 	movhi	r5,16
   8ac64:	297fffc4 	addi	r5,r5,-1
   8ac68:	3104703a 	and	r2,r6,r4
   8ac6c:	3946703a 	and	r3,r7,r5
   8ac70:	100d883a 	mov	r6,r2
   8ac74:	180f883a 	mov	r7,r3
   8ac78:	0201ffc4 	movi	r8,2047
   8ac7c:	003fa706 	br	8ab1c <__pack_d+0x50>
   8ac80:	1109c83a 	sub	r4,r2,r4
   8ac84:	00800e04 	movi	r2,56
   8ac88:	11004316 	blt	r2,r4,8ad98 <__pack_d+0x2cc>
   8ac8c:	21fff804 	addi	r7,r4,-32
   8ac90:	38004516 	blt	r7,zero,8ada8 <__pack_d+0x2dc>
   8ac94:	49d8d83a 	srl	r12,r9,r7
   8ac98:	001b883a 	mov	r13,zero
   8ac9c:	0023883a 	mov	r17,zero
   8aca0:	01400044 	movi	r5,1
   8aca4:	0025883a 	mov	r18,zero
   8aca8:	38004716 	blt	r7,zero,8adc8 <__pack_d+0x2fc>
   8acac:	29d6983a 	sll	r11,r5,r7
   8acb0:	0015883a 	mov	r10,zero
   8acb4:	00bfffc4 	movi	r2,-1
   8acb8:	5089883a 	add	r4,r10,r2
   8acbc:	588b883a 	add	r5,r11,r2
   8acc0:	228d803a 	cmpltu	r6,r4,r10
   8acc4:	314b883a 	add	r5,r6,r5
   8acc8:	4104703a 	and	r2,r8,r4
   8accc:	4946703a 	and	r3,r9,r5
   8acd0:	10c4b03a 	or	r2,r2,r3
   8acd4:	10000226 	beq	r2,zero,8ace0 <__pack_d+0x214>
   8acd8:	04400044 	movi	r17,1
   8acdc:	0025883a 	mov	r18,zero
   8ace0:	00803fc4 	movi	r2,255
   8ace4:	644eb03a 	or	r7,r12,r17
   8ace8:	3892703a 	and	r9,r7,r2
   8acec:	00802004 	movi	r2,128
   8acf0:	6c90b03a 	or	r8,r13,r18
   8acf4:	0015883a 	mov	r10,zero
   8acf8:	48801626 	beq	r9,r2,8ad54 <__pack_d+0x288>
   8acfc:	01001fc4 	movi	r4,127
   8ad00:	3905883a 	add	r2,r7,r4
   8ad04:	11cd803a 	cmpltu	r6,r2,r7
   8ad08:	320d883a 	add	r6,r6,r8
   8ad0c:	100f883a 	mov	r7,r2
   8ad10:	00840034 	movhi	r2,4096
   8ad14:	10bfffc4 	addi	r2,r2,-1
   8ad18:	3011883a 	mov	r8,r6
   8ad1c:	0007883a 	mov	r3,zero
   8ad20:	11801b36 	bltu	r2,r6,8ad90 <__pack_d+0x2c4>
   8ad24:	4004963a 	slli	r2,r8,24
   8ad28:	3808d23a 	srli	r4,r7,8
   8ad2c:	400ad23a 	srli	r5,r8,8
   8ad30:	1813883a 	mov	r9,r3
   8ad34:	1108b03a 	or	r4,r2,r4
   8ad38:	00bfffc4 	movi	r2,-1
   8ad3c:	00c00434 	movhi	r3,16
   8ad40:	18ffffc4 	addi	r3,r3,-1
   8ad44:	208c703a 	and	r6,r4,r2
   8ad48:	28ce703a 	and	r7,r5,r3
   8ad4c:	4a01ffcc 	andi	r8,r9,2047
   8ad50:	003f7206 	br	8ab1c <__pack_d+0x50>
   8ad54:	503fe91e 	bne	r10,zero,8acfc <__pack_d+0x230>
   8ad58:	01004004 	movi	r4,256
   8ad5c:	3904703a 	and	r2,r7,r4
   8ad60:	0007883a 	mov	r3,zero
   8ad64:	10c4b03a 	or	r2,r2,r3
   8ad68:	10000626 	beq	r2,zero,8ad84 <__pack_d+0x2b8>
   8ad6c:	3a45883a 	add	r2,r7,r9
   8ad70:	11cd803a 	cmpltu	r6,r2,r7
   8ad74:	320d883a 	add	r6,r6,r8
   8ad78:	100f883a 	mov	r7,r2
   8ad7c:	3011883a 	mov	r8,r6
   8ad80:	0007883a 	mov	r3,zero
   8ad84:	00840034 	movhi	r2,4096
   8ad88:	10bfffc4 	addi	r2,r2,-1
   8ad8c:	123fe52e 	bgeu	r2,r8,8ad24 <__pack_d+0x258>
   8ad90:	00c00044 	movi	r3,1
   8ad94:	003fe306 	br	8ad24 <__pack_d+0x258>
   8ad98:	0009883a 	mov	r4,zero
   8ad9c:	0013883a 	mov	r9,zero
   8ada0:	000b883a 	mov	r5,zero
   8ada4:	003fe406 	br	8ad38 <__pack_d+0x26c>
   8ada8:	4a47883a 	add	r3,r9,r9
   8adac:	008007c4 	movi	r2,31
   8adb0:	1105c83a 	sub	r2,r2,r4
   8adb4:	1886983a 	sll	r3,r3,r2
   8adb8:	4118d83a 	srl	r12,r8,r4
   8adbc:	491ad83a 	srl	r13,r9,r4
   8adc0:	1b18b03a 	or	r12,r3,r12
   8adc4:	003fb506 	br	8ac9c <__pack_d+0x1d0>
   8adc8:	2806d07a 	srli	r3,r5,1
   8adcc:	008007c4 	movi	r2,31
   8add0:	1105c83a 	sub	r2,r2,r4
   8add4:	1896d83a 	srl	r11,r3,r2
   8add8:	2914983a 	sll	r10,r5,r4
   8addc:	003fb506 	br	8acb4 <__pack_d+0x1e8>

0008ade0 <__unpack_d>:
   8ade0:	20c00117 	ldw	r3,4(r4)
   8ade4:	22400017 	ldw	r9,0(r4)
   8ade8:	00800434 	movhi	r2,16
   8adec:	10bfffc4 	addi	r2,r2,-1
   8adf0:	1808d53a 	srli	r4,r3,20
   8adf4:	180cd7fa 	srli	r6,r3,31
   8adf8:	1894703a 	and	r10,r3,r2
   8adfc:	2201ffcc 	andi	r8,r4,2047
   8ae00:	281b883a 	mov	r13,r5
   8ae04:	4817883a 	mov	r11,r9
   8ae08:	29800115 	stw	r6,4(r5)
   8ae0c:	5019883a 	mov	r12,r10
   8ae10:	40001e1e 	bne	r8,zero,8ae8c <__unpack_d+0xac>
   8ae14:	4a84b03a 	or	r2,r9,r10
   8ae18:	10001926 	beq	r2,zero,8ae80 <__unpack_d+0xa0>
   8ae1c:	4804d63a 	srli	r2,r9,24
   8ae20:	500c923a 	slli	r6,r10,8
   8ae24:	013f0084 	movi	r4,-1022
   8ae28:	00c40034 	movhi	r3,4096
   8ae2c:	18ffffc4 	addi	r3,r3,-1
   8ae30:	118cb03a 	or	r6,r2,r6
   8ae34:	008000c4 	movi	r2,3
   8ae38:	480a923a 	slli	r5,r9,8
   8ae3c:	68800015 	stw	r2,0(r13)
   8ae40:	69000215 	stw	r4,8(r13)
   8ae44:	19800b36 	bltu	r3,r6,8ae74 <__unpack_d+0x94>
   8ae48:	200f883a 	mov	r7,r4
   8ae4c:	1811883a 	mov	r8,r3
   8ae50:	2945883a 	add	r2,r5,r5
   8ae54:	1149803a 	cmpltu	r4,r2,r5
   8ae58:	3187883a 	add	r3,r6,r6
   8ae5c:	20c9883a 	add	r4,r4,r3
   8ae60:	100b883a 	mov	r5,r2
   8ae64:	200d883a 	mov	r6,r4
   8ae68:	39ffffc4 	addi	r7,r7,-1
   8ae6c:	413ff82e 	bgeu	r8,r4,8ae50 <__unpack_d+0x70>
   8ae70:	69c00215 	stw	r7,8(r13)
   8ae74:	69800415 	stw	r6,16(r13)
   8ae78:	69400315 	stw	r5,12(r13)
   8ae7c:	f800283a 	ret
   8ae80:	00800084 	movi	r2,2
   8ae84:	28800015 	stw	r2,0(r5)
   8ae88:	f800283a 	ret
   8ae8c:	0081ffc4 	movi	r2,2047
   8ae90:	40800f26 	beq	r8,r2,8aed0 <__unpack_d+0xf0>
   8ae94:	480cd63a 	srli	r6,r9,24
   8ae98:	5006923a 	slli	r3,r10,8
   8ae9c:	4804923a 	slli	r2,r9,8
   8aea0:	0009883a 	mov	r4,zero
   8aea4:	30c6b03a 	or	r3,r6,r3
   8aea8:	01440034 	movhi	r5,4096
   8aeac:	110cb03a 	or	r6,r2,r4
   8aeb0:	423f0044 	addi	r8,r8,-1023
   8aeb4:	194eb03a 	or	r7,r3,r5
   8aeb8:	008000c4 	movi	r2,3
   8aebc:	69c00415 	stw	r7,16(r13)
   8aec0:	6a000215 	stw	r8,8(r13)
   8aec4:	68800015 	stw	r2,0(r13)
   8aec8:	69800315 	stw	r6,12(r13)
   8aecc:	f800283a 	ret
   8aed0:	4a84b03a 	or	r2,r9,r10
   8aed4:	1000031e 	bne	r2,zero,8aee4 <__unpack_d+0x104>
   8aed8:	00800104 	movi	r2,4
   8aedc:	28800015 	stw	r2,0(r5)
   8aee0:	f800283a 	ret
   8aee4:	0009883a 	mov	r4,zero
   8aee8:	01400234 	movhi	r5,8
   8aeec:	4904703a 	and	r2,r9,r4
   8aef0:	5146703a 	and	r3,r10,r5
   8aef4:	10c4b03a 	or	r2,r2,r3
   8aef8:	10000526 	beq	r2,zero,8af10 <__unpack_d+0x130>
   8aefc:	00800044 	movi	r2,1
   8af00:	68800015 	stw	r2,0(r13)
   8af04:	6b000415 	stw	r12,16(r13)
   8af08:	6ac00315 	stw	r11,12(r13)
   8af0c:	f800283a 	ret
   8af10:	68000015 	stw	zero,0(r13)
   8af14:	003ffb06 	br	8af04 <__unpack_d+0x124>

0008af18 <__fpcmp_parts_d>:
   8af18:	21800017 	ldw	r6,0(r4)
   8af1c:	00c00044 	movi	r3,1
   8af20:	19800a2e 	bgeu	r3,r6,8af4c <__fpcmp_parts_d+0x34>
   8af24:	28800017 	ldw	r2,0(r5)
   8af28:	1880082e 	bgeu	r3,r2,8af4c <__fpcmp_parts_d+0x34>
   8af2c:	00c00104 	movi	r3,4
   8af30:	30c02626 	beq	r6,r3,8afcc <__fpcmp_parts_d+0xb4>
   8af34:	10c02226 	beq	r2,r3,8afc0 <__fpcmp_parts_d+0xa8>
   8af38:	00c00084 	movi	r3,2
   8af3c:	30c00526 	beq	r6,r3,8af54 <__fpcmp_parts_d+0x3c>
   8af40:	10c0071e 	bne	r2,r3,8af60 <__fpcmp_parts_d+0x48>
   8af44:	20800117 	ldw	r2,4(r4)
   8af48:	1000091e 	bne	r2,zero,8af70 <__fpcmp_parts_d+0x58>
   8af4c:	00800044 	movi	r2,1
   8af50:	f800283a 	ret
   8af54:	10c01a1e 	bne	r2,r3,8afc0 <__fpcmp_parts_d+0xa8>
   8af58:	0005883a 	mov	r2,zero
   8af5c:	f800283a 	ret
   8af60:	22000117 	ldw	r8,4(r4)
   8af64:	28800117 	ldw	r2,4(r5)
   8af68:	40800326 	beq	r8,r2,8af78 <__fpcmp_parts_d+0x60>
   8af6c:	403ff726 	beq	r8,zero,8af4c <__fpcmp_parts_d+0x34>
   8af70:	00bfffc4 	movi	r2,-1
   8af74:	f800283a 	ret
   8af78:	20c00217 	ldw	r3,8(r4)
   8af7c:	28800217 	ldw	r2,8(r5)
   8af80:	10fffa16 	blt	r2,r3,8af6c <__fpcmp_parts_d+0x54>
   8af84:	18800916 	blt	r3,r2,8afac <__fpcmp_parts_d+0x94>
   8af88:	21c00417 	ldw	r7,16(r4)
   8af8c:	28c00417 	ldw	r3,16(r5)
   8af90:	21800317 	ldw	r6,12(r4)
   8af94:	28800317 	ldw	r2,12(r5)
   8af98:	19fff436 	bltu	r3,r7,8af6c <__fpcmp_parts_d+0x54>
   8af9c:	38c00526 	beq	r7,r3,8afb4 <__fpcmp_parts_d+0x9c>
   8afa0:	38c00236 	bltu	r7,r3,8afac <__fpcmp_parts_d+0x94>
   8afa4:	19ffec1e 	bne	r3,r7,8af58 <__fpcmp_parts_d+0x40>
   8afa8:	30bfeb2e 	bgeu	r6,r2,8af58 <__fpcmp_parts_d+0x40>
   8afac:	403fe71e 	bne	r8,zero,8af4c <__fpcmp_parts_d+0x34>
   8afb0:	003fef06 	br	8af70 <__fpcmp_parts_d+0x58>
   8afb4:	11bffa2e 	bgeu	r2,r6,8afa0 <__fpcmp_parts_d+0x88>
   8afb8:	403fe426 	beq	r8,zero,8af4c <__fpcmp_parts_d+0x34>
   8afbc:	003fec06 	br	8af70 <__fpcmp_parts_d+0x58>
   8afc0:	28800117 	ldw	r2,4(r5)
   8afc4:	103fe11e 	bne	r2,zero,8af4c <__fpcmp_parts_d+0x34>
   8afc8:	003fe906 	br	8af70 <__fpcmp_parts_d+0x58>
   8afcc:	11bfdd1e 	bne	r2,r6,8af44 <__fpcmp_parts_d+0x2c>
   8afd0:	28c00117 	ldw	r3,4(r5)
   8afd4:	20800117 	ldw	r2,4(r4)
   8afd8:	1885c83a 	sub	r2,r3,r2
   8afdc:	f800283a 	ret

0008afe0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8afe0:	defff804 	addi	sp,sp,-32
   8afe4:	dfc00715 	stw	ra,28(sp)
   8afe8:	df000615 	stw	fp,24(sp)
   8afec:	df000604 	addi	fp,sp,24
   8aff0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8aff4:	e0bffc17 	ldw	r2,-16(fp)
   8aff8:	1004803a 	cmplt	r2,r2,zero
   8affc:	1000091e 	bne	r2,zero,8b024 <close+0x44>
   8b000:	e13ffc17 	ldw	r4,-16(fp)
   8b004:	01400304 	movi	r5,12
   8b008:	00812180 	call	81218 <__mulsi3>
   8b00c:	1007883a 	mov	r3,r2
   8b010:	00800274 	movhi	r2,9
   8b014:	10ba0704 	addi	r2,r2,-6116
   8b018:	1887883a 	add	r3,r3,r2
   8b01c:	e0ffff15 	stw	r3,-4(fp)
   8b020:	00000106 	br	8b028 <close+0x48>
   8b024:	e03fff15 	stw	zero,-4(fp)
   8b028:	e0bfff17 	ldw	r2,-4(fp)
   8b02c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8b030:	e0bffb17 	ldw	r2,-20(fp)
   8b034:	1005003a 	cmpeq	r2,r2,zero
   8b038:	10001d1e 	bne	r2,zero,8b0b0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8b03c:	e0bffb17 	ldw	r2,-20(fp)
   8b040:	10800017 	ldw	r2,0(r2)
   8b044:	10800417 	ldw	r2,16(r2)
   8b048:	1005003a 	cmpeq	r2,r2,zero
   8b04c:	1000071e 	bne	r2,zero,8b06c <close+0x8c>
   8b050:	e0bffb17 	ldw	r2,-20(fp)
   8b054:	10800017 	ldw	r2,0(r2)
   8b058:	10800417 	ldw	r2,16(r2)
   8b05c:	e13ffb17 	ldw	r4,-20(fp)
   8b060:	103ee83a 	callr	r2
   8b064:	e0bffe15 	stw	r2,-8(fp)
   8b068:	00000106 	br	8b070 <close+0x90>
   8b06c:	e03ffe15 	stw	zero,-8(fp)
   8b070:	e0bffe17 	ldw	r2,-8(fp)
   8b074:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8b078:	e13ffc17 	ldw	r4,-16(fp)
   8b07c:	008b9f80 	call	8b9f8 <alt_release_fd>
    if (rval < 0)
   8b080:	e0bffa17 	ldw	r2,-24(fp)
   8b084:	1004403a 	cmpge	r2,r2,zero
   8b088:	1000071e 	bne	r2,zero,8b0a8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8b08c:	008b0e00 	call	8b0e0 <alt_get_errno>
   8b090:	e0fffa17 	ldw	r3,-24(fp)
   8b094:	00c7c83a 	sub	r3,zero,r3
   8b098:	10c00015 	stw	r3,0(r2)
      return -1;
   8b09c:	00bfffc4 	movi	r2,-1
   8b0a0:	e0bffd15 	stw	r2,-12(fp)
   8b0a4:	00000806 	br	8b0c8 <close+0xe8>
    }
    return 0;
   8b0a8:	e03ffd15 	stw	zero,-12(fp)
   8b0ac:	00000606 	br	8b0c8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b0b0:	008b0e00 	call	8b0e0 <alt_get_errno>
   8b0b4:	1007883a 	mov	r3,r2
   8b0b8:	00801444 	movi	r2,81
   8b0bc:	18800015 	stw	r2,0(r3)
    return -1;
   8b0c0:	00bfffc4 	movi	r2,-1
   8b0c4:	e0bffd15 	stw	r2,-12(fp)
   8b0c8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8b0cc:	e037883a 	mov	sp,fp
   8b0d0:	dfc00117 	ldw	ra,4(sp)
   8b0d4:	df000017 	ldw	fp,0(sp)
   8b0d8:	dec00204 	addi	sp,sp,8
   8b0dc:	f800283a 	ret

0008b0e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b0e0:	defffd04 	addi	sp,sp,-12
   8b0e4:	dfc00215 	stw	ra,8(sp)
   8b0e8:	df000115 	stw	fp,4(sp)
   8b0ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b0f0:	00800274 	movhi	r2,9
   8b0f4:	10be8a04 	addi	r2,r2,-1496
   8b0f8:	10800017 	ldw	r2,0(r2)
   8b0fc:	1005003a 	cmpeq	r2,r2,zero
   8b100:	1000061e 	bne	r2,zero,8b11c <alt_get_errno+0x3c>
   8b104:	00800274 	movhi	r2,9
   8b108:	10be8a04 	addi	r2,r2,-1496
   8b10c:	10800017 	ldw	r2,0(r2)
   8b110:	103ee83a 	callr	r2
   8b114:	e0bfff15 	stw	r2,-4(fp)
   8b118:	00000306 	br	8b128 <alt_get_errno+0x48>
   8b11c:	00800274 	movhi	r2,9
   8b120:	10852d04 	addi	r2,r2,5300
   8b124:	e0bfff15 	stw	r2,-4(fp)
   8b128:	e0bfff17 	ldw	r2,-4(fp)
}
   8b12c:	e037883a 	mov	sp,fp
   8b130:	dfc00117 	ldw	ra,4(sp)
   8b134:	df000017 	ldw	fp,0(sp)
   8b138:	dec00204 	addi	sp,sp,8
   8b13c:	f800283a 	ret

0008b140 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8b140:	defffc04 	addi	sp,sp,-16
   8b144:	df000315 	stw	fp,12(sp)
   8b148:	df000304 	addi	fp,sp,12
   8b14c:	e13ffd15 	stw	r4,-12(fp)
   8b150:	e17ffe15 	stw	r5,-8(fp)
   8b154:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8b158:	e0bfff17 	ldw	r2,-4(fp)
}
   8b15c:	e037883a 	mov	sp,fp
   8b160:	df000017 	ldw	fp,0(sp)
   8b164:	dec00104 	addi	sp,sp,4
   8b168:	f800283a 	ret

0008b16c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8b16c:	defff904 	addi	sp,sp,-28
   8b170:	dfc00615 	stw	ra,24(sp)
   8b174:	df000515 	stw	fp,20(sp)
   8b178:	df000504 	addi	fp,sp,20
   8b17c:	e13ffc15 	stw	r4,-16(fp)
   8b180:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b184:	e0bffc17 	ldw	r2,-16(fp)
   8b188:	1004803a 	cmplt	r2,r2,zero
   8b18c:	1000091e 	bne	r2,zero,8b1b4 <fstat+0x48>
   8b190:	e13ffc17 	ldw	r4,-16(fp)
   8b194:	01400304 	movi	r5,12
   8b198:	00812180 	call	81218 <__mulsi3>
   8b19c:	1007883a 	mov	r3,r2
   8b1a0:	00800274 	movhi	r2,9
   8b1a4:	10ba0704 	addi	r2,r2,-6116
   8b1a8:	1887883a 	add	r3,r3,r2
   8b1ac:	e0ffff15 	stw	r3,-4(fp)
   8b1b0:	00000106 	br	8b1b8 <fstat+0x4c>
   8b1b4:	e03fff15 	stw	zero,-4(fp)
   8b1b8:	e0bfff17 	ldw	r2,-4(fp)
   8b1bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8b1c0:	e0bffb17 	ldw	r2,-20(fp)
   8b1c4:	1005003a 	cmpeq	r2,r2,zero
   8b1c8:	1000121e 	bne	r2,zero,8b214 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8b1cc:	e0bffb17 	ldw	r2,-20(fp)
   8b1d0:	10800017 	ldw	r2,0(r2)
   8b1d4:	10800817 	ldw	r2,32(r2)
   8b1d8:	1005003a 	cmpeq	r2,r2,zero
   8b1dc:	1000081e 	bne	r2,zero,8b200 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8b1e0:	e0bffb17 	ldw	r2,-20(fp)
   8b1e4:	10800017 	ldw	r2,0(r2)
   8b1e8:	10800817 	ldw	r2,32(r2)
   8b1ec:	e13ffb17 	ldw	r4,-20(fp)
   8b1f0:	e17ffd17 	ldw	r5,-12(fp)
   8b1f4:	103ee83a 	callr	r2
   8b1f8:	e0bffe15 	stw	r2,-8(fp)
   8b1fc:	00000b06 	br	8b22c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8b200:	e0fffd17 	ldw	r3,-12(fp)
   8b204:	00880004 	movi	r2,8192
   8b208:	18800115 	stw	r2,4(r3)
      return 0;
   8b20c:	e03ffe15 	stw	zero,-8(fp)
   8b210:	00000606 	br	8b22c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b214:	008b2440 	call	8b244 <alt_get_errno>
   8b218:	1007883a 	mov	r3,r2
   8b21c:	00801444 	movi	r2,81
   8b220:	18800015 	stw	r2,0(r3)
    return -1;
   8b224:	00bfffc4 	movi	r2,-1
   8b228:	e0bffe15 	stw	r2,-8(fp)
   8b22c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8b230:	e037883a 	mov	sp,fp
   8b234:	dfc00117 	ldw	ra,4(sp)
   8b238:	df000017 	ldw	fp,0(sp)
   8b23c:	dec00204 	addi	sp,sp,8
   8b240:	f800283a 	ret

0008b244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b244:	defffd04 	addi	sp,sp,-12
   8b248:	dfc00215 	stw	ra,8(sp)
   8b24c:	df000115 	stw	fp,4(sp)
   8b250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b254:	00800274 	movhi	r2,9
   8b258:	10be8a04 	addi	r2,r2,-1496
   8b25c:	10800017 	ldw	r2,0(r2)
   8b260:	1005003a 	cmpeq	r2,r2,zero
   8b264:	1000061e 	bne	r2,zero,8b280 <alt_get_errno+0x3c>
   8b268:	00800274 	movhi	r2,9
   8b26c:	10be8a04 	addi	r2,r2,-1496
   8b270:	10800017 	ldw	r2,0(r2)
   8b274:	103ee83a 	callr	r2
   8b278:	e0bfff15 	stw	r2,-4(fp)
   8b27c:	00000306 	br	8b28c <alt_get_errno+0x48>
   8b280:	00800274 	movhi	r2,9
   8b284:	10852d04 	addi	r2,r2,5300
   8b288:	e0bfff15 	stw	r2,-4(fp)
   8b28c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b290:	e037883a 	mov	sp,fp
   8b294:	dfc00117 	ldw	ra,4(sp)
   8b298:	df000017 	ldw	fp,0(sp)
   8b29c:	dec00204 	addi	sp,sp,8
   8b2a0:	f800283a 	ret

0008b2a4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8b2a4:	deffef04 	addi	sp,sp,-68
   8b2a8:	df001015 	stw	fp,64(sp)
   8b2ac:	df001004 	addi	fp,sp,64
   8b2b0:	e13ffc15 	stw	r4,-16(fp)
   8b2b4:	e17ffd15 	stw	r5,-12(fp)
   8b2b8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8b2bc:	00bffa84 	movi	r2,-22
   8b2c0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8b2c4:	e0bffc17 	ldw	r2,-16(fp)
   8b2c8:	10800828 	cmpgeui	r2,r2,32
   8b2cc:	1000601e 	bne	r2,zero,8b450 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b2d0:	0005303a 	rdctl	r2,status
   8b2d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b2d8:	e0fff917 	ldw	r3,-28(fp)
   8b2dc:	00bfff84 	movi	r2,-2
   8b2e0:	1884703a 	and	r2,r3,r2
   8b2e4:	1001703a 	wrctl	status,r2
  
  return context;
   8b2e8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8b2ec:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   8b2f0:	e0bffc17 	ldw	r2,-16(fp)
   8b2f4:	00c00274 	movhi	r3,9
   8b2f8:	18c53e04 	addi	r3,r3,5368
   8b2fc:	100490fa 	slli	r2,r2,3
   8b300:	10c7883a 	add	r3,r2,r3
   8b304:	e0bffe17 	ldw	r2,-8(fp)
   8b308:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   8b30c:	e0bffc17 	ldw	r2,-16(fp)
   8b310:	00c00274 	movhi	r3,9
   8b314:	18c53e04 	addi	r3,r3,5368
   8b318:	100490fa 	slli	r2,r2,3
   8b31c:	10c5883a 	add	r2,r2,r3
   8b320:	10c00104 	addi	r3,r2,4
   8b324:	e0bffd17 	ldw	r2,-12(fp)
   8b328:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8b32c:	e0bffe17 	ldw	r2,-8(fp)
   8b330:	1005003a 	cmpeq	r2,r2,zero
   8b334:	1000201e 	bne	r2,zero,8b3b8 <alt_irq_register+0x114>
   8b338:	e0bffc17 	ldw	r2,-16(fp)
   8b33c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b340:	0005303a 	rdctl	r2,status
   8b344:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b348:	e0fff617 	ldw	r3,-40(fp)
   8b34c:	00bfff84 	movi	r2,-2
   8b350:	1884703a 	and	r2,r3,r2
   8b354:	1001703a 	wrctl	status,r2
  
  return context;
   8b358:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b35c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8b360:	e0fff717 	ldw	r3,-36(fp)
   8b364:	00800044 	movi	r2,1
   8b368:	10c4983a 	sll	r2,r2,r3
   8b36c:	1007883a 	mov	r3,r2
   8b370:	00800274 	movhi	r2,9
   8b374:	10852e04 	addi	r2,r2,5304
   8b378:	10800017 	ldw	r2,0(r2)
   8b37c:	1886b03a 	or	r3,r3,r2
   8b380:	00800274 	movhi	r2,9
   8b384:	10852e04 	addi	r2,r2,5304
   8b388:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b38c:	00800274 	movhi	r2,9
   8b390:	10852e04 	addi	r2,r2,5304
   8b394:	10800017 	ldw	r2,0(r2)
   8b398:	100170fa 	wrctl	ienable,r2
   8b39c:	e0bff817 	ldw	r2,-32(fp)
   8b3a0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b3a4:	e0bff517 	ldw	r2,-44(fp)
   8b3a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8b3ac:	0005883a 	mov	r2,zero
   8b3b0:	e0bfff15 	stw	r2,-4(fp)
   8b3b4:	00002006 	br	8b438 <alt_irq_register+0x194>
   8b3b8:	e0bffc17 	ldw	r2,-16(fp)
   8b3bc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b3c0:	0005303a 	rdctl	r2,status
   8b3c4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b3c8:	e0fff217 	ldw	r3,-56(fp)
   8b3cc:	00bfff84 	movi	r2,-2
   8b3d0:	1884703a 	and	r2,r3,r2
   8b3d4:	1001703a 	wrctl	status,r2
  
  return context;
   8b3d8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b3dc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   8b3e0:	e0fff317 	ldw	r3,-52(fp)
   8b3e4:	00800044 	movi	r2,1
   8b3e8:	10c4983a 	sll	r2,r2,r3
   8b3ec:	0084303a 	nor	r2,zero,r2
   8b3f0:	1007883a 	mov	r3,r2
   8b3f4:	00800274 	movhi	r2,9
   8b3f8:	10852e04 	addi	r2,r2,5304
   8b3fc:	10800017 	ldw	r2,0(r2)
   8b400:	1886703a 	and	r3,r3,r2
   8b404:	00800274 	movhi	r2,9
   8b408:	10852e04 	addi	r2,r2,5304
   8b40c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b410:	00800274 	movhi	r2,9
   8b414:	10852e04 	addi	r2,r2,5304
   8b418:	10800017 	ldw	r2,0(r2)
   8b41c:	100170fa 	wrctl	ienable,r2
   8b420:	e0bff417 	ldw	r2,-48(fp)
   8b424:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b428:	e0bff117 	ldw	r2,-60(fp)
   8b42c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8b430:	0005883a 	mov	r2,zero
   8b434:	e0bfff15 	stw	r2,-4(fp)
   8b438:	e0bfff17 	ldw	r2,-4(fp)
   8b43c:	e0bffb15 	stw	r2,-20(fp)
   8b440:	e0bffa17 	ldw	r2,-24(fp)
   8b444:	e0bff015 	stw	r2,-64(fp)
   8b448:	e0bff017 	ldw	r2,-64(fp)
   8b44c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8b450:	e0bffb17 	ldw	r2,-20(fp)
}
   8b454:	e037883a 	mov	sp,fp
   8b458:	df000017 	ldw	fp,0(sp)
   8b45c:	dec00104 	addi	sp,sp,4
   8b460:	f800283a 	ret

0008b464 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8b464:	deffeb04 	addi	sp,sp,-84
   8b468:	dfc01415 	stw	ra,80(sp)
   8b46c:	df001315 	stw	fp,76(sp)
   8b470:	df001304 	addi	fp,sp,76
   8b474:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b478:	e0bffd17 	ldw	r2,-12(fp)
   8b47c:	1004803a 	cmplt	r2,r2,zero
   8b480:	1000091e 	bne	r2,zero,8b4a8 <isatty+0x44>
   8b484:	e13ffd17 	ldw	r4,-12(fp)
   8b488:	01400304 	movi	r5,12
   8b48c:	00812180 	call	81218 <__mulsi3>
   8b490:	1007883a 	mov	r3,r2
   8b494:	00800274 	movhi	r2,9
   8b498:	10ba0704 	addi	r2,r2,-6116
   8b49c:	1887883a 	add	r3,r3,r2
   8b4a0:	e0ffff15 	stw	r3,-4(fp)
   8b4a4:	00000106 	br	8b4ac <isatty+0x48>
   8b4a8:	e03fff15 	stw	zero,-4(fp)
   8b4ac:	e0bfff17 	ldw	r2,-4(fp)
   8b4b0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8b4b4:	e0bfed17 	ldw	r2,-76(fp)
   8b4b8:	1005003a 	cmpeq	r2,r2,zero
   8b4bc:	10000f1e 	bne	r2,zero,8b4fc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8b4c0:	e0bfed17 	ldw	r2,-76(fp)
   8b4c4:	10800017 	ldw	r2,0(r2)
   8b4c8:	10800817 	ldw	r2,32(r2)
   8b4cc:	1004c03a 	cmpne	r2,r2,zero
   8b4d0:	1000031e 	bne	r2,zero,8b4e0 <isatty+0x7c>
    {
      return 1;
   8b4d4:	00800044 	movi	r2,1
   8b4d8:	e0bffe15 	stw	r2,-8(fp)
   8b4dc:	00000c06 	br	8b510 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8b4e0:	e17fee04 	addi	r5,fp,-72
   8b4e4:	e13ffd17 	ldw	r4,-12(fp)
   8b4e8:	008b16c0 	call	8b16c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8b4ec:	e0bfef17 	ldw	r2,-68(fp)
   8b4f0:	10880020 	cmpeqi	r2,r2,8192
   8b4f4:	e0bffe15 	stw	r2,-8(fp)
   8b4f8:	00000506 	br	8b510 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b4fc:	008b5280 	call	8b528 <alt_get_errno>
   8b500:	1007883a 	mov	r3,r2
   8b504:	00801444 	movi	r2,81
   8b508:	18800015 	stw	r2,0(r3)
    return 0;
   8b50c:	e03ffe15 	stw	zero,-8(fp)
   8b510:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8b514:	e037883a 	mov	sp,fp
   8b518:	dfc00117 	ldw	ra,4(sp)
   8b51c:	df000017 	ldw	fp,0(sp)
   8b520:	dec00204 	addi	sp,sp,8
   8b524:	f800283a 	ret

0008b528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b528:	defffd04 	addi	sp,sp,-12
   8b52c:	dfc00215 	stw	ra,8(sp)
   8b530:	df000115 	stw	fp,4(sp)
   8b534:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b538:	00800274 	movhi	r2,9
   8b53c:	10be8a04 	addi	r2,r2,-1496
   8b540:	10800017 	ldw	r2,0(r2)
   8b544:	1005003a 	cmpeq	r2,r2,zero
   8b548:	1000061e 	bne	r2,zero,8b564 <alt_get_errno+0x3c>
   8b54c:	00800274 	movhi	r2,9
   8b550:	10be8a04 	addi	r2,r2,-1496
   8b554:	10800017 	ldw	r2,0(r2)
   8b558:	103ee83a 	callr	r2
   8b55c:	e0bfff15 	stw	r2,-4(fp)
   8b560:	00000306 	br	8b570 <alt_get_errno+0x48>
   8b564:	00800274 	movhi	r2,9
   8b568:	10852d04 	addi	r2,r2,5300
   8b56c:	e0bfff15 	stw	r2,-4(fp)
   8b570:	e0bfff17 	ldw	r2,-4(fp)
}
   8b574:	e037883a 	mov	sp,fp
   8b578:	dfc00117 	ldw	ra,4(sp)
   8b57c:	df000017 	ldw	fp,0(sp)
   8b580:	dec00204 	addi	sp,sp,8
   8b584:	f800283a 	ret

0008b588 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8b588:	defffe04 	addi	sp,sp,-8
   8b58c:	dfc00115 	stw	ra,4(sp)
   8b590:	df000015 	stw	fp,0(sp)
   8b594:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8b598:	01000274 	movhi	r4,9
   8b59c:	213e8f04 	addi	r4,r4,-1476
   8b5a0:	01400274 	movhi	r5,9
   8b5a4:	2977f804 	addi	r5,r5,-8224
   8b5a8:	01800274 	movhi	r6,9
   8b5ac:	31be8f04 	addi	r6,r6,-1476
   8b5b0:	008b6080 	call	8b608 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8b5b4:	01000234 	movhi	r4,8
   8b5b8:	21000804 	addi	r4,r4,32
   8b5bc:	01400234 	movhi	r5,8
   8b5c0:	29400804 	addi	r5,r5,32
   8b5c4:	01800234 	movhi	r6,8
   8b5c8:	31806d04 	addi	r6,r6,436
   8b5cc:	008b6080 	call	8b608 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8b5d0:	01000274 	movhi	r4,9
   8b5d4:	2136cd04 	addi	r4,r4,-9420
   8b5d8:	01400274 	movhi	r5,9
   8b5dc:	2976cd04 	addi	r5,r5,-9420
   8b5e0:	01800274 	movhi	r6,9
   8b5e4:	31b7f804 	addi	r6,r6,-8224
   8b5e8:	008b6080 	call	8b608 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8b5ec:	008c9600 	call	8c960 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8b5f0:	008cb580 	call	8cb58 <alt_icache_flush_all>
}
   8b5f4:	e037883a 	mov	sp,fp
   8b5f8:	dfc00117 	ldw	ra,4(sp)
   8b5fc:	df000017 	ldw	fp,0(sp)
   8b600:	dec00204 	addi	sp,sp,8
   8b604:	f800283a 	ret

0008b608 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8b608:	defffc04 	addi	sp,sp,-16
   8b60c:	df000315 	stw	fp,12(sp)
   8b610:	df000304 	addi	fp,sp,12
   8b614:	e13ffd15 	stw	r4,-12(fp)
   8b618:	e17ffe15 	stw	r5,-8(fp)
   8b61c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8b620:	e0fffe17 	ldw	r3,-8(fp)
   8b624:	e0bffd17 	ldw	r2,-12(fp)
   8b628:	18800e26 	beq	r3,r2,8b664 <alt_load_section+0x5c>
  {
    while( to != end )
   8b62c:	00000a06 	br	8b658 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8b630:	e0bffd17 	ldw	r2,-12(fp)
   8b634:	10c00017 	ldw	r3,0(r2)
   8b638:	e0bffe17 	ldw	r2,-8(fp)
   8b63c:	10c00015 	stw	r3,0(r2)
   8b640:	e0bffe17 	ldw	r2,-8(fp)
   8b644:	10800104 	addi	r2,r2,4
   8b648:	e0bffe15 	stw	r2,-8(fp)
   8b64c:	e0bffd17 	ldw	r2,-12(fp)
   8b650:	10800104 	addi	r2,r2,4
   8b654:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8b658:	e0fffe17 	ldw	r3,-8(fp)
   8b65c:	e0bfff17 	ldw	r2,-4(fp)
   8b660:	18bff31e 	bne	r3,r2,8b630 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8b664:	e037883a 	mov	sp,fp
   8b668:	df000017 	ldw	fp,0(sp)
   8b66c:	dec00104 	addi	sp,sp,4
   8b670:	f800283a 	ret

0008b674 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8b674:	defff804 	addi	sp,sp,-32
   8b678:	dfc00715 	stw	ra,28(sp)
   8b67c:	df000615 	stw	fp,24(sp)
   8b680:	df000604 	addi	fp,sp,24
   8b684:	e13ffc15 	stw	r4,-16(fp)
   8b688:	e17ffd15 	stw	r5,-12(fp)
   8b68c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8b690:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b694:	e0bffc17 	ldw	r2,-16(fp)
   8b698:	1004803a 	cmplt	r2,r2,zero
   8b69c:	1000091e 	bne	r2,zero,8b6c4 <lseek+0x50>
   8b6a0:	e13ffc17 	ldw	r4,-16(fp)
   8b6a4:	01400304 	movi	r5,12
   8b6a8:	00812180 	call	81218 <__mulsi3>
   8b6ac:	1007883a 	mov	r3,r2
   8b6b0:	00800274 	movhi	r2,9
   8b6b4:	10ba0704 	addi	r2,r2,-6116
   8b6b8:	1887883a 	add	r3,r3,r2
   8b6bc:	e0ffff15 	stw	r3,-4(fp)
   8b6c0:	00000106 	br	8b6c8 <lseek+0x54>
   8b6c4:	e03fff15 	stw	zero,-4(fp)
   8b6c8:	e0bfff17 	ldw	r2,-4(fp)
   8b6cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8b6d0:	e0bffb17 	ldw	r2,-20(fp)
   8b6d4:	1005003a 	cmpeq	r2,r2,zero
   8b6d8:	1000111e 	bne	r2,zero,8b720 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8b6dc:	e0bffb17 	ldw	r2,-20(fp)
   8b6e0:	10800017 	ldw	r2,0(r2)
   8b6e4:	10800717 	ldw	r2,28(r2)
   8b6e8:	1005003a 	cmpeq	r2,r2,zero
   8b6ec:	1000091e 	bne	r2,zero,8b714 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8b6f0:	e0bffb17 	ldw	r2,-20(fp)
   8b6f4:	10800017 	ldw	r2,0(r2)
   8b6f8:	10800717 	ldw	r2,28(r2)
   8b6fc:	e13ffb17 	ldw	r4,-20(fp)
   8b700:	e17ffd17 	ldw	r5,-12(fp)
   8b704:	e1bffe17 	ldw	r6,-8(fp)
   8b708:	103ee83a 	callr	r2
   8b70c:	e0bffa15 	stw	r2,-24(fp)
   8b710:	00000506 	br	8b728 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8b714:	00bfde84 	movi	r2,-134
   8b718:	e0bffa15 	stw	r2,-24(fp)
   8b71c:	00000206 	br	8b728 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8b720:	00bfebc4 	movi	r2,-81
   8b724:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8b728:	e0bffa17 	ldw	r2,-24(fp)
   8b72c:	1004403a 	cmpge	r2,r2,zero
   8b730:	1000071e 	bne	r2,zero,8b750 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8b734:	008b7680 	call	8b768 <alt_get_errno>
   8b738:	1007883a 	mov	r3,r2
   8b73c:	e0bffa17 	ldw	r2,-24(fp)
   8b740:	0085c83a 	sub	r2,zero,r2
   8b744:	18800015 	stw	r2,0(r3)
    rc = -1;
   8b748:	00bfffc4 	movi	r2,-1
   8b74c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8b750:	e0bffa17 	ldw	r2,-24(fp)
}
   8b754:	e037883a 	mov	sp,fp
   8b758:	dfc00117 	ldw	ra,4(sp)
   8b75c:	df000017 	ldw	fp,0(sp)
   8b760:	dec00204 	addi	sp,sp,8
   8b764:	f800283a 	ret

0008b768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b768:	defffd04 	addi	sp,sp,-12
   8b76c:	dfc00215 	stw	ra,8(sp)
   8b770:	df000115 	stw	fp,4(sp)
   8b774:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b778:	00800274 	movhi	r2,9
   8b77c:	10be8a04 	addi	r2,r2,-1496
   8b780:	10800017 	ldw	r2,0(r2)
   8b784:	1005003a 	cmpeq	r2,r2,zero
   8b788:	1000061e 	bne	r2,zero,8b7a4 <alt_get_errno+0x3c>
   8b78c:	00800274 	movhi	r2,9
   8b790:	10be8a04 	addi	r2,r2,-1496
   8b794:	10800017 	ldw	r2,0(r2)
   8b798:	103ee83a 	callr	r2
   8b79c:	e0bfff15 	stw	r2,-4(fp)
   8b7a0:	00000306 	br	8b7b0 <alt_get_errno+0x48>
   8b7a4:	00800274 	movhi	r2,9
   8b7a8:	10852d04 	addi	r2,r2,5300
   8b7ac:	e0bfff15 	stw	r2,-4(fp)
   8b7b0:	e0bfff17 	ldw	r2,-4(fp)
}
   8b7b4:	e037883a 	mov	sp,fp
   8b7b8:	dfc00117 	ldw	ra,4(sp)
   8b7bc:	df000017 	ldw	fp,0(sp)
   8b7c0:	dec00204 	addi	sp,sp,8
   8b7c4:	f800283a 	ret

0008b7c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8b7c8:	defffd04 	addi	sp,sp,-12
   8b7cc:	dfc00215 	stw	ra,8(sp)
   8b7d0:	df000115 	stw	fp,4(sp)
   8b7d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8b7d8:	0009883a 	mov	r4,zero
   8b7dc:	008bcb00 	call	8bcb0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8b7e0:	008bce40 	call	8bce4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8b7e4:	01000274 	movhi	r4,9
   8b7e8:	2137ee04 	addi	r4,r4,-8264
   8b7ec:	01400274 	movhi	r5,9
   8b7f0:	2977ee04 	addi	r5,r5,-8264
   8b7f4:	01800274 	movhi	r6,9
   8b7f8:	31b7ee04 	addi	r6,r6,-8264
   8b7fc:	008cf180 	call	8cf18 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8b800:	008ca900 	call	8ca90 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8b804:	01000274 	movhi	r4,9
   8b808:	2132bd04 	addi	r4,r4,-13580
   8b80c:	008d6bc0 	call	8d6bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8b810:	d126b017 	ldw	r4,-25920(gp)
   8b814:	d166b117 	ldw	r5,-25916(gp)
   8b818:	d1a6b217 	ldw	r6,-25912(gp)
   8b81c:	0080d280 	call	80d28 <main>
   8b820:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8b824:	01000044 	movi	r4,1
   8b828:	008afe00 	call	8afe0 <close>
  exit (result);
   8b82c:	e13fff17 	ldw	r4,-4(fp)
   8b830:	008d6d00 	call	8d6d0 <exit>

0008b834 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8b834:	defffe04 	addi	sp,sp,-8
   8b838:	df000115 	stw	fp,4(sp)
   8b83c:	df000104 	addi	fp,sp,4
   8b840:	e13fff15 	stw	r4,-4(fp)
}
   8b844:	e037883a 	mov	sp,fp
   8b848:	df000017 	ldw	fp,0(sp)
   8b84c:	dec00104 	addi	sp,sp,4
   8b850:	f800283a 	ret

0008b854 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8b854:	defffe04 	addi	sp,sp,-8
   8b858:	df000115 	stw	fp,4(sp)
   8b85c:	df000104 	addi	fp,sp,4
   8b860:	e13fff15 	stw	r4,-4(fp)
}
   8b864:	e037883a 	mov	sp,fp
   8b868:	df000017 	ldw	fp,0(sp)
   8b86c:	dec00104 	addi	sp,sp,4
   8b870:	f800283a 	ret

0008b874 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8b874:	defff704 	addi	sp,sp,-36
   8b878:	dfc00815 	stw	ra,32(sp)
   8b87c:	df000715 	stw	fp,28(sp)
   8b880:	df000704 	addi	fp,sp,28
   8b884:	e13ffb15 	stw	r4,-20(fp)
   8b888:	e17ffc15 	stw	r5,-16(fp)
   8b88c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b890:	e0bffb17 	ldw	r2,-20(fp)
   8b894:	1004803a 	cmplt	r2,r2,zero
   8b898:	1000091e 	bne	r2,zero,8b8c0 <read+0x4c>
   8b89c:	e13ffb17 	ldw	r4,-20(fp)
   8b8a0:	01400304 	movi	r5,12
   8b8a4:	00812180 	call	81218 <__mulsi3>
   8b8a8:	1007883a 	mov	r3,r2
   8b8ac:	00800274 	movhi	r2,9
   8b8b0:	10ba0704 	addi	r2,r2,-6116
   8b8b4:	1887883a 	add	r3,r3,r2
   8b8b8:	e0ffff15 	stw	r3,-4(fp)
   8b8bc:	00000106 	br	8b8c4 <read+0x50>
   8b8c0:	e03fff15 	stw	zero,-4(fp)
   8b8c4:	e0bfff17 	ldw	r2,-4(fp)
   8b8c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b8cc:	e0bffa17 	ldw	r2,-24(fp)
   8b8d0:	1005003a 	cmpeq	r2,r2,zero
   8b8d4:	1000241e 	bne	r2,zero,8b968 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8b8d8:	e0bffa17 	ldw	r2,-24(fp)
   8b8dc:	10800217 	ldw	r2,8(r2)
   8b8e0:	108000cc 	andi	r2,r2,3
   8b8e4:	10800060 	cmpeqi	r2,r2,1
   8b8e8:	10001a1e 	bne	r2,zero,8b954 <read+0xe0>
   8b8ec:	e0bffa17 	ldw	r2,-24(fp)
   8b8f0:	10800017 	ldw	r2,0(r2)
   8b8f4:	10800517 	ldw	r2,20(r2)
   8b8f8:	1005003a 	cmpeq	r2,r2,zero
   8b8fc:	1000151e 	bne	r2,zero,8b954 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8b900:	e0bffa17 	ldw	r2,-24(fp)
   8b904:	10800017 	ldw	r2,0(r2)
   8b908:	10800517 	ldw	r2,20(r2)
   8b90c:	e17ffc17 	ldw	r5,-16(fp)
   8b910:	e1bffd17 	ldw	r6,-12(fp)
   8b914:	e13ffa17 	ldw	r4,-24(fp)
   8b918:	103ee83a 	callr	r2
   8b91c:	e0bff915 	stw	r2,-28(fp)
   8b920:	e0bff917 	ldw	r2,-28(fp)
   8b924:	1004403a 	cmpge	r2,r2,zero
   8b928:	1000071e 	bne	r2,zero,8b948 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8b92c:	008b9980 	call	8b998 <alt_get_errno>
   8b930:	e0fff917 	ldw	r3,-28(fp)
   8b934:	00c7c83a 	sub	r3,zero,r3
   8b938:	10c00015 	stw	r3,0(r2)
          return -1;
   8b93c:	00bfffc4 	movi	r2,-1
   8b940:	e0bffe15 	stw	r2,-8(fp)
   8b944:	00000e06 	br	8b980 <read+0x10c>
        }
        return rval;
   8b948:	e0bff917 	ldw	r2,-28(fp)
   8b94c:	e0bffe15 	stw	r2,-8(fp)
   8b950:	00000b06 	br	8b980 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b954:	008b9980 	call	8b998 <alt_get_errno>
   8b958:	1007883a 	mov	r3,r2
   8b95c:	00800344 	movi	r2,13
   8b960:	18800015 	stw	r2,0(r3)
   8b964:	00000406 	br	8b978 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b968:	008b9980 	call	8b998 <alt_get_errno>
   8b96c:	1007883a 	mov	r3,r2
   8b970:	00801444 	movi	r2,81
   8b974:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b978:	00bfffc4 	movi	r2,-1
   8b97c:	e0bffe15 	stw	r2,-8(fp)
   8b980:	e0bffe17 	ldw	r2,-8(fp)
}
   8b984:	e037883a 	mov	sp,fp
   8b988:	dfc00117 	ldw	ra,4(sp)
   8b98c:	df000017 	ldw	fp,0(sp)
   8b990:	dec00204 	addi	sp,sp,8
   8b994:	f800283a 	ret

0008b998 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b998:	defffd04 	addi	sp,sp,-12
   8b99c:	dfc00215 	stw	ra,8(sp)
   8b9a0:	df000115 	stw	fp,4(sp)
   8b9a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b9a8:	00800274 	movhi	r2,9
   8b9ac:	10be8a04 	addi	r2,r2,-1496
   8b9b0:	10800017 	ldw	r2,0(r2)
   8b9b4:	1005003a 	cmpeq	r2,r2,zero
   8b9b8:	1000061e 	bne	r2,zero,8b9d4 <alt_get_errno+0x3c>
   8b9bc:	00800274 	movhi	r2,9
   8b9c0:	10be8a04 	addi	r2,r2,-1496
   8b9c4:	10800017 	ldw	r2,0(r2)
   8b9c8:	103ee83a 	callr	r2
   8b9cc:	e0bfff15 	stw	r2,-4(fp)
   8b9d0:	00000306 	br	8b9e0 <alt_get_errno+0x48>
   8b9d4:	00800274 	movhi	r2,9
   8b9d8:	10852d04 	addi	r2,r2,5300
   8b9dc:	e0bfff15 	stw	r2,-4(fp)
   8b9e0:	e0bfff17 	ldw	r2,-4(fp)
}
   8b9e4:	e037883a 	mov	sp,fp
   8b9e8:	dfc00117 	ldw	ra,4(sp)
   8b9ec:	df000017 	ldw	fp,0(sp)
   8b9f0:	dec00204 	addi	sp,sp,8
   8b9f4:	f800283a 	ret

0008b9f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b9f8:	defffc04 	addi	sp,sp,-16
   8b9fc:	dfc00315 	stw	ra,12(sp)
   8ba00:	df000215 	stw	fp,8(sp)
   8ba04:	dc000115 	stw	r16,4(sp)
   8ba08:	df000104 	addi	fp,sp,4
   8ba0c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8ba10:	e0bfff17 	ldw	r2,-4(fp)
   8ba14:	108000d0 	cmplti	r2,r2,3
   8ba18:	10000f1e 	bne	r2,zero,8ba58 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8ba1c:	e13fff17 	ldw	r4,-4(fp)
   8ba20:	04000274 	movhi	r16,9
   8ba24:	843a0704 	addi	r16,r16,-6116
   8ba28:	01400304 	movi	r5,12
   8ba2c:	00812180 	call	81218 <__mulsi3>
   8ba30:	1405883a 	add	r2,r2,r16
   8ba34:	10800204 	addi	r2,r2,8
   8ba38:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8ba3c:	e13fff17 	ldw	r4,-4(fp)
   8ba40:	04000274 	movhi	r16,9
   8ba44:	843a0704 	addi	r16,r16,-6116
   8ba48:	01400304 	movi	r5,12
   8ba4c:	00812180 	call	81218 <__mulsi3>
   8ba50:	1405883a 	add	r2,r2,r16
   8ba54:	10000015 	stw	zero,0(r2)
  }
}
   8ba58:	e037883a 	mov	sp,fp
   8ba5c:	dfc00217 	ldw	ra,8(sp)
   8ba60:	df000117 	ldw	fp,4(sp)
   8ba64:	dc000017 	ldw	r16,0(sp)
   8ba68:	dec00304 	addi	sp,sp,12
   8ba6c:	f800283a 	ret

0008ba70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8ba70:	defff804 	addi	sp,sp,-32
   8ba74:	df000715 	stw	fp,28(sp)
   8ba78:	df000704 	addi	fp,sp,28
   8ba7c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ba80:	0005303a 	rdctl	r2,status
   8ba84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ba88:	e0fffb17 	ldw	r3,-20(fp)
   8ba8c:	00bfff84 	movi	r2,-2
   8ba90:	1884703a 	and	r2,r3,r2
   8ba94:	1001703a 	wrctl	status,r2
  
  return context;
   8ba98:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ba9c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8baa0:	d0a00d17 	ldw	r2,-32716(gp)
   8baa4:	10c000c4 	addi	r3,r2,3
   8baa8:	00bfff04 	movi	r2,-4
   8baac:	1884703a 	and	r2,r3,r2
   8bab0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8bab4:	d0e00d17 	ldw	r3,-32716(gp)
   8bab8:	e0bffe17 	ldw	r2,-8(fp)
   8babc:	1887883a 	add	r3,r3,r2
   8bac0:	00800434 	movhi	r2,16
   8bac4:	10800004 	addi	r2,r2,0
   8bac8:	10c0072e 	bgeu	r2,r3,8bae8 <sbrk+0x78>
   8bacc:	e0bffd17 	ldw	r2,-12(fp)
   8bad0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bad4:	e0bffa17 	ldw	r2,-24(fp)
   8bad8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8badc:	00bfffc4 	movi	r2,-1
   8bae0:	e0bfff15 	stw	r2,-4(fp)
   8bae4:	00000c06 	br	8bb18 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8bae8:	d0a00d17 	ldw	r2,-32716(gp)
   8baec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8baf0:	d0e00d17 	ldw	r3,-32716(gp)
   8baf4:	e0bffe17 	ldw	r2,-8(fp)
   8baf8:	1885883a 	add	r2,r3,r2
   8bafc:	d0a00d15 	stw	r2,-32716(gp)
   8bb00:	e0bffd17 	ldw	r2,-12(fp)
   8bb04:	e0bff915 	stw	r2,-28(fp)
   8bb08:	e0bff917 	ldw	r2,-28(fp)
   8bb0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8bb10:	e0bffc17 	ldw	r2,-16(fp)
   8bb14:	e0bfff15 	stw	r2,-4(fp)
   8bb18:	e0bfff17 	ldw	r2,-4(fp)
} 
   8bb1c:	e037883a 	mov	sp,fp
   8bb20:	df000017 	ldw	fp,0(sp)
   8bb24:	dec00104 	addi	sp,sp,4
   8bb28:	f800283a 	ret

0008bb2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8bb2c:	defff704 	addi	sp,sp,-36
   8bb30:	dfc00815 	stw	ra,32(sp)
   8bb34:	df000715 	stw	fp,28(sp)
   8bb38:	df000704 	addi	fp,sp,28
   8bb3c:	e13ffb15 	stw	r4,-20(fp)
   8bb40:	e17ffc15 	stw	r5,-16(fp)
   8bb44:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8bb48:	e0bffb17 	ldw	r2,-20(fp)
   8bb4c:	1004803a 	cmplt	r2,r2,zero
   8bb50:	1000091e 	bne	r2,zero,8bb78 <write+0x4c>
   8bb54:	e13ffb17 	ldw	r4,-20(fp)
   8bb58:	01400304 	movi	r5,12
   8bb5c:	00812180 	call	81218 <__mulsi3>
   8bb60:	1007883a 	mov	r3,r2
   8bb64:	00800274 	movhi	r2,9
   8bb68:	10ba0704 	addi	r2,r2,-6116
   8bb6c:	1887883a 	add	r3,r3,r2
   8bb70:	e0ffff15 	stw	r3,-4(fp)
   8bb74:	00000106 	br	8bb7c <write+0x50>
   8bb78:	e03fff15 	stw	zero,-4(fp)
   8bb7c:	e0bfff17 	ldw	r2,-4(fp)
   8bb80:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8bb84:	e0bffa17 	ldw	r2,-24(fp)
   8bb88:	1005003a 	cmpeq	r2,r2,zero
   8bb8c:	1000241e 	bne	r2,zero,8bc20 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8bb90:	e0bffa17 	ldw	r2,-24(fp)
   8bb94:	10800217 	ldw	r2,8(r2)
   8bb98:	108000cc 	andi	r2,r2,3
   8bb9c:	1005003a 	cmpeq	r2,r2,zero
   8bba0:	10001a1e 	bne	r2,zero,8bc0c <write+0xe0>
   8bba4:	e0bffa17 	ldw	r2,-24(fp)
   8bba8:	10800017 	ldw	r2,0(r2)
   8bbac:	10800617 	ldw	r2,24(r2)
   8bbb0:	1005003a 	cmpeq	r2,r2,zero
   8bbb4:	1000151e 	bne	r2,zero,8bc0c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8bbb8:	e0bffa17 	ldw	r2,-24(fp)
   8bbbc:	10800017 	ldw	r2,0(r2)
   8bbc0:	10800617 	ldw	r2,24(r2)
   8bbc4:	e17ffc17 	ldw	r5,-16(fp)
   8bbc8:	e1bffd17 	ldw	r6,-12(fp)
   8bbcc:	e13ffa17 	ldw	r4,-24(fp)
   8bbd0:	103ee83a 	callr	r2
   8bbd4:	e0bff915 	stw	r2,-28(fp)
   8bbd8:	e0bff917 	ldw	r2,-28(fp)
   8bbdc:	1004403a 	cmpge	r2,r2,zero
   8bbe0:	1000071e 	bne	r2,zero,8bc00 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8bbe4:	008bc500 	call	8bc50 <alt_get_errno>
   8bbe8:	e0fff917 	ldw	r3,-28(fp)
   8bbec:	00c7c83a 	sub	r3,zero,r3
   8bbf0:	10c00015 	stw	r3,0(r2)
        return -1;
   8bbf4:	00bfffc4 	movi	r2,-1
   8bbf8:	e0bffe15 	stw	r2,-8(fp)
   8bbfc:	00000e06 	br	8bc38 <write+0x10c>
      }
      return rval;
   8bc00:	e0bff917 	ldw	r2,-28(fp)
   8bc04:	e0bffe15 	stw	r2,-8(fp)
   8bc08:	00000b06 	br	8bc38 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8bc0c:	008bc500 	call	8bc50 <alt_get_errno>
   8bc10:	1007883a 	mov	r3,r2
   8bc14:	00800344 	movi	r2,13
   8bc18:	18800015 	stw	r2,0(r3)
   8bc1c:	00000406 	br	8bc30 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8bc20:	008bc500 	call	8bc50 <alt_get_errno>
   8bc24:	1007883a 	mov	r3,r2
   8bc28:	00801444 	movi	r2,81
   8bc2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8bc30:	00bfffc4 	movi	r2,-1
   8bc34:	e0bffe15 	stw	r2,-8(fp)
   8bc38:	e0bffe17 	ldw	r2,-8(fp)
}
   8bc3c:	e037883a 	mov	sp,fp
   8bc40:	dfc00117 	ldw	ra,4(sp)
   8bc44:	df000017 	ldw	fp,0(sp)
   8bc48:	dec00204 	addi	sp,sp,8
   8bc4c:	f800283a 	ret

0008bc50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bc50:	defffd04 	addi	sp,sp,-12
   8bc54:	dfc00215 	stw	ra,8(sp)
   8bc58:	df000115 	stw	fp,4(sp)
   8bc5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8bc60:	00800274 	movhi	r2,9
   8bc64:	10be8a04 	addi	r2,r2,-1496
   8bc68:	10800017 	ldw	r2,0(r2)
   8bc6c:	1005003a 	cmpeq	r2,r2,zero
   8bc70:	1000061e 	bne	r2,zero,8bc8c <alt_get_errno+0x3c>
   8bc74:	00800274 	movhi	r2,9
   8bc78:	10be8a04 	addi	r2,r2,-1496
   8bc7c:	10800017 	ldw	r2,0(r2)
   8bc80:	103ee83a 	callr	r2
   8bc84:	e0bfff15 	stw	r2,-4(fp)
   8bc88:	00000306 	br	8bc98 <alt_get_errno+0x48>
   8bc8c:	00800274 	movhi	r2,9
   8bc90:	10852d04 	addi	r2,r2,5300
   8bc94:	e0bfff15 	stw	r2,-4(fp)
   8bc98:	e0bfff17 	ldw	r2,-4(fp)
}
   8bc9c:	e037883a 	mov	sp,fp
   8bca0:	dfc00117 	ldw	ra,4(sp)
   8bca4:	df000017 	ldw	fp,0(sp)
   8bca8:	dec00204 	addi	sp,sp,8
   8bcac:	f800283a 	ret

0008bcb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8bcb0:	defffd04 	addi	sp,sp,-12
   8bcb4:	dfc00215 	stw	ra,8(sp)
   8bcb8:	df000115 	stw	fp,4(sp)
   8bcbc:	df000104 	addi	fp,sp,4
   8bcc0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   8bcc4:	008d4180 	call	8d418 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8bcc8:	00800044 	movi	r2,1
   8bccc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8bcd0:	e037883a 	mov	sp,fp
   8bcd4:	dfc00117 	ldw	ra,4(sp)
   8bcd8:	df000017 	ldw	fp,0(sp)
   8bcdc:	dec00204 	addi	sp,sp,8
   8bce0:	f800283a 	ret

0008bce4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8bce4:	defffe04 	addi	sp,sp,-8
   8bce8:	dfc00115 	stw	ra,4(sp)
   8bcec:	df000015 	stw	fp,0(sp)
   8bcf0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8bcf4:	01000274 	movhi	r4,9
   8bcf8:	213a7104 	addi	r4,r4,-5692
   8bcfc:	000b883a 	mov	r5,zero
   8bd00:	000d883a 	mov	r6,zero
   8bd04:	008bea80 	call	8bea8 <altera_avalon_jtag_uart_init>
   8bd08:	01000274 	movhi	r4,9
   8bd0c:	213a6704 	addi	r4,r4,-5732
   8bd10:	008bd280 	call	8bd28 <alt_dev_reg>
}
   8bd14:	e037883a 	mov	sp,fp
   8bd18:	dfc00117 	ldw	ra,4(sp)
   8bd1c:	df000017 	ldw	fp,0(sp)
   8bd20:	dec00204 	addi	sp,sp,8
   8bd24:	f800283a 	ret

0008bd28 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8bd28:	defffd04 	addi	sp,sp,-12
   8bd2c:	dfc00215 	stw	ra,8(sp)
   8bd30:	df000115 	stw	fp,4(sp)
   8bd34:	df000104 	addi	fp,sp,4
   8bd38:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8bd3c:	e13fff17 	ldw	r4,-4(fp)
   8bd40:	01400274 	movhi	r5,9
   8bd44:	297e8704 	addi	r5,r5,-1508
   8bd48:	008c97c0 	call	8c97c <alt_dev_llist_insert>
}
   8bd4c:	e037883a 	mov	sp,fp
   8bd50:	dfc00117 	ldw	ra,4(sp)
   8bd54:	df000017 	ldw	fp,0(sp)
   8bd58:	dec00204 	addi	sp,sp,8
   8bd5c:	f800283a 	ret

0008bd60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8bd60:	defffa04 	addi	sp,sp,-24
   8bd64:	dfc00515 	stw	ra,20(sp)
   8bd68:	df000415 	stw	fp,16(sp)
   8bd6c:	df000404 	addi	fp,sp,16
   8bd70:	e13ffd15 	stw	r4,-12(fp)
   8bd74:	e17ffe15 	stw	r5,-8(fp)
   8bd78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bd7c:	e0bffd17 	ldw	r2,-12(fp)
   8bd80:	10800017 	ldw	r2,0(r2)
   8bd84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8bd88:	e0bffc17 	ldw	r2,-16(fp)
   8bd8c:	11000a04 	addi	r4,r2,40
   8bd90:	e0bffd17 	ldw	r2,-12(fp)
   8bd94:	11c00217 	ldw	r7,8(r2)
   8bd98:	e17ffe17 	ldw	r5,-8(fp)
   8bd9c:	e1bfff17 	ldw	r6,-4(fp)
   8bda0:	008c3a80 	call	8c3a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8bda4:	e037883a 	mov	sp,fp
   8bda8:	dfc00117 	ldw	ra,4(sp)
   8bdac:	df000017 	ldw	fp,0(sp)
   8bdb0:	dec00204 	addi	sp,sp,8
   8bdb4:	f800283a 	ret

0008bdb8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8bdb8:	defffa04 	addi	sp,sp,-24
   8bdbc:	dfc00515 	stw	ra,20(sp)
   8bdc0:	df000415 	stw	fp,16(sp)
   8bdc4:	df000404 	addi	fp,sp,16
   8bdc8:	e13ffd15 	stw	r4,-12(fp)
   8bdcc:	e17ffe15 	stw	r5,-8(fp)
   8bdd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bdd4:	e0bffd17 	ldw	r2,-12(fp)
   8bdd8:	10800017 	ldw	r2,0(r2)
   8bddc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8bde0:	e0bffc17 	ldw	r2,-16(fp)
   8bde4:	11000a04 	addi	r4,r2,40
   8bde8:	e0bffd17 	ldw	r2,-12(fp)
   8bdec:	11c00217 	ldw	r7,8(r2)
   8bdf0:	e17ffe17 	ldw	r5,-8(fp)
   8bdf4:	e1bfff17 	ldw	r6,-4(fp)
   8bdf8:	008c5cc0 	call	8c5cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8bdfc:	e037883a 	mov	sp,fp
   8be00:	dfc00117 	ldw	ra,4(sp)
   8be04:	df000017 	ldw	fp,0(sp)
   8be08:	dec00204 	addi	sp,sp,8
   8be0c:	f800283a 	ret

0008be10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8be10:	defffc04 	addi	sp,sp,-16
   8be14:	dfc00315 	stw	ra,12(sp)
   8be18:	df000215 	stw	fp,8(sp)
   8be1c:	df000204 	addi	fp,sp,8
   8be20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8be24:	e0bfff17 	ldw	r2,-4(fp)
   8be28:	10800017 	ldw	r2,0(r2)
   8be2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8be30:	e0bffe17 	ldw	r2,-8(fp)
   8be34:	11000a04 	addi	r4,r2,40
   8be38:	e0bfff17 	ldw	r2,-4(fp)
   8be3c:	11400217 	ldw	r5,8(r2)
   8be40:	008c2400 	call	8c240 <altera_avalon_jtag_uart_close>
}
   8be44:	e037883a 	mov	sp,fp
   8be48:	dfc00117 	ldw	ra,4(sp)
   8be4c:	df000017 	ldw	fp,0(sp)
   8be50:	dec00204 	addi	sp,sp,8
   8be54:	f800283a 	ret

0008be58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8be58:	defffa04 	addi	sp,sp,-24
   8be5c:	dfc00515 	stw	ra,20(sp)
   8be60:	df000415 	stw	fp,16(sp)
   8be64:	df000404 	addi	fp,sp,16
   8be68:	e13ffd15 	stw	r4,-12(fp)
   8be6c:	e17ffe15 	stw	r5,-8(fp)
   8be70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8be74:	e0bffd17 	ldw	r2,-12(fp)
   8be78:	10800017 	ldw	r2,0(r2)
   8be7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8be80:	e0bffc17 	ldw	r2,-16(fp)
   8be84:	11000a04 	addi	r4,r2,40
   8be88:	e17ffe17 	ldw	r5,-8(fp)
   8be8c:	e1bfff17 	ldw	r6,-4(fp)
   8be90:	008c2b40 	call	8c2b4 <altera_avalon_jtag_uart_ioctl>
}
   8be94:	e037883a 	mov	sp,fp
   8be98:	dfc00117 	ldw	ra,4(sp)
   8be9c:	df000017 	ldw	fp,0(sp)
   8bea0:	dec00204 	addi	sp,sp,8
   8bea4:	f800283a 	ret

0008bea8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8bea8:	defffa04 	addi	sp,sp,-24
   8beac:	dfc00515 	stw	ra,20(sp)
   8beb0:	df000415 	stw	fp,16(sp)
   8beb4:	df000404 	addi	fp,sp,16
   8beb8:	e13ffd15 	stw	r4,-12(fp)
   8bebc:	e17ffe15 	stw	r5,-8(fp)
   8bec0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bec4:	e0fffd17 	ldw	r3,-12(fp)
   8bec8:	00800044 	movi	r2,1
   8becc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8bed0:	e0bffd17 	ldw	r2,-12(fp)
   8bed4:	10800017 	ldw	r2,0(r2)
   8bed8:	11000104 	addi	r4,r2,4
   8bedc:	e0bffd17 	ldw	r2,-12(fp)
   8bee0:	10800817 	ldw	r2,32(r2)
   8bee4:	1007883a 	mov	r3,r2
   8bee8:	2005883a 	mov	r2,r4
   8beec:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8bef0:	e13ffe17 	ldw	r4,-8(fp)
   8bef4:	e17fff17 	ldw	r5,-4(fp)
   8bef8:	d8000015 	stw	zero,0(sp)
   8befc:	01800274 	movhi	r6,9
   8bf00:	31afda04 	addi	r6,r6,-16536
   8bf04:	e1fffd17 	ldw	r7,-12(fp)
   8bf08:	008cb740 	call	8cb74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8bf0c:	e0bffd17 	ldw	r2,-12(fp)
   8bf10:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8bf14:	e0bffd17 	ldw	r2,-12(fp)
   8bf18:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8bf1c:	00800274 	movhi	r2,9
   8bf20:	10853204 	addi	r2,r2,5320
   8bf24:	10800017 	ldw	r2,0(r2)
   8bf28:	100b883a 	mov	r5,r2
   8bf2c:	01800274 	movhi	r6,9
   8bf30:	31b06404 	addi	r6,r6,-15984
   8bf34:	e1fffd17 	ldw	r7,-12(fp)
   8bf38:	008c80c0 	call	8c80c <alt_alarm_start>
   8bf3c:	1004403a 	cmpge	r2,r2,zero
   8bf40:	1000041e 	bne	r2,zero,8bf54 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8bf44:	e0fffd17 	ldw	r3,-12(fp)
   8bf48:	00a00034 	movhi	r2,32768
   8bf4c:	10bfffc4 	addi	r2,r2,-1
   8bf50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8bf54:	e037883a 	mov	sp,fp
   8bf58:	dfc00117 	ldw	ra,4(sp)
   8bf5c:	df000017 	ldw	fp,0(sp)
   8bf60:	dec00204 	addi	sp,sp,8
   8bf64:	f800283a 	ret

0008bf68 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8bf68:	defff804 	addi	sp,sp,-32
   8bf6c:	df000715 	stw	fp,28(sp)
   8bf70:	df000704 	addi	fp,sp,28
   8bf74:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8bf78:	e0bfff17 	ldw	r2,-4(fp)
   8bf7c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8bf80:	e0bffe17 	ldw	r2,-8(fp)
   8bf84:	10800017 	ldw	r2,0(r2)
   8bf88:	e0bffd15 	stw	r2,-12(fp)
   8bf8c:	00000006 	br	8bf90 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8bf90:	e0bffd17 	ldw	r2,-12(fp)
   8bf94:	10800104 	addi	r2,r2,4
   8bf98:	10800037 	ldwio	r2,0(r2)
   8bf9c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8bfa0:	e0bffc17 	ldw	r2,-16(fp)
   8bfa4:	1080c00c 	andi	r2,r2,768
   8bfa8:	1005003a 	cmpeq	r2,r2,zero
   8bfac:	1000741e 	bne	r2,zero,8c180 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8bfb0:	e0bffc17 	ldw	r2,-16(fp)
   8bfb4:	1080400c 	andi	r2,r2,256
   8bfb8:	1005003a 	cmpeq	r2,r2,zero
   8bfbc:	1000351e 	bne	r2,zero,8c094 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8bfc0:	00800074 	movhi	r2,1
   8bfc4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bfc8:	e0bffe17 	ldw	r2,-8(fp)
   8bfcc:	10800a17 	ldw	r2,40(r2)
   8bfd0:	10800044 	addi	r2,r2,1
   8bfd4:	1081ffcc 	andi	r2,r2,2047
   8bfd8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8bfdc:	e0bffe17 	ldw	r2,-8(fp)
   8bfe0:	10c00b17 	ldw	r3,44(r2)
   8bfe4:	e0bffa17 	ldw	r2,-24(fp)
   8bfe8:	18801626 	beq	r3,r2,8c044 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8bfec:	e0bffd17 	ldw	r2,-12(fp)
   8bff0:	10800037 	ldwio	r2,0(r2)
   8bff4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8bff8:	e0bffb17 	ldw	r2,-20(fp)
   8bffc:	10a0000c 	andi	r2,r2,32768
   8c000:	1005003a 	cmpeq	r2,r2,zero
   8c004:	10000f1e 	bne	r2,zero,8c044 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8c008:	e0bffe17 	ldw	r2,-8(fp)
   8c00c:	10c00a17 	ldw	r3,40(r2)
   8c010:	e0bffb17 	ldw	r2,-20(fp)
   8c014:	1009883a 	mov	r4,r2
   8c018:	e0bffe17 	ldw	r2,-8(fp)
   8c01c:	1885883a 	add	r2,r3,r2
   8c020:	10800e04 	addi	r2,r2,56
   8c024:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c028:	e0bffe17 	ldw	r2,-8(fp)
   8c02c:	10800a17 	ldw	r2,40(r2)
   8c030:	10800044 	addi	r2,r2,1
   8c034:	10c1ffcc 	andi	r3,r2,2047
   8c038:	e0bffe17 	ldw	r2,-8(fp)
   8c03c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8c040:	003fe106 	br	8bfc8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8c044:	e0bffb17 	ldw	r2,-20(fp)
   8c048:	10bfffec 	andhi	r2,r2,65535
   8c04c:	1005003a 	cmpeq	r2,r2,zero
   8c050:	1000101e 	bne	r2,zero,8c094 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c054:	e0bffe17 	ldw	r2,-8(fp)
   8c058:	10c00817 	ldw	r3,32(r2)
   8c05c:	00bfff84 	movi	r2,-2
   8c060:	1886703a 	and	r3,r3,r2
   8c064:	e0bffe17 	ldw	r2,-8(fp)
   8c068:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8c06c:	e0bffd17 	ldw	r2,-12(fp)
   8c070:	11000104 	addi	r4,r2,4
   8c074:	e0bffe17 	ldw	r2,-8(fp)
   8c078:	10800817 	ldw	r2,32(r2)
   8c07c:	1007883a 	mov	r3,r2
   8c080:	2005883a 	mov	r2,r4
   8c084:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c088:	e0bffd17 	ldw	r2,-12(fp)
   8c08c:	10800104 	addi	r2,r2,4
   8c090:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8c094:	e0bffc17 	ldw	r2,-16(fp)
   8c098:	1080800c 	andi	r2,r2,512
   8c09c:	1005003a 	cmpeq	r2,r2,zero
   8c0a0:	103fbb1e 	bne	r2,zero,8bf90 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8c0a4:	e0bffc17 	ldw	r2,-16(fp)
   8c0a8:	10bfffec 	andhi	r2,r2,65535
   8c0ac:	1004d43a 	srli	r2,r2,16
   8c0b0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c0b4:	00001506 	br	8c10c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8c0b8:	e13ffd17 	ldw	r4,-12(fp)
   8c0bc:	e0bffe17 	ldw	r2,-8(fp)
   8c0c0:	10c00d17 	ldw	r3,52(r2)
   8c0c4:	e0bffe17 	ldw	r2,-8(fp)
   8c0c8:	1885883a 	add	r2,r3,r2
   8c0cc:	10820e04 	addi	r2,r2,2104
   8c0d0:	10800003 	ldbu	r2,0(r2)
   8c0d4:	10c03fcc 	andi	r3,r2,255
   8c0d8:	18c0201c 	xori	r3,r3,128
   8c0dc:	18ffe004 	addi	r3,r3,-128
   8c0e0:	2005883a 	mov	r2,r4
   8c0e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c0e8:	e0bffe17 	ldw	r2,-8(fp)
   8c0ec:	10800d17 	ldw	r2,52(r2)
   8c0f0:	10800044 	addi	r2,r2,1
   8c0f4:	10c1ffcc 	andi	r3,r2,2047
   8c0f8:	e0bffe17 	ldw	r2,-8(fp)
   8c0fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8c100:	e0bff917 	ldw	r2,-28(fp)
   8c104:	10bfffc4 	addi	r2,r2,-1
   8c108:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c10c:	e0bff917 	ldw	r2,-28(fp)
   8c110:	1005003a 	cmpeq	r2,r2,zero
   8c114:	1000051e 	bne	r2,zero,8c12c <altera_avalon_jtag_uart_irq+0x1c4>
   8c118:	e0bffe17 	ldw	r2,-8(fp)
   8c11c:	10c00d17 	ldw	r3,52(r2)
   8c120:	e0bffe17 	ldw	r2,-8(fp)
   8c124:	10800c17 	ldw	r2,48(r2)
   8c128:	18bfe31e 	bne	r3,r2,8c0b8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8c12c:	e0bff917 	ldw	r2,-28(fp)
   8c130:	1005003a 	cmpeq	r2,r2,zero
   8c134:	103f961e 	bne	r2,zero,8bf90 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c138:	e0bffe17 	ldw	r2,-8(fp)
   8c13c:	10c00817 	ldw	r3,32(r2)
   8c140:	00bfff44 	movi	r2,-3
   8c144:	1886703a 	and	r3,r3,r2
   8c148:	e0bffe17 	ldw	r2,-8(fp)
   8c14c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c150:	e0bffe17 	ldw	r2,-8(fp)
   8c154:	10800017 	ldw	r2,0(r2)
   8c158:	11000104 	addi	r4,r2,4
   8c15c:	e0bffe17 	ldw	r2,-8(fp)
   8c160:	10800817 	ldw	r2,32(r2)
   8c164:	1007883a 	mov	r3,r2
   8c168:	2005883a 	mov	r2,r4
   8c16c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c170:	e0bffd17 	ldw	r2,-12(fp)
   8c174:	10800104 	addi	r2,r2,4
   8c178:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8c17c:	003f8406 	br	8bf90 <altera_avalon_jtag_uart_irq+0x28>
}
   8c180:	e037883a 	mov	sp,fp
   8c184:	df000017 	ldw	fp,0(sp)
   8c188:	dec00104 	addi	sp,sp,4
   8c18c:	f800283a 	ret

0008c190 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8c190:	defffc04 	addi	sp,sp,-16
   8c194:	df000315 	stw	fp,12(sp)
   8c198:	df000304 	addi	fp,sp,12
   8c19c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8c1a0:	e0bfff17 	ldw	r2,-4(fp)
   8c1a4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8c1a8:	e0bffe17 	ldw	r2,-8(fp)
   8c1ac:	10800017 	ldw	r2,0(r2)
   8c1b0:	10800104 	addi	r2,r2,4
   8c1b4:	10800037 	ldwio	r2,0(r2)
   8c1b8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8c1bc:	e0bffd17 	ldw	r2,-12(fp)
   8c1c0:	1081000c 	andi	r2,r2,1024
   8c1c4:	1005003a 	cmpeq	r2,r2,zero
   8c1c8:	10000c1e 	bne	r2,zero,8c1fc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8c1cc:	e0bffe17 	ldw	r2,-8(fp)
   8c1d0:	10800017 	ldw	r2,0(r2)
   8c1d4:	11000104 	addi	r4,r2,4
   8c1d8:	e0bffe17 	ldw	r2,-8(fp)
   8c1dc:	10800817 	ldw	r2,32(r2)
   8c1e0:	10810014 	ori	r2,r2,1024
   8c1e4:	1007883a 	mov	r3,r2
   8c1e8:	2005883a 	mov	r2,r4
   8c1ec:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8c1f0:	e0bffe17 	ldw	r2,-8(fp)
   8c1f4:	10000915 	stw	zero,36(r2)
   8c1f8:	00000a06 	br	8c224 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8c1fc:	e0bffe17 	ldw	r2,-8(fp)
   8c200:	10c00917 	ldw	r3,36(r2)
   8c204:	00a00034 	movhi	r2,32768
   8c208:	10bfff04 	addi	r2,r2,-4
   8c20c:	10c00536 	bltu	r2,r3,8c224 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8c210:	e0bffe17 	ldw	r2,-8(fp)
   8c214:	10800917 	ldw	r2,36(r2)
   8c218:	10c00044 	addi	r3,r2,1
   8c21c:	e0bffe17 	ldw	r2,-8(fp)
   8c220:	10c00915 	stw	r3,36(r2)
   8c224:	00800274 	movhi	r2,9
   8c228:	10853204 	addi	r2,r2,5320
   8c22c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8c230:	e037883a 	mov	sp,fp
   8c234:	df000017 	ldw	fp,0(sp)
   8c238:	dec00104 	addi	sp,sp,4
   8c23c:	f800283a 	ret

0008c240 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8c240:	defffc04 	addi	sp,sp,-16
   8c244:	df000315 	stw	fp,12(sp)
   8c248:	df000304 	addi	fp,sp,12
   8c24c:	e13ffd15 	stw	r4,-12(fp)
   8c250:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c254:	00000706 	br	8c274 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8c258:	e0bffe17 	ldw	r2,-8(fp)
   8c25c:	1090000c 	andi	r2,r2,16384
   8c260:	1005003a 	cmpeq	r2,r2,zero
   8c264:	1000031e 	bne	r2,zero,8c274 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8c268:	00bffd44 	movi	r2,-11
   8c26c:	e0bfff15 	stw	r2,-4(fp)
   8c270:	00000b06 	br	8c2a0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c274:	e0bffd17 	ldw	r2,-12(fp)
   8c278:	10c00d17 	ldw	r3,52(r2)
   8c27c:	e0bffd17 	ldw	r2,-12(fp)
   8c280:	10800c17 	ldw	r2,48(r2)
   8c284:	18800526 	beq	r3,r2,8c29c <altera_avalon_jtag_uart_close+0x5c>
   8c288:	e0bffd17 	ldw	r2,-12(fp)
   8c28c:	10c00917 	ldw	r3,36(r2)
   8c290:	e0bffd17 	ldw	r2,-12(fp)
   8c294:	10800117 	ldw	r2,4(r2)
   8c298:	18bfef36 	bltu	r3,r2,8c258 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8c29c:	e03fff15 	stw	zero,-4(fp)
   8c2a0:	e0bfff17 	ldw	r2,-4(fp)
}
   8c2a4:	e037883a 	mov	sp,fp
   8c2a8:	df000017 	ldw	fp,0(sp)
   8c2ac:	dec00104 	addi	sp,sp,4
   8c2b0:	f800283a 	ret

0008c2b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8c2b4:	defff804 	addi	sp,sp,-32
   8c2b8:	df000715 	stw	fp,28(sp)
   8c2bc:	df000704 	addi	fp,sp,28
   8c2c0:	e13ffb15 	stw	r4,-20(fp)
   8c2c4:	e17ffc15 	stw	r5,-16(fp)
   8c2c8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8c2cc:	00bff9c4 	movi	r2,-25
   8c2d0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8c2d4:	e0bffc17 	ldw	r2,-16(fp)
   8c2d8:	e0bfff15 	stw	r2,-4(fp)
   8c2dc:	e0ffff17 	ldw	r3,-4(fp)
   8c2e0:	189a8060 	cmpeqi	r2,r3,27137
   8c2e4:	1000041e 	bne	r2,zero,8c2f8 <altera_avalon_jtag_uart_ioctl+0x44>
   8c2e8:	e0ffff17 	ldw	r3,-4(fp)
   8c2ec:	189a80a0 	cmpeqi	r2,r3,27138
   8c2f0:	10001b1e 	bne	r2,zero,8c360 <altera_avalon_jtag_uart_ioctl+0xac>
   8c2f4:	00002706 	br	8c394 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8c2f8:	e0bffb17 	ldw	r2,-20(fp)
   8c2fc:	10c00117 	ldw	r3,4(r2)
   8c300:	00a00034 	movhi	r2,32768
   8c304:	10bfffc4 	addi	r2,r2,-1
   8c308:	18802226 	beq	r3,r2,8c394 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8c30c:	e0bffd17 	ldw	r2,-12(fp)
   8c310:	10800017 	ldw	r2,0(r2)
   8c314:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8c318:	e0bff917 	ldw	r2,-28(fp)
   8c31c:	10800090 	cmplti	r2,r2,2
   8c320:	1000071e 	bne	r2,zero,8c340 <altera_avalon_jtag_uart_ioctl+0x8c>
   8c324:	e0fff917 	ldw	r3,-28(fp)
   8c328:	00a00034 	movhi	r2,32768
   8c32c:	10bfffc4 	addi	r2,r2,-1
   8c330:	18800326 	beq	r3,r2,8c340 <altera_avalon_jtag_uart_ioctl+0x8c>
   8c334:	e0bff917 	ldw	r2,-28(fp)
   8c338:	e0bffe15 	stw	r2,-8(fp)
   8c33c:	00000306 	br	8c34c <altera_avalon_jtag_uart_ioctl+0x98>
   8c340:	00e00034 	movhi	r3,32768
   8c344:	18ffff84 	addi	r3,r3,-2
   8c348:	e0fffe15 	stw	r3,-8(fp)
   8c34c:	e0bffb17 	ldw	r2,-20(fp)
   8c350:	e0fffe17 	ldw	r3,-8(fp)
   8c354:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8c358:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8c35c:	00000d06 	br	8c394 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8c360:	e0bffb17 	ldw	r2,-20(fp)
   8c364:	10c00117 	ldw	r3,4(r2)
   8c368:	00a00034 	movhi	r2,32768
   8c36c:	10bfffc4 	addi	r2,r2,-1
   8c370:	18800826 	beq	r3,r2,8c394 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8c374:	e13ffd17 	ldw	r4,-12(fp)
   8c378:	e0bffb17 	ldw	r2,-20(fp)
   8c37c:	10c00917 	ldw	r3,36(r2)
   8c380:	e0bffb17 	ldw	r2,-20(fp)
   8c384:	10800117 	ldw	r2,4(r2)
   8c388:	1885803a 	cmpltu	r2,r3,r2
   8c38c:	20800015 	stw	r2,0(r4)
      rc = 0;
   8c390:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8c394:	e0bffa17 	ldw	r2,-24(fp)
}
   8c398:	e037883a 	mov	sp,fp
   8c39c:	df000017 	ldw	fp,0(sp)
   8c3a0:	dec00104 	addi	sp,sp,4
   8c3a4:	f800283a 	ret

0008c3a8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c3a8:	defff204 	addi	sp,sp,-56
   8c3ac:	dfc00d15 	stw	ra,52(sp)
   8c3b0:	df000c15 	stw	fp,48(sp)
   8c3b4:	df000c04 	addi	fp,sp,48
   8c3b8:	e13ffb15 	stw	r4,-20(fp)
   8c3bc:	e17ffc15 	stw	r5,-16(fp)
   8c3c0:	e1bffd15 	stw	r6,-12(fp)
   8c3c4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8c3c8:	e0bffc17 	ldw	r2,-16(fp)
   8c3cc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c3d0:	00004806 	br	8c4f4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c3d4:	e0bffb17 	ldw	r2,-20(fp)
   8c3d8:	10800a17 	ldw	r2,40(r2)
   8c3dc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8c3e0:	e0bffb17 	ldw	r2,-20(fp)
   8c3e4:	10800b17 	ldw	r2,44(r2)
   8c3e8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8c3ec:	e0fff717 	ldw	r3,-36(fp)
   8c3f0:	e0bff617 	ldw	r2,-40(fp)
   8c3f4:	18800536 	bltu	r3,r2,8c40c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8c3f8:	e0bff717 	ldw	r2,-36(fp)
   8c3fc:	e0fff617 	ldw	r3,-40(fp)
   8c400:	10c5c83a 	sub	r2,r2,r3
   8c404:	e0bff815 	stw	r2,-32(fp)
   8c408:	00000406 	br	8c41c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c40c:	00820004 	movi	r2,2048
   8c410:	e0fff617 	ldw	r3,-40(fp)
   8c414:	10c5c83a 	sub	r2,r2,r3
   8c418:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8c41c:	e0bff817 	ldw	r2,-32(fp)
   8c420:	1005003a 	cmpeq	r2,r2,zero
   8c424:	10001f1e 	bne	r2,zero,8c4a4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8c428:	e0fffd17 	ldw	r3,-12(fp)
   8c42c:	e0bff817 	ldw	r2,-32(fp)
   8c430:	1880022e 	bgeu	r3,r2,8c43c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8c434:	e0bffd17 	ldw	r2,-12(fp)
   8c438:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8c43c:	e0bffb17 	ldw	r2,-20(fp)
   8c440:	10c00e04 	addi	r3,r2,56
   8c444:	e0bff617 	ldw	r2,-40(fp)
   8c448:	1887883a 	add	r3,r3,r2
   8c44c:	e0bffa17 	ldw	r2,-24(fp)
   8c450:	1009883a 	mov	r4,r2
   8c454:	180b883a 	mov	r5,r3
   8c458:	e1bff817 	ldw	r6,-32(fp)
   8c45c:	00866840 	call	86684 <memcpy>
      ptr   += n;
   8c460:	e0fff817 	ldw	r3,-32(fp)
   8c464:	e0bffa17 	ldw	r2,-24(fp)
   8c468:	10c5883a 	add	r2,r2,r3
   8c46c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8c470:	e0fffd17 	ldw	r3,-12(fp)
   8c474:	e0bff817 	ldw	r2,-32(fp)
   8c478:	1885c83a 	sub	r2,r3,r2
   8c47c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c480:	e0fff617 	ldw	r3,-40(fp)
   8c484:	e0bff817 	ldw	r2,-32(fp)
   8c488:	1885883a 	add	r2,r3,r2
   8c48c:	10c1ffcc 	andi	r3,r2,2047
   8c490:	e0bffb17 	ldw	r2,-20(fp)
   8c494:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8c498:	e0bffd17 	ldw	r2,-12(fp)
   8c49c:	10800048 	cmpgei	r2,r2,1
   8c4a0:	103fcc1e 	bne	r2,zero,8c3d4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8c4a4:	e0fffa17 	ldw	r3,-24(fp)
   8c4a8:	e0bffc17 	ldw	r2,-16(fp)
   8c4ac:	1880141e 	bne	r3,r2,8c500 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8c4b0:	e0bffe17 	ldw	r2,-8(fp)
   8c4b4:	1090000c 	andi	r2,r2,16384
   8c4b8:	1004c03a 	cmpne	r2,r2,zero
   8c4bc:	1000101e 	bne	r2,zero,8c500 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8c4c0:	e0bffb17 	ldw	r2,-20(fp)
   8c4c4:	10c00a17 	ldw	r3,40(r2)
   8c4c8:	e0bff717 	ldw	r2,-36(fp)
   8c4cc:	1880051e 	bne	r3,r2,8c4e4 <altera_avalon_jtag_uart_read+0x13c>
   8c4d0:	e0bffb17 	ldw	r2,-20(fp)
   8c4d4:	10c00917 	ldw	r3,36(r2)
   8c4d8:	e0bffb17 	ldw	r2,-20(fp)
   8c4dc:	10800117 	ldw	r2,4(r2)
   8c4e0:	18bff736 	bltu	r3,r2,8c4c0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8c4e4:	e0bffb17 	ldw	r2,-20(fp)
   8c4e8:	10c00a17 	ldw	r3,40(r2)
   8c4ec:	e0bff717 	ldw	r2,-36(fp)
   8c4f0:	18800326 	beq	r3,r2,8c500 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c4f4:	e0bffd17 	ldw	r2,-12(fp)
   8c4f8:	10800048 	cmpgei	r2,r2,1
   8c4fc:	103fb51e 	bne	r2,zero,8c3d4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8c500:	e0fffa17 	ldw	r3,-24(fp)
   8c504:	e0bffc17 	ldw	r2,-16(fp)
   8c508:	18801926 	beq	r3,r2,8c570 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c50c:	0005303a 	rdctl	r2,status
   8c510:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c514:	e0fff517 	ldw	r3,-44(fp)
   8c518:	00bfff84 	movi	r2,-2
   8c51c:	1884703a 	and	r2,r3,r2
   8c520:	1001703a 	wrctl	status,r2
  
  return context;
   8c524:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8c528:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c52c:	e0bffb17 	ldw	r2,-20(fp)
   8c530:	10800817 	ldw	r2,32(r2)
   8c534:	10c00054 	ori	r3,r2,1
   8c538:	e0bffb17 	ldw	r2,-20(fp)
   8c53c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c540:	e0bffb17 	ldw	r2,-20(fp)
   8c544:	10800017 	ldw	r2,0(r2)
   8c548:	11000104 	addi	r4,r2,4
   8c54c:	e0bffb17 	ldw	r2,-20(fp)
   8c550:	10800817 	ldw	r2,32(r2)
   8c554:	1007883a 	mov	r3,r2
   8c558:	2005883a 	mov	r2,r4
   8c55c:	10c00035 	stwio	r3,0(r2)
   8c560:	e0bff917 	ldw	r2,-28(fp)
   8c564:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c568:	e0bff417 	ldw	r2,-48(fp)
   8c56c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8c570:	e0fffa17 	ldw	r3,-24(fp)
   8c574:	e0bffc17 	ldw	r2,-16(fp)
   8c578:	18800526 	beq	r3,r2,8c590 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8c57c:	e0fffa17 	ldw	r3,-24(fp)
   8c580:	e0bffc17 	ldw	r2,-16(fp)
   8c584:	1887c83a 	sub	r3,r3,r2
   8c588:	e0ffff15 	stw	r3,-4(fp)
   8c58c:	00000906 	br	8c5b4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8c590:	e0bffe17 	ldw	r2,-8(fp)
   8c594:	1090000c 	andi	r2,r2,16384
   8c598:	1005003a 	cmpeq	r2,r2,zero
   8c59c:	1000031e 	bne	r2,zero,8c5ac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8c5a0:	00bffd44 	movi	r2,-11
   8c5a4:	e0bfff15 	stw	r2,-4(fp)
   8c5a8:	00000206 	br	8c5b4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8c5ac:	00bffec4 	movi	r2,-5
   8c5b0:	e0bfff15 	stw	r2,-4(fp)
   8c5b4:	e0bfff17 	ldw	r2,-4(fp)
}
   8c5b8:	e037883a 	mov	sp,fp
   8c5bc:	dfc00117 	ldw	ra,4(sp)
   8c5c0:	df000017 	ldw	fp,0(sp)
   8c5c4:	dec00204 	addi	sp,sp,8
   8c5c8:	f800283a 	ret

0008c5cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8c5cc:	defff204 	addi	sp,sp,-56
   8c5d0:	dfc00d15 	stw	ra,52(sp)
   8c5d4:	df000c15 	stw	fp,48(sp)
   8c5d8:	df000c04 	addi	fp,sp,48
   8c5dc:	e13ffb15 	stw	r4,-20(fp)
   8c5e0:	e17ffc15 	stw	r5,-16(fp)
   8c5e4:	e1bffd15 	stw	r6,-12(fp)
   8c5e8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8c5ec:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8c5f0:	e0bffc17 	ldw	r2,-16(fp)
   8c5f4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c5f8:	00003a06 	br	8c6e4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8c5fc:	e0bffb17 	ldw	r2,-20(fp)
   8c600:	10800c17 	ldw	r2,48(r2)
   8c604:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8c608:	e0bffb17 	ldw	r2,-20(fp)
   8c60c:	10800d17 	ldw	r2,52(r2)
   8c610:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8c614:	e0fffa17 	ldw	r3,-24(fp)
   8c618:	e0bff917 	ldw	r2,-28(fp)
   8c61c:	1880062e 	bgeu	r3,r2,8c638 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8c620:	e0fff917 	ldw	r3,-28(fp)
   8c624:	e0bffa17 	ldw	r2,-24(fp)
   8c628:	1885c83a 	sub	r2,r3,r2
   8c62c:	10bfffc4 	addi	r2,r2,-1
   8c630:	e0bff815 	stw	r2,-32(fp)
   8c634:	00000c06 	br	8c668 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8c638:	e0bff917 	ldw	r2,-28(fp)
   8c63c:	1005003a 	cmpeq	r2,r2,zero
   8c640:	1000051e 	bne	r2,zero,8c658 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8c644:	00820004 	movi	r2,2048
   8c648:	e0fffa17 	ldw	r3,-24(fp)
   8c64c:	10c5c83a 	sub	r2,r2,r3
   8c650:	e0bff815 	stw	r2,-32(fp)
   8c654:	00000406 	br	8c668 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8c658:	0081ffc4 	movi	r2,2047
   8c65c:	e0fffa17 	ldw	r3,-24(fp)
   8c660:	10c5c83a 	sub	r2,r2,r3
   8c664:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8c668:	e0bff817 	ldw	r2,-32(fp)
   8c66c:	1005003a 	cmpeq	r2,r2,zero
   8c670:	10001f1e 	bne	r2,zero,8c6f0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8c674:	e0fffd17 	ldw	r3,-12(fp)
   8c678:	e0bff817 	ldw	r2,-32(fp)
   8c67c:	1880022e 	bgeu	r3,r2,8c688 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8c680:	e0bffd17 	ldw	r2,-12(fp)
   8c684:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8c688:	e0bffb17 	ldw	r2,-20(fp)
   8c68c:	10c20e04 	addi	r3,r2,2104
   8c690:	e0bffa17 	ldw	r2,-24(fp)
   8c694:	1885883a 	add	r2,r3,r2
   8c698:	e0fffc17 	ldw	r3,-16(fp)
   8c69c:	1009883a 	mov	r4,r2
   8c6a0:	180b883a 	mov	r5,r3
   8c6a4:	e1bff817 	ldw	r6,-32(fp)
   8c6a8:	00866840 	call	86684 <memcpy>
      ptr   += n;
   8c6ac:	e0fff817 	ldw	r3,-32(fp)
   8c6b0:	e0bffc17 	ldw	r2,-16(fp)
   8c6b4:	10c5883a 	add	r2,r2,r3
   8c6b8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8c6bc:	e0fffd17 	ldw	r3,-12(fp)
   8c6c0:	e0bff817 	ldw	r2,-32(fp)
   8c6c4:	1885c83a 	sub	r2,r3,r2
   8c6c8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c6cc:	e0fffa17 	ldw	r3,-24(fp)
   8c6d0:	e0bff817 	ldw	r2,-32(fp)
   8c6d4:	1885883a 	add	r2,r3,r2
   8c6d8:	10c1ffcc 	andi	r3,r2,2047
   8c6dc:	e0bffb17 	ldw	r2,-20(fp)
   8c6e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c6e4:	e0bffd17 	ldw	r2,-12(fp)
   8c6e8:	10800048 	cmpgei	r2,r2,1
   8c6ec:	103fc31e 	bne	r2,zero,8c5fc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c6f0:	0005303a 	rdctl	r2,status
   8c6f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c6f8:	e0fff517 	ldw	r3,-44(fp)
   8c6fc:	00bfff84 	movi	r2,-2
   8c700:	1884703a 	and	r2,r3,r2
   8c704:	1001703a 	wrctl	status,r2
  
  return context;
   8c708:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8c70c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c710:	e0bffb17 	ldw	r2,-20(fp)
   8c714:	10800817 	ldw	r2,32(r2)
   8c718:	10c00094 	ori	r3,r2,2
   8c71c:	e0bffb17 	ldw	r2,-20(fp)
   8c720:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c724:	e0bffb17 	ldw	r2,-20(fp)
   8c728:	10800017 	ldw	r2,0(r2)
   8c72c:	11000104 	addi	r4,r2,4
   8c730:	e0bffb17 	ldw	r2,-20(fp)
   8c734:	10800817 	ldw	r2,32(r2)
   8c738:	1007883a 	mov	r3,r2
   8c73c:	2005883a 	mov	r2,r4
   8c740:	10c00035 	stwio	r3,0(r2)
   8c744:	e0bff717 	ldw	r2,-36(fp)
   8c748:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c74c:	e0bff417 	ldw	r2,-48(fp)
   8c750:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8c754:	e0bffd17 	ldw	r2,-12(fp)
   8c758:	10800050 	cmplti	r2,r2,1
   8c75c:	1000111e 	bne	r2,zero,8c7a4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8c760:	e0bffe17 	ldw	r2,-8(fp)
   8c764:	1090000c 	andi	r2,r2,16384
   8c768:	1004c03a 	cmpne	r2,r2,zero
   8c76c:	1000101e 	bne	r2,zero,8c7b0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8c770:	e0bffb17 	ldw	r2,-20(fp)
   8c774:	10c00d17 	ldw	r3,52(r2)
   8c778:	e0bff917 	ldw	r2,-28(fp)
   8c77c:	1880051e 	bne	r3,r2,8c794 <altera_avalon_jtag_uart_write+0x1c8>
   8c780:	e0bffb17 	ldw	r2,-20(fp)
   8c784:	10c00917 	ldw	r3,36(r2)
   8c788:	e0bffb17 	ldw	r2,-20(fp)
   8c78c:	10800117 	ldw	r2,4(r2)
   8c790:	18bff736 	bltu	r3,r2,8c770 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8c794:	e0bffb17 	ldw	r2,-20(fp)
   8c798:	10c00d17 	ldw	r3,52(r2)
   8c79c:	e0bff917 	ldw	r2,-28(fp)
   8c7a0:	18800326 	beq	r3,r2,8c7b0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   8c7a4:	e0bffd17 	ldw	r2,-12(fp)
   8c7a8:	10800048 	cmpgei	r2,r2,1
   8c7ac:	103fcd1e 	bne	r2,zero,8c6e4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8c7b0:	e0fffc17 	ldw	r3,-16(fp)
   8c7b4:	e0bff617 	ldw	r2,-40(fp)
   8c7b8:	18800526 	beq	r3,r2,8c7d0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8c7bc:	e0fffc17 	ldw	r3,-16(fp)
   8c7c0:	e0bff617 	ldw	r2,-40(fp)
   8c7c4:	1887c83a 	sub	r3,r3,r2
   8c7c8:	e0ffff15 	stw	r3,-4(fp)
   8c7cc:	00000906 	br	8c7f4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8c7d0:	e0bffe17 	ldw	r2,-8(fp)
   8c7d4:	1090000c 	andi	r2,r2,16384
   8c7d8:	1005003a 	cmpeq	r2,r2,zero
   8c7dc:	1000031e 	bne	r2,zero,8c7ec <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8c7e0:	00bffd44 	movi	r2,-11
   8c7e4:	e0bfff15 	stw	r2,-4(fp)
   8c7e8:	00000206 	br	8c7f4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8c7ec:	00bffec4 	movi	r2,-5
   8c7f0:	e0bfff15 	stw	r2,-4(fp)
   8c7f4:	e0bfff17 	ldw	r2,-4(fp)
}
   8c7f8:	e037883a 	mov	sp,fp
   8c7fc:	dfc00117 	ldw	ra,4(sp)
   8c800:	df000017 	ldw	fp,0(sp)
   8c804:	dec00204 	addi	sp,sp,8
   8c808:	f800283a 	ret

0008c80c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8c80c:	defff404 	addi	sp,sp,-48
   8c810:	df000b15 	stw	fp,44(sp)
   8c814:	df000b04 	addi	fp,sp,44
   8c818:	e13ffb15 	stw	r4,-20(fp)
   8c81c:	e17ffc15 	stw	r5,-16(fp)
   8c820:	e1bffd15 	stw	r6,-12(fp)
   8c824:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8c828:	e03ff915 	stw	zero,-28(fp)
   8c82c:	00800274 	movhi	r2,9
   8c830:	10853204 	addi	r2,r2,5320
   8c834:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8c838:	1005003a 	cmpeq	r2,r2,zero
   8c83c:	1000411e 	bne	r2,zero,8c944 <alt_alarm_start+0x138>
  {
    if (alarm)
   8c840:	e0bffb17 	ldw	r2,-20(fp)
   8c844:	1005003a 	cmpeq	r2,r2,zero
   8c848:	10003b1e 	bne	r2,zero,8c938 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8c84c:	e0fffb17 	ldw	r3,-20(fp)
   8c850:	e0bffd17 	ldw	r2,-12(fp)
   8c854:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8c858:	e0fffb17 	ldw	r3,-20(fp)
   8c85c:	e0bffe17 	ldw	r2,-8(fp)
   8c860:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c864:	0005303a 	rdctl	r2,status
   8c868:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c86c:	e0fff817 	ldw	r3,-32(fp)
   8c870:	00bfff84 	movi	r2,-2
   8c874:	1884703a 	and	r2,r3,r2
   8c878:	1001703a 	wrctl	status,r2
  
  return context;
   8c87c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8c880:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8c884:	00800274 	movhi	r2,9
   8c888:	10853304 	addi	r2,r2,5324
   8c88c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8c890:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8c894:	e0fffc17 	ldw	r3,-16(fp)
   8c898:	e0bff917 	ldw	r2,-28(fp)
   8c89c:	1885883a 	add	r2,r3,r2
   8c8a0:	10c00044 	addi	r3,r2,1
   8c8a4:	e0bffb17 	ldw	r2,-20(fp)
   8c8a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8c8ac:	e0bffb17 	ldw	r2,-20(fp)
   8c8b0:	10c00217 	ldw	r3,8(r2)
   8c8b4:	e0bff917 	ldw	r2,-28(fp)
   8c8b8:	1880042e 	bgeu	r3,r2,8c8cc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8c8bc:	e0fffb17 	ldw	r3,-20(fp)
   8c8c0:	00800044 	movi	r2,1
   8c8c4:	18800405 	stb	r2,16(r3)
   8c8c8:	00000206 	br	8c8d4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8c8cc:	e0bffb17 	ldw	r2,-20(fp)
   8c8d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8c8d4:	e0fffb17 	ldw	r3,-20(fp)
   8c8d8:	00800274 	movhi	r2,9
   8c8dc:	10be8d04 	addi	r2,r2,-1484
   8c8e0:	e0bff615 	stw	r2,-40(fp)
   8c8e4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8c8e8:	e0fff717 	ldw	r3,-36(fp)
   8c8ec:	e0bff617 	ldw	r2,-40(fp)
   8c8f0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8c8f4:	e0bff617 	ldw	r2,-40(fp)
   8c8f8:	10c00017 	ldw	r3,0(r2)
   8c8fc:	e0bff717 	ldw	r2,-36(fp)
   8c900:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8c904:	e0bff617 	ldw	r2,-40(fp)
   8c908:	10c00017 	ldw	r3,0(r2)
   8c90c:	e0bff717 	ldw	r2,-36(fp)
   8c910:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8c914:	e0fff617 	ldw	r3,-40(fp)
   8c918:	e0bff717 	ldw	r2,-36(fp)
   8c91c:	18800015 	stw	r2,0(r3)
   8c920:	e0bffa17 	ldw	r2,-24(fp)
   8c924:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c928:	e0bff517 	ldw	r2,-44(fp)
   8c92c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8c930:	e03fff15 	stw	zero,-4(fp)
   8c934:	00000506 	br	8c94c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8c938:	00bffa84 	movi	r2,-22
   8c93c:	e0bfff15 	stw	r2,-4(fp)
   8c940:	00000206 	br	8c94c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8c944:	00bfde84 	movi	r2,-134
   8c948:	e0bfff15 	stw	r2,-4(fp)
   8c94c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8c950:	e037883a 	mov	sp,fp
   8c954:	df000017 	ldw	fp,0(sp)
   8c958:	dec00104 	addi	sp,sp,4
   8c95c:	f800283a 	ret

0008c960 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8c960:	deffff04 	addi	sp,sp,-4
   8c964:	df000015 	stw	fp,0(sp)
   8c968:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8c96c:	e037883a 	mov	sp,fp
   8c970:	df000017 	ldw	fp,0(sp)
   8c974:	dec00104 	addi	sp,sp,4
   8c978:	f800283a 	ret

0008c97c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8c97c:	defff904 	addi	sp,sp,-28
   8c980:	dfc00615 	stw	ra,24(sp)
   8c984:	df000515 	stw	fp,20(sp)
   8c988:	df000504 	addi	fp,sp,20
   8c98c:	e13ffd15 	stw	r4,-12(fp)
   8c990:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8c994:	e0bffd17 	ldw	r2,-12(fp)
   8c998:	1005003a 	cmpeq	r2,r2,zero
   8c99c:	1000041e 	bne	r2,zero,8c9b0 <alt_dev_llist_insert+0x34>
   8c9a0:	e0bffd17 	ldw	r2,-12(fp)
   8c9a4:	10800217 	ldw	r2,8(r2)
   8c9a8:	1004c03a 	cmpne	r2,r2,zero
   8c9ac:	1000071e 	bne	r2,zero,8c9cc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8c9b0:	008ca300 	call	8ca30 <alt_get_errno>
   8c9b4:	1007883a 	mov	r3,r2
   8c9b8:	00800584 	movi	r2,22
   8c9bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8c9c0:	00bffa84 	movi	r2,-22
   8c9c4:	e0bfff15 	stw	r2,-4(fp)
   8c9c8:	00001306 	br	8ca18 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8c9cc:	e0fffd17 	ldw	r3,-12(fp)
   8c9d0:	e0bffe17 	ldw	r2,-8(fp)
   8c9d4:	e0bffb15 	stw	r2,-20(fp)
   8c9d8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8c9dc:	e0fffc17 	ldw	r3,-16(fp)
   8c9e0:	e0bffb17 	ldw	r2,-20(fp)
   8c9e4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8c9e8:	e0bffb17 	ldw	r2,-20(fp)
   8c9ec:	10c00017 	ldw	r3,0(r2)
   8c9f0:	e0bffc17 	ldw	r2,-16(fp)
   8c9f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8c9f8:	e0bffb17 	ldw	r2,-20(fp)
   8c9fc:	10c00017 	ldw	r3,0(r2)
   8ca00:	e0bffc17 	ldw	r2,-16(fp)
   8ca04:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8ca08:	e0fffb17 	ldw	r3,-20(fp)
   8ca0c:	e0bffc17 	ldw	r2,-16(fp)
   8ca10:	18800015 	stw	r2,0(r3)

  return 0;  
   8ca14:	e03fff15 	stw	zero,-4(fp)
   8ca18:	e0bfff17 	ldw	r2,-4(fp)
}
   8ca1c:	e037883a 	mov	sp,fp
   8ca20:	dfc00117 	ldw	ra,4(sp)
   8ca24:	df000017 	ldw	fp,0(sp)
   8ca28:	dec00204 	addi	sp,sp,8
   8ca2c:	f800283a 	ret

0008ca30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ca30:	defffd04 	addi	sp,sp,-12
   8ca34:	dfc00215 	stw	ra,8(sp)
   8ca38:	df000115 	stw	fp,4(sp)
   8ca3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ca40:	00800274 	movhi	r2,9
   8ca44:	10be8a04 	addi	r2,r2,-1496
   8ca48:	10800017 	ldw	r2,0(r2)
   8ca4c:	1005003a 	cmpeq	r2,r2,zero
   8ca50:	1000061e 	bne	r2,zero,8ca6c <alt_get_errno+0x3c>
   8ca54:	00800274 	movhi	r2,9
   8ca58:	10be8a04 	addi	r2,r2,-1496
   8ca5c:	10800017 	ldw	r2,0(r2)
   8ca60:	103ee83a 	callr	r2
   8ca64:	e0bfff15 	stw	r2,-4(fp)
   8ca68:	00000306 	br	8ca78 <alt_get_errno+0x48>
   8ca6c:	00800274 	movhi	r2,9
   8ca70:	10852d04 	addi	r2,r2,5300
   8ca74:	e0bfff15 	stw	r2,-4(fp)
   8ca78:	e0bfff17 	ldw	r2,-4(fp)
}
   8ca7c:	e037883a 	mov	sp,fp
   8ca80:	dfc00117 	ldw	ra,4(sp)
   8ca84:	df000017 	ldw	fp,0(sp)
   8ca88:	dec00204 	addi	sp,sp,8
   8ca8c:	f800283a 	ret

0008ca90 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8ca90:	defffd04 	addi	sp,sp,-12
   8ca94:	dfc00215 	stw	ra,8(sp)
   8ca98:	df000115 	stw	fp,4(sp)
   8ca9c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8caa0:	00bfff04 	movi	r2,-4
   8caa4:	00c00274 	movhi	r3,9
   8caa8:	18f6cd04 	addi	r3,r3,-9420
   8caac:	1885883a 	add	r2,r3,r2
   8cab0:	e0bfff15 	stw	r2,-4(fp)
   8cab4:	00000606 	br	8cad0 <_do_ctors+0x40>
        (*ctor) (); 
   8cab8:	e0bfff17 	ldw	r2,-4(fp)
   8cabc:	10800017 	ldw	r2,0(r2)
   8cac0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8cac4:	e0bfff17 	ldw	r2,-4(fp)
   8cac8:	10bfff04 	addi	r2,r2,-4
   8cacc:	e0bfff15 	stw	r2,-4(fp)
   8cad0:	e0ffff17 	ldw	r3,-4(fp)
   8cad4:	00800274 	movhi	r2,9
   8cad8:	10b6cc04 	addi	r2,r2,-9424
   8cadc:	18bff62e 	bgeu	r3,r2,8cab8 <_do_ctors+0x28>
        (*ctor) (); 
}
   8cae0:	e037883a 	mov	sp,fp
   8cae4:	dfc00117 	ldw	ra,4(sp)
   8cae8:	df000017 	ldw	fp,0(sp)
   8caec:	dec00204 	addi	sp,sp,8
   8caf0:	f800283a 	ret

0008caf4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8caf4:	defffd04 	addi	sp,sp,-12
   8caf8:	dfc00215 	stw	ra,8(sp)
   8cafc:	df000115 	stw	fp,4(sp)
   8cb00:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8cb04:	00bfff04 	movi	r2,-4
   8cb08:	00c00274 	movhi	r3,9
   8cb0c:	18f6cd04 	addi	r3,r3,-9420
   8cb10:	1885883a 	add	r2,r3,r2
   8cb14:	e0bfff15 	stw	r2,-4(fp)
   8cb18:	00000606 	br	8cb34 <_do_dtors+0x40>
        (*dtor) (); 
   8cb1c:	e0bfff17 	ldw	r2,-4(fp)
   8cb20:	10800017 	ldw	r2,0(r2)
   8cb24:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8cb28:	e0bfff17 	ldw	r2,-4(fp)
   8cb2c:	10bfff04 	addi	r2,r2,-4
   8cb30:	e0bfff15 	stw	r2,-4(fp)
   8cb34:	e0ffff17 	ldw	r3,-4(fp)
   8cb38:	00800274 	movhi	r2,9
   8cb3c:	10b6cd04 	addi	r2,r2,-9420
   8cb40:	18bff62e 	bgeu	r3,r2,8cb1c <_do_dtors+0x28>
        (*dtor) (); 
}
   8cb44:	e037883a 	mov	sp,fp
   8cb48:	dfc00117 	ldw	ra,4(sp)
   8cb4c:	df000017 	ldw	fp,0(sp)
   8cb50:	dec00204 	addi	sp,sp,8
   8cb54:	f800283a 	ret

0008cb58 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8cb58:	deffff04 	addi	sp,sp,-4
   8cb5c:	df000015 	stw	fp,0(sp)
   8cb60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8cb64:	e037883a 	mov	sp,fp
   8cb68:	df000017 	ldw	fp,0(sp)
   8cb6c:	dec00104 	addi	sp,sp,4
   8cb70:	f800283a 	ret

0008cb74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8cb74:	defff904 	addi	sp,sp,-28
   8cb78:	dfc00615 	stw	ra,24(sp)
   8cb7c:	df000515 	stw	fp,20(sp)
   8cb80:	df000504 	addi	fp,sp,20
   8cb84:	e13ffc15 	stw	r4,-16(fp)
   8cb88:	e17ffd15 	stw	r5,-12(fp)
   8cb8c:	e1bffe15 	stw	r6,-8(fp)
   8cb90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8cb94:	e0800217 	ldw	r2,8(fp)
   8cb98:	d8800015 	stw	r2,0(sp)
   8cb9c:	e13ffc17 	ldw	r4,-16(fp)
   8cba0:	e17ffd17 	ldw	r5,-12(fp)
   8cba4:	e1bffe17 	ldw	r6,-8(fp)
   8cba8:	e1ffff17 	ldw	r7,-4(fp)
   8cbac:	008cd480 	call	8cd48 <alt_iic_isr_register>
}  
   8cbb0:	e037883a 	mov	sp,fp
   8cbb4:	dfc00117 	ldw	ra,4(sp)
   8cbb8:	df000017 	ldw	fp,0(sp)
   8cbbc:	dec00204 	addi	sp,sp,8
   8cbc0:	f800283a 	ret

0008cbc4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8cbc4:	defff904 	addi	sp,sp,-28
   8cbc8:	df000615 	stw	fp,24(sp)
   8cbcc:	df000604 	addi	fp,sp,24
   8cbd0:	e13ffe15 	stw	r4,-8(fp)
   8cbd4:	e17fff15 	stw	r5,-4(fp)
   8cbd8:	e0bfff17 	ldw	r2,-4(fp)
   8cbdc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cbe0:	0005303a 	rdctl	r2,status
   8cbe4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cbe8:	e0fffb17 	ldw	r3,-20(fp)
   8cbec:	00bfff84 	movi	r2,-2
   8cbf0:	1884703a 	and	r2,r3,r2
   8cbf4:	1001703a 	wrctl	status,r2
  
  return context;
   8cbf8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8cbfc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8cc00:	e0fffc17 	ldw	r3,-16(fp)
   8cc04:	00800044 	movi	r2,1
   8cc08:	10c4983a 	sll	r2,r2,r3
   8cc0c:	1007883a 	mov	r3,r2
   8cc10:	00800274 	movhi	r2,9
   8cc14:	10852e04 	addi	r2,r2,5304
   8cc18:	10800017 	ldw	r2,0(r2)
   8cc1c:	1886b03a 	or	r3,r3,r2
   8cc20:	00800274 	movhi	r2,9
   8cc24:	10852e04 	addi	r2,r2,5304
   8cc28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8cc2c:	00800274 	movhi	r2,9
   8cc30:	10852e04 	addi	r2,r2,5304
   8cc34:	10800017 	ldw	r2,0(r2)
   8cc38:	100170fa 	wrctl	ienable,r2
   8cc3c:	e0bffd17 	ldw	r2,-12(fp)
   8cc40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cc44:	e0bffa17 	ldw	r2,-24(fp)
   8cc48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8cc4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8cc50:	e037883a 	mov	sp,fp
   8cc54:	df000017 	ldw	fp,0(sp)
   8cc58:	dec00104 	addi	sp,sp,4
   8cc5c:	f800283a 	ret

0008cc60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8cc60:	defff904 	addi	sp,sp,-28
   8cc64:	df000615 	stw	fp,24(sp)
   8cc68:	df000604 	addi	fp,sp,24
   8cc6c:	e13ffe15 	stw	r4,-8(fp)
   8cc70:	e17fff15 	stw	r5,-4(fp)
   8cc74:	e0bfff17 	ldw	r2,-4(fp)
   8cc78:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cc7c:	0005303a 	rdctl	r2,status
   8cc80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cc84:	e0fffb17 	ldw	r3,-20(fp)
   8cc88:	00bfff84 	movi	r2,-2
   8cc8c:	1884703a 	and	r2,r3,r2
   8cc90:	1001703a 	wrctl	status,r2
  
  return context;
   8cc94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8cc98:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8cc9c:	e0fffc17 	ldw	r3,-16(fp)
   8cca0:	00800044 	movi	r2,1
   8cca4:	10c4983a 	sll	r2,r2,r3
   8cca8:	0084303a 	nor	r2,zero,r2
   8ccac:	1007883a 	mov	r3,r2
   8ccb0:	00800274 	movhi	r2,9
   8ccb4:	10852e04 	addi	r2,r2,5304
   8ccb8:	10800017 	ldw	r2,0(r2)
   8ccbc:	1886703a 	and	r3,r3,r2
   8ccc0:	00800274 	movhi	r2,9
   8ccc4:	10852e04 	addi	r2,r2,5304
   8ccc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8cccc:	00800274 	movhi	r2,9
   8ccd0:	10852e04 	addi	r2,r2,5304
   8ccd4:	10800017 	ldw	r2,0(r2)
   8ccd8:	100170fa 	wrctl	ienable,r2
   8ccdc:	e0bffd17 	ldw	r2,-12(fp)
   8cce0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cce4:	e0bffa17 	ldw	r2,-24(fp)
   8cce8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ccec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8ccf0:	e037883a 	mov	sp,fp
   8ccf4:	df000017 	ldw	fp,0(sp)
   8ccf8:	dec00104 	addi	sp,sp,4
   8ccfc:	f800283a 	ret

0008cd00 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8cd00:	defffc04 	addi	sp,sp,-16
   8cd04:	df000315 	stw	fp,12(sp)
   8cd08:	df000304 	addi	fp,sp,12
   8cd0c:	e13ffe15 	stw	r4,-8(fp)
   8cd10:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8cd14:	000530fa 	rdctl	r2,ienable
   8cd18:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8cd1c:	e0ffff17 	ldw	r3,-4(fp)
   8cd20:	00800044 	movi	r2,1
   8cd24:	10c4983a 	sll	r2,r2,r3
   8cd28:	1007883a 	mov	r3,r2
   8cd2c:	e0bffd17 	ldw	r2,-12(fp)
   8cd30:	1884703a 	and	r2,r3,r2
   8cd34:	1004c03a 	cmpne	r2,r2,zero
}
   8cd38:	e037883a 	mov	sp,fp
   8cd3c:	df000017 	ldw	fp,0(sp)
   8cd40:	dec00104 	addi	sp,sp,4
   8cd44:	f800283a 	ret

0008cd48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8cd48:	defff404 	addi	sp,sp,-48
   8cd4c:	dfc00b15 	stw	ra,44(sp)
   8cd50:	df000a15 	stw	fp,40(sp)
   8cd54:	df000a04 	addi	fp,sp,40
   8cd58:	e13ffb15 	stw	r4,-20(fp)
   8cd5c:	e17ffc15 	stw	r5,-16(fp)
   8cd60:	e1bffd15 	stw	r6,-12(fp)
   8cd64:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8cd68:	00bffa84 	movi	r2,-22
   8cd6c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8cd70:	e0bffc17 	ldw	r2,-16(fp)
   8cd74:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8cd78:	e0bff917 	ldw	r2,-28(fp)
   8cd7c:	10800808 	cmpgei	r2,r2,32
   8cd80:	1000291e 	bne	r2,zero,8ce28 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cd84:	0005303a 	rdctl	r2,status
   8cd88:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cd8c:	e0fff717 	ldw	r3,-36(fp)
   8cd90:	00bfff84 	movi	r2,-2
   8cd94:	1884703a 	and	r2,r3,r2
   8cd98:	1001703a 	wrctl	status,r2
  
  return context;
   8cd9c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8cda0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8cda4:	e0bff917 	ldw	r2,-28(fp)
   8cda8:	00c00274 	movhi	r3,9
   8cdac:	18c53e04 	addi	r3,r3,5368
   8cdb0:	100490fa 	slli	r2,r2,3
   8cdb4:	10c7883a 	add	r3,r2,r3
   8cdb8:	e0bffd17 	ldw	r2,-12(fp)
   8cdbc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8cdc0:	e0bff917 	ldw	r2,-28(fp)
   8cdc4:	00c00274 	movhi	r3,9
   8cdc8:	18c53e04 	addi	r3,r3,5368
   8cdcc:	100490fa 	slli	r2,r2,3
   8cdd0:	10c5883a 	add	r2,r2,r3
   8cdd4:	10c00104 	addi	r3,r2,4
   8cdd8:	e0bffe17 	ldw	r2,-8(fp)
   8cddc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8cde0:	e0bffd17 	ldw	r2,-12(fp)
   8cde4:	1005003a 	cmpeq	r2,r2,zero
   8cde8:	1000051e 	bne	r2,zero,8ce00 <alt_iic_isr_register+0xb8>
   8cdec:	e17ff917 	ldw	r5,-28(fp)
   8cdf0:	e13ffb17 	ldw	r4,-20(fp)
   8cdf4:	008cbc40 	call	8cbc4 <alt_ic_irq_enable>
   8cdf8:	e0bfff15 	stw	r2,-4(fp)
   8cdfc:	00000406 	br	8ce10 <alt_iic_isr_register+0xc8>
   8ce00:	e17ff917 	ldw	r5,-28(fp)
   8ce04:	e13ffb17 	ldw	r4,-20(fp)
   8ce08:	008cc600 	call	8cc60 <alt_ic_irq_disable>
   8ce0c:	e0bfff15 	stw	r2,-4(fp)
   8ce10:	e0bfff17 	ldw	r2,-4(fp)
   8ce14:	e0bffa15 	stw	r2,-24(fp)
   8ce18:	e0bff817 	ldw	r2,-32(fp)
   8ce1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ce20:	e0bff617 	ldw	r2,-40(fp)
   8ce24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8ce28:	e0bffa17 	ldw	r2,-24(fp)
}
   8ce2c:	e037883a 	mov	sp,fp
   8ce30:	dfc00117 	ldw	ra,4(sp)
   8ce34:	df000017 	ldw	fp,0(sp)
   8ce38:	dec00204 	addi	sp,sp,8
   8ce3c:	f800283a 	ret

0008ce40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8ce40:	defff804 	addi	sp,sp,-32
   8ce44:	dfc00715 	stw	ra,28(sp)
   8ce48:	df000615 	stw	fp,24(sp)
   8ce4c:	dc000515 	stw	r16,20(sp)
   8ce50:	df000504 	addi	fp,sp,20
   8ce54:	e13ffc15 	stw	r4,-16(fp)
   8ce58:	e17ffd15 	stw	r5,-12(fp)
   8ce5c:	e1bffe15 	stw	r6,-8(fp)
   8ce60:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8ce64:	e13ffd17 	ldw	r4,-12(fp)
   8ce68:	e17ffe17 	ldw	r5,-8(fp)
   8ce6c:	e1bfff17 	ldw	r6,-4(fp)
   8ce70:	008d0880 	call	8d088 <open>
   8ce74:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8ce78:	e0bffb17 	ldw	r2,-20(fp)
   8ce7c:	1004803a 	cmplt	r2,r2,zero
   8ce80:	10001f1e 	bne	r2,zero,8cf00 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8ce84:	e13ffb17 	ldw	r4,-20(fp)
   8ce88:	04000274 	movhi	r16,9
   8ce8c:	843a0704 	addi	r16,r16,-6116
   8ce90:	01400304 	movi	r5,12
   8ce94:	00812180 	call	81218 <__mulsi3>
   8ce98:	1405883a 	add	r2,r2,r16
   8ce9c:	10c00017 	ldw	r3,0(r2)
   8cea0:	e0bffc17 	ldw	r2,-16(fp)
   8cea4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8cea8:	e13ffb17 	ldw	r4,-20(fp)
   8ceac:	04000274 	movhi	r16,9
   8ceb0:	843a0704 	addi	r16,r16,-6116
   8ceb4:	01400304 	movi	r5,12
   8ceb8:	00812180 	call	81218 <__mulsi3>
   8cebc:	1405883a 	add	r2,r2,r16
   8cec0:	10800104 	addi	r2,r2,4
   8cec4:	10c00017 	ldw	r3,0(r2)
   8cec8:	e0bffc17 	ldw	r2,-16(fp)
   8cecc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8ced0:	e13ffb17 	ldw	r4,-20(fp)
   8ced4:	04000274 	movhi	r16,9
   8ced8:	843a0704 	addi	r16,r16,-6116
   8cedc:	01400304 	movi	r5,12
   8cee0:	00812180 	call	81218 <__mulsi3>
   8cee4:	1405883a 	add	r2,r2,r16
   8cee8:	10800204 	addi	r2,r2,8
   8ceec:	10c00017 	ldw	r3,0(r2)
   8cef0:	e0bffc17 	ldw	r2,-16(fp)
   8cef4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8cef8:	e13ffb17 	ldw	r4,-20(fp)
   8cefc:	008b9f80 	call	8b9f8 <alt_release_fd>
  }
} 
   8cf00:	e037883a 	mov	sp,fp
   8cf04:	dfc00217 	ldw	ra,8(sp)
   8cf08:	df000117 	ldw	fp,4(sp)
   8cf0c:	dc000017 	ldw	r16,0(sp)
   8cf10:	dec00304 	addi	sp,sp,12
   8cf14:	f800283a 	ret

0008cf18 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8cf18:	defffb04 	addi	sp,sp,-20
   8cf1c:	dfc00415 	stw	ra,16(sp)
   8cf20:	df000315 	stw	fp,12(sp)
   8cf24:	df000304 	addi	fp,sp,12
   8cf28:	e13ffd15 	stw	r4,-12(fp)
   8cf2c:	e17ffe15 	stw	r5,-8(fp)
   8cf30:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8cf34:	01000274 	movhi	r4,9
   8cf38:	213a0a04 	addi	r4,r4,-6104
   8cf3c:	e17ffd17 	ldw	r5,-12(fp)
   8cf40:	01800044 	movi	r6,1
   8cf44:	01c07fc4 	movi	r7,511
   8cf48:	008ce400 	call	8ce40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8cf4c:	01000274 	movhi	r4,9
   8cf50:	213a0704 	addi	r4,r4,-6116
   8cf54:	e17ffe17 	ldw	r5,-8(fp)
   8cf58:	000d883a 	mov	r6,zero
   8cf5c:	01c07fc4 	movi	r7,511
   8cf60:	008ce400 	call	8ce40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8cf64:	01000274 	movhi	r4,9
   8cf68:	213a0d04 	addi	r4,r4,-6092
   8cf6c:	e17fff17 	ldw	r5,-4(fp)
   8cf70:	01800044 	movi	r6,1
   8cf74:	01c07fc4 	movi	r7,511
   8cf78:	008ce400 	call	8ce40 <alt_open_fd>
}  
   8cf7c:	e037883a 	mov	sp,fp
   8cf80:	dfc00117 	ldw	ra,4(sp)
   8cf84:	df000017 	ldw	fp,0(sp)
   8cf88:	dec00204 	addi	sp,sp,8
   8cf8c:	f800283a 	ret

0008cf90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8cf90:	defffa04 	addi	sp,sp,-24
   8cf94:	dfc00515 	stw	ra,20(sp)
   8cf98:	df000415 	stw	fp,16(sp)
   8cf9c:	dc000315 	stw	r16,12(sp)
   8cfa0:	df000304 	addi	fp,sp,12
   8cfa4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8cfa8:	e0bffe17 	ldw	r2,-8(fp)
   8cfac:	10800217 	ldw	r2,8(r2)
   8cfb0:	10d00034 	orhi	r3,r2,16384
   8cfb4:	e0bffe17 	ldw	r2,-8(fp)
   8cfb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8cfbc:	e03ffd15 	stw	zero,-12(fp)
   8cfc0:	00002306 	br	8d050 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8cfc4:	e13ffd17 	ldw	r4,-12(fp)
   8cfc8:	04000274 	movhi	r16,9
   8cfcc:	843a0704 	addi	r16,r16,-6116
   8cfd0:	01400304 	movi	r5,12
   8cfd4:	00812180 	call	81218 <__mulsi3>
   8cfd8:	1405883a 	add	r2,r2,r16
   8cfdc:	10c00017 	ldw	r3,0(r2)
   8cfe0:	e0bffe17 	ldw	r2,-8(fp)
   8cfe4:	10800017 	ldw	r2,0(r2)
   8cfe8:	1880161e 	bne	r3,r2,8d044 <alt_file_locked+0xb4>
   8cfec:	e13ffd17 	ldw	r4,-12(fp)
   8cff0:	04000274 	movhi	r16,9
   8cff4:	843a0704 	addi	r16,r16,-6116
   8cff8:	01400304 	movi	r5,12
   8cffc:	00812180 	call	81218 <__mulsi3>
   8d000:	1405883a 	add	r2,r2,r16
   8d004:	10800204 	addi	r2,r2,8
   8d008:	10800017 	ldw	r2,0(r2)
   8d00c:	1004403a 	cmpge	r2,r2,zero
   8d010:	10000c1e 	bne	r2,zero,8d044 <alt_file_locked+0xb4>
   8d014:	e13ffd17 	ldw	r4,-12(fp)
   8d018:	01400304 	movi	r5,12
   8d01c:	00812180 	call	81218 <__mulsi3>
   8d020:	1007883a 	mov	r3,r2
   8d024:	00800274 	movhi	r2,9
   8d028:	10ba0704 	addi	r2,r2,-6116
   8d02c:	1887883a 	add	r3,r3,r2
   8d030:	e0bffe17 	ldw	r2,-8(fp)
   8d034:	18800326 	beq	r3,r2,8d044 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8d038:	00bffcc4 	movi	r2,-13
   8d03c:	e0bfff15 	stw	r2,-4(fp)
   8d040:	00000a06 	br	8d06c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d044:	e0bffd17 	ldw	r2,-12(fp)
   8d048:	10800044 	addi	r2,r2,1
   8d04c:	e0bffd15 	stw	r2,-12(fp)
   8d050:	00800274 	movhi	r2,9
   8d054:	10be8904 	addi	r2,r2,-1500
   8d058:	10800017 	ldw	r2,0(r2)
   8d05c:	1007883a 	mov	r3,r2
   8d060:	e0bffd17 	ldw	r2,-12(fp)
   8d064:	18bfd72e 	bgeu	r3,r2,8cfc4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8d068:	e03fff15 	stw	zero,-4(fp)
   8d06c:	e0bfff17 	ldw	r2,-4(fp)
}
   8d070:	e037883a 	mov	sp,fp
   8d074:	dfc00217 	ldw	ra,8(sp)
   8d078:	df000117 	ldw	fp,4(sp)
   8d07c:	dc000017 	ldw	r16,0(sp)
   8d080:	dec00304 	addi	sp,sp,12
   8d084:	f800283a 	ret

0008d088 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8d088:	defff404 	addi	sp,sp,-48
   8d08c:	dfc00b15 	stw	ra,44(sp)
   8d090:	df000a15 	stw	fp,40(sp)
   8d094:	df000a04 	addi	fp,sp,40
   8d098:	e13ffb15 	stw	r4,-20(fp)
   8d09c:	e17ffc15 	stw	r5,-16(fp)
   8d0a0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8d0a4:	00bfffc4 	movi	r2,-1
   8d0a8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8d0ac:	00bffb44 	movi	r2,-19
   8d0b0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8d0b4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8d0b8:	e13ffb17 	ldw	r4,-20(fp)
   8d0bc:	01400274 	movhi	r5,9
   8d0c0:	297e8704 	addi	r5,r5,-1508
   8d0c4:	008d4380 	call	8d438 <alt_find_dev>
   8d0c8:	e0bffa15 	stw	r2,-24(fp)
   8d0cc:	e0bffa17 	ldw	r2,-24(fp)
   8d0d0:	1004c03a 	cmpne	r2,r2,zero
   8d0d4:	1000051e 	bne	r2,zero,8d0ec <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8d0d8:	e13ffb17 	ldw	r4,-20(fp)
   8d0dc:	008d4cc0 	call	8d4cc <alt_find_file>
   8d0e0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8d0e4:	00800044 	movi	r2,1
   8d0e8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8d0ec:	e0bffa17 	ldw	r2,-24(fp)
   8d0f0:	1005003a 	cmpeq	r2,r2,zero
   8d0f4:	1000311e 	bne	r2,zero,8d1bc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8d0f8:	e13ffa17 	ldw	r4,-24(fp)
   8d0fc:	008d5ec0 	call	8d5ec <alt_get_fd>
   8d100:	e0bff815 	stw	r2,-32(fp)
   8d104:	e0bff817 	ldw	r2,-32(fp)
   8d108:	1004403a 	cmpge	r2,r2,zero
   8d10c:	1000031e 	bne	r2,zero,8d11c <open+0x94>
    {
      status = index;
   8d110:	e0bff817 	ldw	r2,-32(fp)
   8d114:	e0bff715 	stw	r2,-36(fp)
   8d118:	00002a06 	br	8d1c4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8d11c:	e13ff817 	ldw	r4,-32(fp)
   8d120:	01400304 	movi	r5,12
   8d124:	00812180 	call	81218 <__mulsi3>
   8d128:	1007883a 	mov	r3,r2
   8d12c:	00800274 	movhi	r2,9
   8d130:	10ba0704 	addi	r2,r2,-6116
   8d134:	1885883a 	add	r2,r3,r2
   8d138:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8d13c:	e0fffc17 	ldw	r3,-16(fp)
   8d140:	00900034 	movhi	r2,16384
   8d144:	10bfffc4 	addi	r2,r2,-1
   8d148:	1886703a 	and	r3,r3,r2
   8d14c:	e0bff917 	ldw	r2,-28(fp)
   8d150:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8d154:	e0bff617 	ldw	r2,-40(fp)
   8d158:	1004c03a 	cmpne	r2,r2,zero
   8d15c:	1000061e 	bne	r2,zero,8d178 <open+0xf0>
   8d160:	e13ff917 	ldw	r4,-28(fp)
   8d164:	008cf900 	call	8cf90 <alt_file_locked>
   8d168:	e0bff715 	stw	r2,-36(fp)
   8d16c:	e0bff717 	ldw	r2,-36(fp)
   8d170:	1004803a 	cmplt	r2,r2,zero
   8d174:	1000131e 	bne	r2,zero,8d1c4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8d178:	e0bffa17 	ldw	r2,-24(fp)
   8d17c:	10800317 	ldw	r2,12(r2)
   8d180:	1005003a 	cmpeq	r2,r2,zero
   8d184:	1000091e 	bne	r2,zero,8d1ac <open+0x124>
   8d188:	e0bffa17 	ldw	r2,-24(fp)
   8d18c:	10800317 	ldw	r2,12(r2)
   8d190:	e13ff917 	ldw	r4,-28(fp)
   8d194:	e17ffb17 	ldw	r5,-20(fp)
   8d198:	e1bffc17 	ldw	r6,-16(fp)
   8d19c:	e1fffd17 	ldw	r7,-12(fp)
   8d1a0:	103ee83a 	callr	r2
   8d1a4:	e0bfff15 	stw	r2,-4(fp)
   8d1a8:	00000106 	br	8d1b0 <open+0x128>
   8d1ac:	e03fff15 	stw	zero,-4(fp)
   8d1b0:	e0bfff17 	ldw	r2,-4(fp)
   8d1b4:	e0bff715 	stw	r2,-36(fp)
   8d1b8:	00000206 	br	8d1c4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8d1bc:	00bffb44 	movi	r2,-19
   8d1c0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8d1c4:	e0bff717 	ldw	r2,-36(fp)
   8d1c8:	1004403a 	cmpge	r2,r2,zero
   8d1cc:	1000091e 	bne	r2,zero,8d1f4 <open+0x16c>
  {
    alt_release_fd (index);  
   8d1d0:	e13ff817 	ldw	r4,-32(fp)
   8d1d4:	008b9f80 	call	8b9f8 <alt_release_fd>
    ALT_ERRNO = -status;
   8d1d8:	008d2140 	call	8d214 <alt_get_errno>
   8d1dc:	e0fff717 	ldw	r3,-36(fp)
   8d1e0:	00c7c83a 	sub	r3,zero,r3
   8d1e4:	10c00015 	stw	r3,0(r2)
    return -1;
   8d1e8:	00bfffc4 	movi	r2,-1
   8d1ec:	e0bffe15 	stw	r2,-8(fp)
   8d1f0:	00000206 	br	8d1fc <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8d1f4:	e0bff817 	ldw	r2,-32(fp)
   8d1f8:	e0bffe15 	stw	r2,-8(fp)
   8d1fc:	e0bffe17 	ldw	r2,-8(fp)
}
   8d200:	e037883a 	mov	sp,fp
   8d204:	dfc00117 	ldw	ra,4(sp)
   8d208:	df000017 	ldw	fp,0(sp)
   8d20c:	dec00204 	addi	sp,sp,8
   8d210:	f800283a 	ret

0008d214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d214:	defffd04 	addi	sp,sp,-12
   8d218:	dfc00215 	stw	ra,8(sp)
   8d21c:	df000115 	stw	fp,4(sp)
   8d220:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d224:	00800274 	movhi	r2,9
   8d228:	10be8a04 	addi	r2,r2,-1496
   8d22c:	10800017 	ldw	r2,0(r2)
   8d230:	1005003a 	cmpeq	r2,r2,zero
   8d234:	1000061e 	bne	r2,zero,8d250 <alt_get_errno+0x3c>
   8d238:	00800274 	movhi	r2,9
   8d23c:	10be8a04 	addi	r2,r2,-1496
   8d240:	10800017 	ldw	r2,0(r2)
   8d244:	103ee83a 	callr	r2
   8d248:	e0bfff15 	stw	r2,-4(fp)
   8d24c:	00000306 	br	8d25c <alt_get_errno+0x48>
   8d250:	00800274 	movhi	r2,9
   8d254:	10852d04 	addi	r2,r2,5300
   8d258:	e0bfff15 	stw	r2,-4(fp)
   8d25c:	e0bfff17 	ldw	r2,-4(fp)
}
   8d260:	e037883a 	mov	sp,fp
   8d264:	dfc00117 	ldw	ra,4(sp)
   8d268:	df000017 	ldw	fp,0(sp)
   8d26c:	dec00204 	addi	sp,sp,8
   8d270:	f800283a 	ret

0008d274 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8d274:	defffa04 	addi	sp,sp,-24
   8d278:	df000515 	stw	fp,20(sp)
   8d27c:	df000504 	addi	fp,sp,20
   8d280:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d284:	0005303a 	rdctl	r2,status
   8d288:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d28c:	e0fffd17 	ldw	r3,-12(fp)
   8d290:	00bfff84 	movi	r2,-2
   8d294:	1884703a 	and	r2,r3,r2
   8d298:	1001703a 	wrctl	status,r2
  
  return context;
   8d29c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8d2a0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8d2a4:	e0bfff17 	ldw	r2,-4(fp)
   8d2a8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8d2ac:	e0bffc17 	ldw	r2,-16(fp)
   8d2b0:	10c00017 	ldw	r3,0(r2)
   8d2b4:	e0bffc17 	ldw	r2,-16(fp)
   8d2b8:	10800117 	ldw	r2,4(r2)
   8d2bc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8d2c0:	e0bffc17 	ldw	r2,-16(fp)
   8d2c4:	10c00117 	ldw	r3,4(r2)
   8d2c8:	e0bffc17 	ldw	r2,-16(fp)
   8d2cc:	10800017 	ldw	r2,0(r2)
   8d2d0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8d2d4:	e0fffc17 	ldw	r3,-16(fp)
   8d2d8:	e0bffc17 	ldw	r2,-16(fp)
   8d2dc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8d2e0:	e0fffc17 	ldw	r3,-16(fp)
   8d2e4:	e0bffc17 	ldw	r2,-16(fp)
   8d2e8:	18800015 	stw	r2,0(r3)
   8d2ec:	e0bffe17 	ldw	r2,-8(fp)
   8d2f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d2f4:	e0bffb17 	ldw	r2,-20(fp)
   8d2f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8d2fc:	e037883a 	mov	sp,fp
   8d300:	df000017 	ldw	fp,0(sp)
   8d304:	dec00104 	addi	sp,sp,4
   8d308:	f800283a 	ret

0008d30c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8d30c:	defffb04 	addi	sp,sp,-20
   8d310:	dfc00415 	stw	ra,16(sp)
   8d314:	df000315 	stw	fp,12(sp)
   8d318:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8d31c:	d0a00e17 	ldw	r2,-32712(gp)
   8d320:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8d324:	d0a6b417 	ldw	r2,-25904(gp)
   8d328:	10800044 	addi	r2,r2,1
   8d32c:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8d330:	00003106 	br	8d3f8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8d334:	e0bffe17 	ldw	r2,-8(fp)
   8d338:	10800017 	ldw	r2,0(r2)
   8d33c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8d340:	e0bffe17 	ldw	r2,-8(fp)
   8d344:	10800403 	ldbu	r2,16(r2)
   8d348:	10803fcc 	andi	r2,r2,255
   8d34c:	1005003a 	cmpeq	r2,r2,zero
   8d350:	1000051e 	bne	r2,zero,8d368 <alt_tick+0x5c>
   8d354:	d0a6b417 	ldw	r2,-25904(gp)
   8d358:	1004c03a 	cmpne	r2,r2,zero
   8d35c:	1000021e 	bne	r2,zero,8d368 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8d360:	e0bffe17 	ldw	r2,-8(fp)
   8d364:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8d368:	e0bffe17 	ldw	r2,-8(fp)
   8d36c:	10c00217 	ldw	r3,8(r2)
   8d370:	d0a6b417 	ldw	r2,-25904(gp)
   8d374:	10c01e36 	bltu	r2,r3,8d3f0 <alt_tick+0xe4>
   8d378:	e0bffe17 	ldw	r2,-8(fp)
   8d37c:	10800403 	ldbu	r2,16(r2)
   8d380:	10803fcc 	andi	r2,r2,255
   8d384:	1004c03a 	cmpne	r2,r2,zero
   8d388:	1000191e 	bne	r2,zero,8d3f0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8d38c:	e0bffe17 	ldw	r2,-8(fp)
   8d390:	10c00317 	ldw	r3,12(r2)
   8d394:	e0bffe17 	ldw	r2,-8(fp)
   8d398:	11000517 	ldw	r4,20(r2)
   8d39c:	183ee83a 	callr	r3
   8d3a0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8d3a4:	e0bffd17 	ldw	r2,-12(fp)
   8d3a8:	1004c03a 	cmpne	r2,r2,zero
   8d3ac:	1000031e 	bne	r2,zero,8d3bc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8d3b0:	e13ffe17 	ldw	r4,-8(fp)
   8d3b4:	008d2740 	call	8d274 <alt_alarm_stop>
   8d3b8:	00000d06 	br	8d3f0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8d3bc:	e0bffe17 	ldw	r2,-8(fp)
   8d3c0:	10c00217 	ldw	r3,8(r2)
   8d3c4:	e0bffd17 	ldw	r2,-12(fp)
   8d3c8:	1887883a 	add	r3,r3,r2
   8d3cc:	e0bffe17 	ldw	r2,-8(fp)
   8d3d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8d3d4:	e0bffe17 	ldw	r2,-8(fp)
   8d3d8:	10c00217 	ldw	r3,8(r2)
   8d3dc:	d0a6b417 	ldw	r2,-25904(gp)
   8d3e0:	1880032e 	bgeu	r3,r2,8d3f0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8d3e4:	e0fffe17 	ldw	r3,-8(fp)
   8d3e8:	00800044 	movi	r2,1
   8d3ec:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8d3f0:	e0bfff17 	ldw	r2,-4(fp)
   8d3f4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8d3f8:	d0e00e04 	addi	r3,gp,-32712
   8d3fc:	e0bffe17 	ldw	r2,-8(fp)
   8d400:	10ffcc1e 	bne	r2,r3,8d334 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8d404:	e037883a 	mov	sp,fp
   8d408:	dfc00117 	ldw	ra,4(sp)
   8d40c:	df000017 	ldw	fp,0(sp)
   8d410:	dec00204 	addi	sp,sp,8
   8d414:	f800283a 	ret

0008d418 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8d418:	deffff04 	addi	sp,sp,-4
   8d41c:	df000015 	stw	fp,0(sp)
   8d420:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8d424:	000170fa 	wrctl	ienable,zero
}
   8d428:	e037883a 	mov	sp,fp
   8d42c:	df000017 	ldw	fp,0(sp)
   8d430:	dec00104 	addi	sp,sp,4
   8d434:	f800283a 	ret

0008d438 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8d438:	defff904 	addi	sp,sp,-28
   8d43c:	dfc00615 	stw	ra,24(sp)
   8d440:	df000515 	stw	fp,20(sp)
   8d444:	df000504 	addi	fp,sp,20
   8d448:	e13ffd15 	stw	r4,-12(fp)
   8d44c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8d450:	e0bffe17 	ldw	r2,-8(fp)
   8d454:	10800017 	ldw	r2,0(r2)
   8d458:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8d45c:	e13ffd17 	ldw	r4,-12(fp)
   8d460:	00813a00 	call	813a0 <strlen>
   8d464:	10800044 	addi	r2,r2,1
   8d468:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d46c:	00000d06 	br	8d4a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8d470:	e0bffc17 	ldw	r2,-16(fp)
   8d474:	11000217 	ldw	r4,8(r2)
   8d478:	e1bffb17 	ldw	r6,-20(fp)
   8d47c:	e17ffd17 	ldw	r5,-12(fp)
   8d480:	008d7080 	call	8d708 <memcmp>
   8d484:	1004c03a 	cmpne	r2,r2,zero
   8d488:	1000031e 	bne	r2,zero,8d498 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8d48c:	e0bffc17 	ldw	r2,-16(fp)
   8d490:	e0bfff15 	stw	r2,-4(fp)
   8d494:	00000706 	br	8d4b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8d498:	e0bffc17 	ldw	r2,-16(fp)
   8d49c:	10800017 	ldw	r2,0(r2)
   8d4a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d4a4:	e0fffe17 	ldw	r3,-8(fp)
   8d4a8:	e0bffc17 	ldw	r2,-16(fp)
   8d4ac:	10fff01e 	bne	r2,r3,8d470 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8d4b0:	e03fff15 	stw	zero,-4(fp)
   8d4b4:	e0bfff17 	ldw	r2,-4(fp)
}
   8d4b8:	e037883a 	mov	sp,fp
   8d4bc:	dfc00117 	ldw	ra,4(sp)
   8d4c0:	df000017 	ldw	fp,0(sp)
   8d4c4:	dec00204 	addi	sp,sp,8
   8d4c8:	f800283a 	ret

0008d4cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8d4cc:	defffa04 	addi	sp,sp,-24
   8d4d0:	dfc00515 	stw	ra,20(sp)
   8d4d4:	df000415 	stw	fp,16(sp)
   8d4d8:	df000404 	addi	fp,sp,16
   8d4dc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8d4e0:	00800274 	movhi	r2,9
   8d4e4:	10be8504 	addi	r2,r2,-1516
   8d4e8:	10800017 	ldw	r2,0(r2)
   8d4ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8d4f0:	00003306 	br	8d5c0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8d4f4:	e0bffd17 	ldw	r2,-12(fp)
   8d4f8:	11000217 	ldw	r4,8(r2)
   8d4fc:	00813a00 	call	813a0 <strlen>
   8d500:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8d504:	e0bffd17 	ldw	r2,-12(fp)
   8d508:	10c00217 	ldw	r3,8(r2)
   8d50c:	e0bffc17 	ldw	r2,-16(fp)
   8d510:	1885883a 	add	r2,r3,r2
   8d514:	10bfffc4 	addi	r2,r2,-1
   8d518:	10800003 	ldbu	r2,0(r2)
   8d51c:	10803fcc 	andi	r2,r2,255
   8d520:	1080201c 	xori	r2,r2,128
   8d524:	10bfe004 	addi	r2,r2,-128
   8d528:	10800bd8 	cmpnei	r2,r2,47
   8d52c:	1000031e 	bne	r2,zero,8d53c <alt_find_file+0x70>
    {
      len -= 1;
   8d530:	e0bffc17 	ldw	r2,-16(fp)
   8d534:	10bfffc4 	addi	r2,r2,-1
   8d538:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8d53c:	e0bffc17 	ldw	r2,-16(fp)
   8d540:	1007883a 	mov	r3,r2
   8d544:	e0bffe17 	ldw	r2,-8(fp)
   8d548:	1885883a 	add	r2,r3,r2
   8d54c:	10800003 	ldbu	r2,0(r2)
   8d550:	10803fcc 	andi	r2,r2,255
   8d554:	1080201c 	xori	r2,r2,128
   8d558:	10bfe004 	addi	r2,r2,-128
   8d55c:	10800be0 	cmpeqi	r2,r2,47
   8d560:	10000a1e 	bne	r2,zero,8d58c <alt_find_file+0xc0>
   8d564:	e0bffc17 	ldw	r2,-16(fp)
   8d568:	1007883a 	mov	r3,r2
   8d56c:	e0bffe17 	ldw	r2,-8(fp)
   8d570:	1885883a 	add	r2,r3,r2
   8d574:	10800003 	ldbu	r2,0(r2)
   8d578:	10803fcc 	andi	r2,r2,255
   8d57c:	1080201c 	xori	r2,r2,128
   8d580:	10bfe004 	addi	r2,r2,-128
   8d584:	1004c03a 	cmpne	r2,r2,zero
   8d588:	10000a1e 	bne	r2,zero,8d5b4 <alt_find_file+0xe8>
   8d58c:	e0bffd17 	ldw	r2,-12(fp)
   8d590:	11000217 	ldw	r4,8(r2)
   8d594:	e1bffc17 	ldw	r6,-16(fp)
   8d598:	e17ffe17 	ldw	r5,-8(fp)
   8d59c:	008d7080 	call	8d708 <memcmp>
   8d5a0:	1004c03a 	cmpne	r2,r2,zero
   8d5a4:	1000031e 	bne	r2,zero,8d5b4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8d5a8:	e0bffd17 	ldw	r2,-12(fp)
   8d5ac:	e0bfff15 	stw	r2,-4(fp)
   8d5b0:	00000806 	br	8d5d4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8d5b4:	e0bffd17 	ldw	r2,-12(fp)
   8d5b8:	10800017 	ldw	r2,0(r2)
   8d5bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8d5c0:	00c00274 	movhi	r3,9
   8d5c4:	18fe8504 	addi	r3,r3,-1516
   8d5c8:	e0bffd17 	ldw	r2,-12(fp)
   8d5cc:	10ffc91e 	bne	r2,r3,8d4f4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8d5d0:	e03fff15 	stw	zero,-4(fp)
   8d5d4:	e0bfff17 	ldw	r2,-4(fp)
}
   8d5d8:	e037883a 	mov	sp,fp
   8d5dc:	dfc00117 	ldw	ra,4(sp)
   8d5e0:	df000017 	ldw	fp,0(sp)
   8d5e4:	dec00204 	addi	sp,sp,8
   8d5e8:	f800283a 	ret

0008d5ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8d5ec:	defffa04 	addi	sp,sp,-24
   8d5f0:	dfc00515 	stw	ra,20(sp)
   8d5f4:	df000415 	stw	fp,16(sp)
   8d5f8:	dc000315 	stw	r16,12(sp)
   8d5fc:	df000304 	addi	fp,sp,12
   8d600:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8d604:	00bffa04 	movi	r2,-24
   8d608:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8d60c:	e03ffe15 	stw	zero,-8(fp)
   8d610:	00002006 	br	8d694 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8d614:	e13ffe17 	ldw	r4,-8(fp)
   8d618:	04000274 	movhi	r16,9
   8d61c:	843a0704 	addi	r16,r16,-6116
   8d620:	01400304 	movi	r5,12
   8d624:	00812180 	call	81218 <__mulsi3>
   8d628:	1405883a 	add	r2,r2,r16
   8d62c:	10800017 	ldw	r2,0(r2)
   8d630:	1004c03a 	cmpne	r2,r2,zero
   8d634:	1000141e 	bne	r2,zero,8d688 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8d638:	e13ffe17 	ldw	r4,-8(fp)
   8d63c:	04000274 	movhi	r16,9
   8d640:	843a0704 	addi	r16,r16,-6116
   8d644:	01400304 	movi	r5,12
   8d648:	00812180 	call	81218 <__mulsi3>
   8d64c:	1407883a 	add	r3,r2,r16
   8d650:	e0bfff17 	ldw	r2,-4(fp)
   8d654:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8d658:	00800274 	movhi	r2,9
   8d65c:	10be8904 	addi	r2,r2,-1500
   8d660:	10c00017 	ldw	r3,0(r2)
   8d664:	e0bffe17 	ldw	r2,-8(fp)
   8d668:	1880040e 	bge	r3,r2,8d67c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8d66c:	00c00274 	movhi	r3,9
   8d670:	18fe8904 	addi	r3,r3,-1500
   8d674:	e0bffe17 	ldw	r2,-8(fp)
   8d678:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8d67c:	e0bffe17 	ldw	r2,-8(fp)
   8d680:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8d684:	00000606 	br	8d6a0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8d688:	e0bffe17 	ldw	r2,-8(fp)
   8d68c:	10800044 	addi	r2,r2,1
   8d690:	e0bffe15 	stw	r2,-8(fp)
   8d694:	e0bffe17 	ldw	r2,-8(fp)
   8d698:	10800810 	cmplti	r2,r2,32
   8d69c:	103fdd1e 	bne	r2,zero,8d614 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8d6a0:	e0bffd17 	ldw	r2,-12(fp)
}
   8d6a4:	e037883a 	mov	sp,fp
   8d6a8:	dfc00217 	ldw	ra,8(sp)
   8d6ac:	df000117 	ldw	fp,4(sp)
   8d6b0:	dc000017 	ldw	r16,0(sp)
   8d6b4:	dec00304 	addi	sp,sp,12
   8d6b8:	f800283a 	ret

0008d6bc <atexit>:
   8d6bc:	200b883a 	mov	r5,r4
   8d6c0:	000d883a 	mov	r6,zero
   8d6c4:	0009883a 	mov	r4,zero
   8d6c8:	000f883a 	mov	r7,zero
   8d6cc:	008d77c1 	jmpi	8d77c <__register_exitproc>

0008d6d0 <exit>:
   8d6d0:	defffe04 	addi	sp,sp,-8
   8d6d4:	000b883a 	mov	r5,zero
   8d6d8:	dc000015 	stw	r16,0(sp)
   8d6dc:	dfc00115 	stw	ra,4(sp)
   8d6e0:	2021883a 	mov	r16,r4
   8d6e4:	008d8b40 	call	8d8b4 <__call_exitprocs>
   8d6e8:	00800274 	movhi	r2,9
   8d6ec:	10be8004 	addi	r2,r2,-1536
   8d6f0:	11000017 	ldw	r4,0(r2)
   8d6f4:	20800f17 	ldw	r2,60(r4)
   8d6f8:	10000126 	beq	r2,zero,8d700 <exit+0x30>
   8d6fc:	103ee83a 	callr	r2
   8d700:	8009883a 	mov	r4,r16
   8d704:	008daa40 	call	8daa4 <_exit>

0008d708 <memcmp>:
   8d708:	00c000c4 	movi	r3,3
   8d70c:	1980032e 	bgeu	r3,r6,8d71c <memcmp+0x14>
   8d710:	2144b03a 	or	r2,r4,r5
   8d714:	10c4703a 	and	r2,r2,r3
   8d718:	10000f26 	beq	r2,zero,8d758 <memcmp+0x50>
   8d71c:	31ffffc4 	addi	r7,r6,-1
   8d720:	3000061e 	bne	r6,zero,8d73c <memcmp+0x34>
   8d724:	00000a06 	br	8d750 <memcmp+0x48>
   8d728:	39ffffc4 	addi	r7,r7,-1
   8d72c:	00bfffc4 	movi	r2,-1
   8d730:	21000044 	addi	r4,r4,1
   8d734:	29400044 	addi	r5,r5,1
   8d738:	38800526 	beq	r7,r2,8d750 <memcmp+0x48>
   8d73c:	20c00003 	ldbu	r3,0(r4)
   8d740:	28800003 	ldbu	r2,0(r5)
   8d744:	18bff826 	beq	r3,r2,8d728 <memcmp+0x20>
   8d748:	1885c83a 	sub	r2,r3,r2
   8d74c:	f800283a 	ret
   8d750:	0005883a 	mov	r2,zero
   8d754:	f800283a 	ret
   8d758:	180f883a 	mov	r7,r3
   8d75c:	20c00017 	ldw	r3,0(r4)
   8d760:	28800017 	ldw	r2,0(r5)
   8d764:	18bfed1e 	bne	r3,r2,8d71c <memcmp+0x14>
   8d768:	31bfff04 	addi	r6,r6,-4
   8d76c:	21000104 	addi	r4,r4,4
   8d770:	29400104 	addi	r5,r5,4
   8d774:	39bff936 	bltu	r7,r6,8d75c <memcmp+0x54>
   8d778:	003fe806 	br	8d71c <memcmp+0x14>

0008d77c <__register_exitproc>:
   8d77c:	defffa04 	addi	sp,sp,-24
   8d780:	00800274 	movhi	r2,9
   8d784:	10be8004 	addi	r2,r2,-1536
   8d788:	dc000015 	stw	r16,0(sp)
   8d78c:	14000017 	ldw	r16,0(r2)
   8d790:	dd000415 	stw	r20,16(sp)
   8d794:	2829883a 	mov	r20,r5
   8d798:	81405217 	ldw	r5,328(r16)
   8d79c:	dcc00315 	stw	r19,12(sp)
   8d7a0:	dc800215 	stw	r18,8(sp)
   8d7a4:	dc400115 	stw	r17,4(sp)
   8d7a8:	dfc00515 	stw	ra,20(sp)
   8d7ac:	2023883a 	mov	r17,r4
   8d7b0:	3027883a 	mov	r19,r6
   8d7b4:	3825883a 	mov	r18,r7
   8d7b8:	28002526 	beq	r5,zero,8d850 <__register_exitproc+0xd4>
   8d7bc:	29000117 	ldw	r4,4(r5)
   8d7c0:	008007c4 	movi	r2,31
   8d7c4:	11002716 	blt	r2,r4,8d864 <__register_exitproc+0xe8>
   8d7c8:	8800101e 	bne	r17,zero,8d80c <__register_exitproc+0x90>
   8d7cc:	2105883a 	add	r2,r4,r4
   8d7d0:	1085883a 	add	r2,r2,r2
   8d7d4:	20c00044 	addi	r3,r4,1
   8d7d8:	1145883a 	add	r2,r2,r5
   8d7dc:	0009883a 	mov	r4,zero
   8d7e0:	15000215 	stw	r20,8(r2)
   8d7e4:	28c00115 	stw	r3,4(r5)
   8d7e8:	2005883a 	mov	r2,r4
   8d7ec:	dfc00517 	ldw	ra,20(sp)
   8d7f0:	dd000417 	ldw	r20,16(sp)
   8d7f4:	dcc00317 	ldw	r19,12(sp)
   8d7f8:	dc800217 	ldw	r18,8(sp)
   8d7fc:	dc400117 	ldw	r17,4(sp)
   8d800:	dc000017 	ldw	r16,0(sp)
   8d804:	dec00604 	addi	sp,sp,24
   8d808:	f800283a 	ret
   8d80c:	29802204 	addi	r6,r5,136
   8d810:	00800044 	movi	r2,1
   8d814:	110e983a 	sll	r7,r2,r4
   8d818:	30c04017 	ldw	r3,256(r6)
   8d81c:	2105883a 	add	r2,r4,r4
   8d820:	1085883a 	add	r2,r2,r2
   8d824:	1185883a 	add	r2,r2,r6
   8d828:	19c6b03a 	or	r3,r3,r7
   8d82c:	14802015 	stw	r18,128(r2)
   8d830:	14c00015 	stw	r19,0(r2)
   8d834:	00800084 	movi	r2,2
   8d838:	30c04015 	stw	r3,256(r6)
   8d83c:	88bfe31e 	bne	r17,r2,8d7cc <__register_exitproc+0x50>
   8d840:	30804117 	ldw	r2,260(r6)
   8d844:	11c4b03a 	or	r2,r2,r7
   8d848:	30804115 	stw	r2,260(r6)
   8d84c:	003fdf06 	br	8d7cc <__register_exitproc+0x50>
   8d850:	00800274 	movhi	r2,9
   8d854:	10857e04 	addi	r2,r2,5624
   8d858:	100b883a 	mov	r5,r2
   8d85c:	80805215 	stw	r2,328(r16)
   8d860:	003fd606 	br	8d7bc <__register_exitproc+0x40>
   8d864:	00800034 	movhi	r2,0
   8d868:	10800004 	addi	r2,r2,0
   8d86c:	1000021e 	bne	r2,zero,8d878 <__register_exitproc+0xfc>
   8d870:	013fffc4 	movi	r4,-1
   8d874:	003fdc06 	br	8d7e8 <__register_exitproc+0x6c>
   8d878:	01006404 	movi	r4,400
   8d87c:	103ee83a 	callr	r2
   8d880:	1007883a 	mov	r3,r2
   8d884:	103ffa26 	beq	r2,zero,8d870 <__register_exitproc+0xf4>
   8d888:	80805217 	ldw	r2,328(r16)
   8d88c:	180b883a 	mov	r5,r3
   8d890:	18000115 	stw	zero,4(r3)
   8d894:	18800015 	stw	r2,0(r3)
   8d898:	80c05215 	stw	r3,328(r16)
   8d89c:	18006215 	stw	zero,392(r3)
   8d8a0:	18006315 	stw	zero,396(r3)
   8d8a4:	0009883a 	mov	r4,zero
   8d8a8:	883fc826 	beq	r17,zero,8d7cc <__register_exitproc+0x50>
   8d8ac:	003fd706 	br	8d80c <__register_exitproc+0x90>

0008d8b0 <register_fini>:
   8d8b0:	f800283a 	ret

0008d8b4 <__call_exitprocs>:
   8d8b4:	00800274 	movhi	r2,9
   8d8b8:	10be8004 	addi	r2,r2,-1536
   8d8bc:	10800017 	ldw	r2,0(r2)
   8d8c0:	defff304 	addi	sp,sp,-52
   8d8c4:	df000b15 	stw	fp,44(sp)
   8d8c8:	d8800115 	stw	r2,4(sp)
   8d8cc:	00800034 	movhi	r2,0
   8d8d0:	10800004 	addi	r2,r2,0
   8d8d4:	1005003a 	cmpeq	r2,r2,zero
   8d8d8:	d8800215 	stw	r2,8(sp)
   8d8dc:	d8800117 	ldw	r2,4(sp)
   8d8e0:	dd400815 	stw	r21,32(sp)
   8d8e4:	dd000715 	stw	r20,28(sp)
   8d8e8:	10805204 	addi	r2,r2,328
   8d8ec:	dfc00c15 	stw	ra,48(sp)
   8d8f0:	ddc00a15 	stw	r23,40(sp)
   8d8f4:	dd800915 	stw	r22,36(sp)
   8d8f8:	dcc00615 	stw	r19,24(sp)
   8d8fc:	dc800515 	stw	r18,20(sp)
   8d900:	dc400415 	stw	r17,16(sp)
   8d904:	dc000315 	stw	r16,12(sp)
   8d908:	282b883a 	mov	r21,r5
   8d90c:	2039883a 	mov	fp,r4
   8d910:	d8800015 	stw	r2,0(sp)
   8d914:	2829003a 	cmpeq	r20,r5,zero
   8d918:	d8800117 	ldw	r2,4(sp)
   8d91c:	14405217 	ldw	r17,328(r2)
   8d920:	88001026 	beq	r17,zero,8d964 <__call_exitprocs+0xb0>
   8d924:	ddc00017 	ldw	r23,0(sp)
   8d928:	88800117 	ldw	r2,4(r17)
   8d92c:	8c802204 	addi	r18,r17,136
   8d930:	143fffc4 	addi	r16,r2,-1
   8d934:	80000916 	blt	r16,zero,8d95c <__call_exitprocs+0xa8>
   8d938:	05bfffc4 	movi	r22,-1
   8d93c:	a000151e 	bne	r20,zero,8d994 <__call_exitprocs+0xe0>
   8d940:	8409883a 	add	r4,r16,r16
   8d944:	2105883a 	add	r2,r4,r4
   8d948:	1485883a 	add	r2,r2,r18
   8d94c:	10c02017 	ldw	r3,128(r2)
   8d950:	a8c01126 	beq	r21,r3,8d998 <__call_exitprocs+0xe4>
   8d954:	843fffc4 	addi	r16,r16,-1
   8d958:	85bff81e 	bne	r16,r22,8d93c <__call_exitprocs+0x88>
   8d95c:	d8800217 	ldw	r2,8(sp)
   8d960:	10003126 	beq	r2,zero,8da28 <__call_exitprocs+0x174>
   8d964:	dfc00c17 	ldw	ra,48(sp)
   8d968:	df000b17 	ldw	fp,44(sp)
   8d96c:	ddc00a17 	ldw	r23,40(sp)
   8d970:	dd800917 	ldw	r22,36(sp)
   8d974:	dd400817 	ldw	r21,32(sp)
   8d978:	dd000717 	ldw	r20,28(sp)
   8d97c:	dcc00617 	ldw	r19,24(sp)
   8d980:	dc800517 	ldw	r18,20(sp)
   8d984:	dc400417 	ldw	r17,16(sp)
   8d988:	dc000317 	ldw	r16,12(sp)
   8d98c:	dec00d04 	addi	sp,sp,52
   8d990:	f800283a 	ret
   8d994:	8409883a 	add	r4,r16,r16
   8d998:	88c00117 	ldw	r3,4(r17)
   8d99c:	2105883a 	add	r2,r4,r4
   8d9a0:	1445883a 	add	r2,r2,r17
   8d9a4:	18ffffc4 	addi	r3,r3,-1
   8d9a8:	11800217 	ldw	r6,8(r2)
   8d9ac:	1c001526 	beq	r3,r16,8da04 <__call_exitprocs+0x150>
   8d9b0:	10000215 	stw	zero,8(r2)
   8d9b4:	303fe726 	beq	r6,zero,8d954 <__call_exitprocs+0xa0>
   8d9b8:	00c00044 	movi	r3,1
   8d9bc:	1c06983a 	sll	r3,r3,r16
   8d9c0:	90804017 	ldw	r2,256(r18)
   8d9c4:	8cc00117 	ldw	r19,4(r17)
   8d9c8:	1884703a 	and	r2,r3,r2
   8d9cc:	10001426 	beq	r2,zero,8da20 <__call_exitprocs+0x16c>
   8d9d0:	90804117 	ldw	r2,260(r18)
   8d9d4:	1884703a 	and	r2,r3,r2
   8d9d8:	10000c1e 	bne	r2,zero,8da0c <__call_exitprocs+0x158>
   8d9dc:	2105883a 	add	r2,r4,r4
   8d9e0:	1485883a 	add	r2,r2,r18
   8d9e4:	11400017 	ldw	r5,0(r2)
   8d9e8:	e009883a 	mov	r4,fp
   8d9ec:	303ee83a 	callr	r6
   8d9f0:	88800117 	ldw	r2,4(r17)
   8d9f4:	98bfc81e 	bne	r19,r2,8d918 <__call_exitprocs+0x64>
   8d9f8:	b8800017 	ldw	r2,0(r23)
   8d9fc:	147fd526 	beq	r2,r17,8d954 <__call_exitprocs+0xa0>
   8da00:	003fc506 	br	8d918 <__call_exitprocs+0x64>
   8da04:	8c000115 	stw	r16,4(r17)
   8da08:	003fea06 	br	8d9b4 <__call_exitprocs+0x100>
   8da0c:	2105883a 	add	r2,r4,r4
   8da10:	1485883a 	add	r2,r2,r18
   8da14:	11000017 	ldw	r4,0(r2)
   8da18:	303ee83a 	callr	r6
   8da1c:	003ff406 	br	8d9f0 <__call_exitprocs+0x13c>
   8da20:	303ee83a 	callr	r6
   8da24:	003ff206 	br	8d9f0 <__call_exitprocs+0x13c>
   8da28:	88800117 	ldw	r2,4(r17)
   8da2c:	1000081e 	bne	r2,zero,8da50 <__call_exitprocs+0x19c>
   8da30:	89000017 	ldw	r4,0(r17)
   8da34:	20000726 	beq	r4,zero,8da54 <__call_exitprocs+0x1a0>
   8da38:	b9000015 	stw	r4,0(r23)
   8da3c:	8809883a 	mov	r4,r17
   8da40:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8da44:	bc400017 	ldw	r17,0(r23)
   8da48:	883fb71e 	bne	r17,zero,8d928 <__call_exitprocs+0x74>
   8da4c:	003fc506 	br	8d964 <__call_exitprocs+0xb0>
   8da50:	89000017 	ldw	r4,0(r17)
   8da54:	882f883a 	mov	r23,r17
   8da58:	2023883a 	mov	r17,r4
   8da5c:	883fb21e 	bne	r17,zero,8d928 <__call_exitprocs+0x74>
   8da60:	003fc006 	br	8d964 <__call_exitprocs+0xb0>

0008da64 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8da64:	defffd04 	addi	sp,sp,-12
   8da68:	df000215 	stw	fp,8(sp)
   8da6c:	df000204 	addi	fp,sp,8
   8da70:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8da74:	e0bfff17 	ldw	r2,-4(fp)
   8da78:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8da7c:	e0bffe17 	ldw	r2,-8(fp)
   8da80:	1005003a 	cmpeq	r2,r2,zero
   8da84:	1000021e 	bne	r2,zero,8da90 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8da88:	002af070 	cmpltui	zero,zero,43969
   8da8c:	00000106 	br	8da94 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8da90:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8da94:	e037883a 	mov	sp,fp
   8da98:	df000017 	ldw	fp,0(sp)
   8da9c:	dec00104 	addi	sp,sp,4
   8daa0:	f800283a 	ret

0008daa4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8daa4:	defffd04 	addi	sp,sp,-12
   8daa8:	dfc00215 	stw	ra,8(sp)
   8daac:	df000115 	stw	fp,4(sp)
   8dab0:	df000104 	addi	fp,sp,4
   8dab4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8dab8:	e13fff17 	ldw	r4,-4(fp)
   8dabc:	008da640 	call	8da64 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8dac0:	003fff06 	br	8dac0 <_exit+0x1c>
   8dac4:	00000010 	cmplti	zero,zero,0
   8dac8:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8dacc:	00527a01 	jmpi	527a0 <__alt_mem_sram_0-0x2d860>
   8dad0:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   8dad4:	001b0c0b 	ldhu	zero,27696(zero)
   8dad8:	00000028 	cmpgeui	zero,zero,0
   8dadc:	00000018 	cmpnei	zero,zero,0
   8dae0:	000889e4 	muli	zero,zero,8743
   8dae4:	0000066c 	andhi	zero,zero,25
   8dae8:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   8daec:	910a9074 	orhi	r4,r18,10817
   8daf0:	94089209 	0x94089209
   8daf4:	97049606 	br	8ed50 <jtag_uart_0+0x3b4>
   8daf8:	93019f03 	ldbu	r12,1660(r18)
   8dafc:	9c059507 	ldb	r16,5716(r19)
   8db00:	00000002 	0x2
   8db04:	00000028 	cmpgeui	zero,zero,0
   8db08:	00000044 	movi	zero,1
   8db0c:	00089050 	cmplti	zero,zero,8769
   8db10:	00000660 	cmpeqi	zero,zero,25
   8db14:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   8db18:	92099170 	cmpltui	r8,r18,9797
   8db1c:	96069408 	cmpgei	et,r18,6736
   8db20:	9c039704 	addi	r16,r19,3676
   8db24:	90019f02 	0x90019f02
   8db28:	9507930a 	0x9507930a
   8db2c:	00000005 	stb	zero,0(zero)
   8db30:	0008d8b0 	cmpltui	zero,zero,9058
