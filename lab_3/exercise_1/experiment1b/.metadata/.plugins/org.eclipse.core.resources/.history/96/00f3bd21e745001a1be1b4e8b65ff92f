////////////////////////
// CODE SECTION BEGIN //
////////////////////////

#include "define.h"

// ISR when the counter is expired
void handle_counter_expire_interrupts(floor_P* current_floor)
{
	printf("Move Counter expires\n");
	if (current_floor->state){
		if(current_floor->cur_floor < current_floor->des_floor) {
			current_floor->cur_floor = current_floor->cur_floor + 1;
		}else {
			current_floor->cur_floor = current_floor->cur_floor - 1;
		}
	}

	printf("current floor is %d \n", current_floor->cur_floor);
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
}

/*void handle_door_expire_interrupts(floor_P* current_floor)
{
	printf("Door Counter expires\n");
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
}
*/

void reset_counter() {
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 1);
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 0);

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);

}

int read_counter() {
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 0);
}

int read_counter_interrupt() {
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 2);
}

void load_counter_config(counter* config) {
	if (config.)
	printf("Loading counter config %d\n", *config);

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 3, *config);
}

// Function for initializing the ISR of the Counter
void init_counter_irq(floor_P *current_floor) {
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);

	alt_irq_register(CUSTOM_COUNTER_COMPONENT_0_IRQ, (void*)current_floor, (void*)handle_counter_expire_interrupts );
}

////////////////////////
// CODE SECTION END   //
////////////////////////
